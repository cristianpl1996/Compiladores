Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    CONCATSTR
    CONTINUE
    DECLARE
    DOUBLECOLONCLASS
    ELSEIF
    EMPTY
    FINAL
    GOTO
    INCLUDE_ONCE
    INSTANCEOF
    ITERABLE
    LSBRACKETS
    MIXED
    NAMESPACE
    NULL
    OBJECT
    REQUIRE
    REQUIRE_ONCE
    RSBRACKETS
    SELF
    SERIALIZE
    SPL_AUTOLOAD_REGISTER
    THROW
    TRAIT
    UNSERIALIZE
    UNSET
    USE
    __CALL
    __CALLSTATIC
    __CLASS__
    __CLONE
    __DEBUGINFO
    __GET
    __INVOKE
    __ISSET
    __SET
    __SET_STATE
    __SLEEP
    __TOSTRING
    __UNSET
    __WAKEUP

Grammar

Rule 0     S' -> program
Rule 1     program -> SLABEL import declaracion_sentencias ELABEL
Rule 2     program -> SLABEL import ELABEL
Rule 3     program -> SLABEL declaracion_sentencias ELABEL
Rule 4     declaracion_sentencias -> sentencias declaracion_sentencias
Rule 5     declaracion_sentencias -> sentencias
Rule 6     sentencias -> sentassign
Rule 7     sentencias -> call_function SEMICOLON
Rule 8     sentencias -> sentif
Rule 9     sentencias -> sentecho
Rule 10    sentencias -> sentfunc
Rule 11    sentencias -> sentreturn
Rule 12    sentencias -> sentfor
Rule 13    sentencias -> sentwhile
Rule 14    sentencias -> sentdowhile
Rule 15    sentencias -> sentforeach
Rule 16    sentencias -> sentswitch
Rule 17    sentencias -> sentconst
Rule 18    sentencias -> sentclass
Rule 19    sentencias -> met_clases
Rule 20    sentencias -> var_declaration
Rule 21    sentencias -> sentinterface
Rule 22    sentencias -> <empty>
Rule 23    var_declaration -> ID SEMICOLON var_declaration
Rule 24    var_declaration -> ID SEMICOLON
Rule 25    var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration
Rule 26    var_declaration -> ID EQUAL INTEGER SEMICOLON
Rule 27    var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration
Rule 28    var_declaration -> ID EQUAL FLOAT SEMICOLON
Rule 29    var_declaration -> ID EQUAL STRING SEMICOLON var_declaration
Rule 30    var_declaration -> ID EQUAL STRING SEMICOLON
Rule 31    var_declaration -> ID EQUAL bool SEMICOLON var_declaration
Rule 32    var_declaration -> ID EQUAL bool SEMICOLON
Rule 33    var_declaration -> ID EQUAL ID SEMICOLON var_declaration
Rule 34    var_declaration -> ID EQUAL ID SEMICOLON
Rule 35    var_declaration -> ID EQUAL exp SEMICOLON var_declaration
Rule 36    var_declaration -> ID EQUAL exp SEMICOLON
Rule 37    var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration
Rule 38    var_declaration -> ID EQUAL NEW call_function SEMICOLON
Rule 39    var_declaration -> ID EQUAL declaracion_array var_declaration
Rule 40    var_declaration -> ID EQUAL declaracion_array
Rule 41    var_declaration -> REFERENCE ID SEMICOLON var_declaration
Rule 42    var_declaration -> REFERENCE ID SEMICOLON
Rule 43    var_declaration -> ID EQUAL call_function SEMICOLON var_declaration
Rule 44    var_declaration -> ID EQUAL call_function SEMICOLON
Rule 45    var_declaration -> met_clases
Rule 46    sentclass -> CLASS NFUNCTION cuerpoclase
Rule 47    sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
Rule 48    sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
Rule 49    sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY
Rule 50    cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON cuerpo_interface
Rule 51    cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON
Rule 52    cuerpoclase -> LKEY listaatributos listametodos RKEY
Rule 53    cuerpoclase -> LKEY listaatributos RKEY
Rule 54    cuerpoclase -> LKEY listametodos RKEY
Rule 55    listaatributos -> listaatributos scopes var_declaration
Rule 56    listaatributos -> scopes var_declaration
Rule 57    listaatributos -> scopes STATIC var_declaration
Rule 58    listametodos -> listametodos scopes sentfunc
Rule 59    listametodos -> scopes sentfunc
Rule 60    listametodos -> listametodos sentfunc
Rule 61    listametodos -> sentfunc
Rule 62    listametodos -> listametodos scopes STATIC sentfunc
Rule 63    listametodos -> scopes STATIC sentfunc
Rule 64    scopes -> PUBLIC
Rule 65    scopes -> PRIVATE
Rule 66    scopes -> PROTECTED
Rule 67    met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS
Rule 68    met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
Rule 69    met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON
Rule 70    met_clases -> ID DOUBLE_COLON call_function SEMICOLON
Rule 71    met_clases -> CONST STRING EQUAL typevar SEMICOLON
Rule 72    met_clases -> ID EQUAL NEW call_function SEMICOLON
Rule 73    met_clases -> ID CMETHOD call_function SEMICOLON
Rule 74    met_clases -> ID CMETHOD NFUNCTION
Rule 75    met_clases -> ID CMETHOD PUBLIC SEMICOLON
Rule 76    met_clases -> ID CMETHOD PROTECTED SEMICOLON
Rule 77    met_clases -> ID CMETHOD PRIVATE SEMICOLON
Rule 78    met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 79    met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 80    met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 81    met_clases -> <empty>
Rule 82    sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
Rule 83    sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
Rule 84    declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON
Rule 85    declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS
Rule 86    cuerpo_array -> typevar COMMA cuerpo_array
Rule 87    cuerpo_array -> typevar EQUALG typevar COMMA cuerpo_array
Rule 88    cuerpo_array -> typevar
Rule 89    cuerpo_array -> typevar EQUALG typevar
Rule 90    cuerpo_array -> empty
Rule 91    sentreturn -> RETURN type SEMICOLON
Rule 92    sentreturn -> RETURN cond SEMICOLON
Rule 93    sentreturn -> RETURN var_declaration
Rule 94    sentreturn -> RETURN expsimple SEMICOLON
Rule 95    sentreturn -> RETURN SEMICOLON
Rule 96    sentecho -> ECHO typevar SEMICOLON
Rule 97    sentecho -> ECHO exp SEMICOLON
Rule 98    sentecho -> ECHO cond SEMICOLON
Rule 99    sentecho -> ECHO met_clases
Rule 100   sentif -> IF genif auxsentif
Rule 101   auxsentif -> ELSE IF genif auxsentif
Rule 102   auxsentif -> ELSE LKEY declaracion_sentencias RKEY
Rule 103   auxsentif -> empty
Rule 104   genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 105   genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 106   sentassign -> ID EQUAL exp SEMICOLON
Rule 107   sentassign -> ID PLUS PLUS SEMICOLON
Rule 108   sentassign -> ID EQUAL declaracion_array
Rule 109   sentassign -> ID MINUS MINUS SEMICOLON
Rule 110   bool -> TRUE
Rule 111   bool -> FALSE
Rule 112   oplogicos -> AND
Rule 113   oplogicos -> OR
Rule 114   oplogicos -> XOR
Rule 115   oplogicos -> NOT
Rule 116   exp -> expsimple opcomparacion expsimple
Rule 117   exp -> LPARENTHESIS expsimple opcomparacion expsimple RPARENTHESIS
Rule 118   exp -> expsimple
Rule 119   opcomparacion -> EQUALEQUAL
Rule 120   opcomparacion -> NEQUAL
Rule 121   opcomparacion -> IDENTICAL
Rule 122   opcomparacion -> GREATER
Rule 123   opcomparacion -> GEQUAL
Rule 124   opcomparacion -> LESS
Rule 125   opcomparacion -> LEQUAL
Rule 126   expsimple -> expsimple opsuma term
Rule 127   expsimple -> term
Rule 128   term -> term opmult factor
Rule 129   term -> factor
Rule 130   factor -> INTEGER
Rule 131   factor -> FLOAT
Rule 132   factor -> ID
Rule 133   factor -> call_function
Rule 134   factor -> LPARENTHESIS expsimple RPARENTHESIS
Rule 135   typevar -> STRING
Rule 136   typevar -> INTEGER
Rule 137   typevar -> TRUE
Rule 138   typevar -> FALSE
Rule 139   typevar -> FLOAT
Rule 140   opsuma -> PLUS
Rule 141   opsuma -> MINUS
Rule 142   opmult -> TIMES
Rule 143   opmult -> DIV
Rule 144   opmult -> MODULE
Rule 145   opmult -> EXPONENTIATION
Rule 146   cond -> type
Rule 147   cond -> cond opcomparacion cond
Rule 148   cond -> cond oplogicos cond
Rule 149   cond -> LPARENTHESIS type RPARENTHESIS
Rule 150   cond -> LPARENTHESIS cond RPARENTHESIS
Rule 151   type -> typevar
Rule 152   type -> var_declaration_gen
Rule 153   var_declaration_gen -> ID
Rule 154   var_declaration_gen -> ID PLUS PLUS
Rule 155   var_declaration_gen -> ID MINUS MINUS
Rule 156   var_declaration_gen -> MINUS MINUS ID
Rule 157   var_declaration_gen -> PLUS PLUS ID
Rule 158   var_declaration_gen -> typevar
Rule 159   arg -> var_declaration_gen
Rule 160   arg -> type
Rule 161   arg -> type COMMA arg
Rule 162   arg -> STRING
Rule 163   arg -> var_declaration_gen COMMA arg
Rule 164   arg -> STRING COMMA arg
Rule 165   arg -> <empty>
Rule 166   argfunc -> ID
Rule 167   argfunc -> ID COMMA argfunc
Rule 168   argfunc -> <empty>
Rule 169   sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 170   sentfunc -> met_clases
Rule 171   call_function -> NFUNCTION
Rule 172   call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS
Rule 173   call_function -> ID LPARENTHESIS arg RPARENTHESIS
Rule 174   sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 175   sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 176   sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 177   sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 178   sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
Rule 179   sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 180   sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 181   sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 182   sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
Rule 183   sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
Rule 184   cuerpo_switch -> CASE cuerpo_case cuerpo_switch
Rule 185   cuerpo_switch -> CASE cuerpo_case
Rule 186   cuerpo_switch -> DEFAULT TWOPOINTS declaracion_sentencias BREAK SEMICOLON
Rule 187   cuerpo_case -> INTEGER TWOPOINTS declaracion_sentencias BREAK SEMICOLON
Rule 188   import -> INCLUDE STRING SEMICOLON
Rule 189   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 112
ARRAY                : 84 85
AS                   : 179 180 181 182
BREAK                : 186 187
CASE                 : 184 185
CLASS                : 46 47 48
CMETHOD              : 73 74 75 76 77
COMMA                : 82 83 86 87 161 163 164 167
CONCATSTR            : 
CONST                : 71
CONSTRUCTOR          : 78
CONTINUE             : 
DECLARE              : 
DEFAULT              : 186
DEFINE               : 82 83
DESTRUCTOR           : 79
DIV                  : 143
DO                   : 178
DOUBLECOLONCLASS     : 
DOUBLE_COLON         : 69 70
ECHO                 : 96 97 98 99
ELABEL               : 1 2 3
ELSE                 : 101 102
ELSEIF               : 
EMPTY                : 
EQUAL                : 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 43 44 71 72 106 108 174 175 176
EQUALEQUAL           : 119
EQUALG               : 87 89 180 182
EXPONENTIATION       : 145
EXTENDS              : 47
FALSE                : 111 138
FINAL                : 
FLOAT                : 27 28 131 139
FOR                  : 174 175 176
FOREACH              : 179 180 181 182
FUNCTION             : 50 51 78 79 80 169
GEQUAL               : 123
GET_CLASS            : 68
GOTO                 : 
GREATER              : 122
ID                   : 23 24 25 26 27 28 29 30 31 32 33 33 34 34 35 36 37 38 39 40 41 42 43 44 67 68 70 72 73 74 75 76 77 106 107 108 109 132 153 154 155 156 157 166 167 173 174 175 175 176 176 179 179 180 180 180 181 182 182 183
IDENTICAL            : 121
IF                   : 100 101
IMPLEMENTS           : 48
INCLUDE              : 188
INCLUDE_ONCE         : 
INSTANCEOF           : 
INTEGER              : 25 26 130 136 187
INTERFACE            : 49
ISSET                : 67
ITERABLE             : 
LEQUAL               : 125
LESS                 : 124
LKEY                 : 49 52 53 54 78 79 80 102 104 105 169 174 175 176 177 178 179 180 181 182 183
LPARENTHESIS         : 50 51 67 68 78 79 80 82 83 84 85 104 105 117 134 149 150 169 172 173 174 175 176 177 178 179 180 181 182 183
LSBRACKETS           : 
MINUS                : 109 109 141 155 155 156 156 176 176
MIXED                : 
MODULE               : 144
NAMESPACE            : 
NEQUAL               : 120
NEW                  : 37 38 72
NFUNCTION            : 46 47 47 48 48 49 50 51 69 74 80 169 171 172
NOT                  : 115
NULL                 : 
OBJECT               : 
OR                   : 113
PLUS                 : 107 107 140 154 154 157 157 175 175
PRIVATE              : 65 77
PROTECTED            : 66 76
PUBLIC               : 64 75
REFERENCE            : 41 42
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 91 92 93 94 95
RKEY                 : 49 52 53 54 78 79 80 102 104 105 169 174 175 176 177 178 179 180 181 182 183
RPARENTHESIS         : 50 51 67 68 78 79 80 82 83 84 85 104 105 117 134 149 150 169 172 173 174 175 176 177 178 179 180 181 182 183
RSBRACKETS           : 
SELF                 : 
SEMICOLON            : 7 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 41 42 43 44 50 51 68 69 70 71 72 73 75 76 77 82 83 84 91 92 94 95 96 97 98 106 107 109 174 174 175 175 176 176 178 186 187 188
SERIALIZE            : 
SLABEL               : 1 2 3
SPL_AUTOLOAD_REGISTER : 
STATIC               : 57 62 63
STRING               : 29 30 71 82 83 135 162 164 188
SWITCH               : 183
THROW                : 
TIMES                : 142
TRAIT                : 
TRUE                 : 110 137
TWOPOINTS            : 186 187
UNSERIALIZE          : 
UNSET                : 
USE                  : 
WHILE                : 177 178
XOR                  : 114
__CALL               : 
__CALLSTATIC         : 
__CLASS__            : 
__CLONE              : 
__DEBUGINFO          : 
__GET                : 
__INVOKE             : 
__ISSET              : 
__SET                : 
__SET_STATE          : 
__SLEEP              : 
__TOSTRING           : 
__UNSET              : 
__WAKEUP             : 
error                : 

Nonterminals, with rules where they appear

arg                  : 50 51 161 163 164 172 173
argfunc              : 78 79 80 167 169
auxsentif            : 100 101
bool                 : 31 32
call_function        : 7 37 38 43 44 69 70 72 73 133
cond                 : 92 98 104 147 147 148 148 150 174 175 176 177 178
cuerpo_array         : 84 85 86 87
cuerpo_case          : 184 185
cuerpo_interface     : 49 50
cuerpo_switch        : 183 184
cuerpoclase          : 46 47 48
declaracion_array    : 39 40 82 108 181
declaracion_sentencias : 1 3 4 78 79 80 102 104 105 169 174 175 176 177 178 179 180 181 182 186 187
empty                : 90 103
exp                  : 35 36 97 106
expsimple            : 94 116 116 117 117 118 126 134 174 174 175 176
factor               : 128 129
genif                : 100 101
import               : 1 2
listaatributos       : 52 53 55
listametodos         : 52 54 58 60 62
met_clases           : 19 45 99 105 170 182
opcomparacion        : 116 117 147
oplogicos            : 148
opmult               : 128
opsuma               : 126
program              : 0
scopes               : 50 51 55 56 57 58 59 62 63
sentassign           : 6
sentclass            : 18
sentconst            : 17
sentdowhile          : 14
sentecho             : 9
sentencias           : 4 5
sentfor              : 12
sentforeach          : 15
sentfunc             : 10 58 59 60 61 62 63
sentif               : 8
sentinterface        : 21
sentreturn           : 11
sentswitch           : 16
sentwhile            : 13
term                 : 126 127 128
type                 : 91 146 149 160 161
typevar              : 71 83 86 87 87 88 89 89 96 151 158
var_declaration      : 20 23 25 27 29 31 33 35 37 39 41 43 55 56 57 93
var_declaration_gen  : 152 159 163

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . SLABEL import declaracion_sentencias ELABEL
    (2) program -> . SLABEL import ELABEL
    (3) program -> . SLABEL declaracion_sentencias ELABEL

    SLABEL          shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> SLABEL . import declaracion_sentencias ELABEL
    (2) program -> SLABEL . import ELABEL
    (3) program -> SLABEL . declaracion_sentencias ELABEL
    (188) import -> . INCLUDE STRING SEMICOLON
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for ELABEL resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    INCLUDE         shift and go to state 5
    ELABEL          reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]

    import                         shift and go to state 3
    declaracion_sentencias         shift and go to state 4
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 3

    (1) program -> SLABEL import . declaracion_sentencias ELABEL
    (2) program -> SLABEL import . ELABEL
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ELABEL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for ELABEL resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    ELABEL          shift and go to state 42
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ELABEL          [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 41
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 4

    (3) program -> SLABEL declaracion_sentencias . ELABEL

    ELABEL          shift and go to state 43


state 5

    (188) import -> INCLUDE . STRING SEMICOLON

    STRING          shift and go to state 44


state 6

    (4) declaracion_sentencias -> sentencias . declaracion_sentencias
    (5) declaracion_sentencias -> sentencias .
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! reduce/reduce conflict for ELABEL resolved using rule 5 (declaracion_sentencias -> sentencias .)
  ! reduce/reduce conflict for RKEY resolved using rule 5 (declaracion_sentencias -> sentencias .)
  ! reduce/reduce conflict for BREAK resolved using rule 5 (declaracion_sentencias -> sentencias .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for ELABEL resolved using rule 5 (declaracion_sentencias -> sentencias .)
  ! reduce/reduce conflict for RKEY resolved using rule 5 (declaracion_sentencias -> sentencias .)
  ! reduce/reduce conflict for BREAK resolved using rule 5 (declaracion_sentencias -> sentencias .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    ELABEL          reduce using rule 5 (declaracion_sentencias -> sentencias .)
    RKEY            reduce using rule 5 (declaracion_sentencias -> sentencias .)
    BREAK           reduce using rule 5 (declaracion_sentencias -> sentencias .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ELABEL          [ reduce using rule 22 (sentencias -> .) ]
  ! RKEY            [ reduce using rule 22 (sentencias -> .) ]
  ! BREAK           [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]

    sentencias                     shift and go to state 6
    declaracion_sentencias         shift and go to state 45
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 7

    (6) sentencias -> sentassign .

    ID              reduce using rule 6 (sentencias -> sentassign .)
    NFUNCTION       reduce using rule 6 (sentencias -> sentassign .)
    IF              reduce using rule 6 (sentencias -> sentassign .)
    ECHO            reduce using rule 6 (sentencias -> sentassign .)
    FUNCTION        reduce using rule 6 (sentencias -> sentassign .)
    RETURN          reduce using rule 6 (sentencias -> sentassign .)
    FOR             reduce using rule 6 (sentencias -> sentassign .)
    WHILE           reduce using rule 6 (sentencias -> sentassign .)
    DO              reduce using rule 6 (sentencias -> sentassign .)
    FOREACH         reduce using rule 6 (sentencias -> sentassign .)
    SWITCH          reduce using rule 6 (sentencias -> sentassign .)
    DEFINE          reduce using rule 6 (sentencias -> sentassign .)
    CLASS           reduce using rule 6 (sentencias -> sentassign .)
    ISSET           reduce using rule 6 (sentencias -> sentassign .)
    GET_CLASS       reduce using rule 6 (sentencias -> sentassign .)
    CONST           reduce using rule 6 (sentencias -> sentassign .)
    REFERENCE       reduce using rule 6 (sentencias -> sentassign .)
    INTERFACE       reduce using rule 6 (sentencias -> sentassign .)
    ELABEL          reduce using rule 6 (sentencias -> sentassign .)
    RKEY            reduce using rule 6 (sentencias -> sentassign .)
    BREAK           reduce using rule 6 (sentencias -> sentassign .)


state 8

    (7) sentencias -> call_function . SEMICOLON

    SEMICOLON       shift and go to state 46


state 9

    (8) sentencias -> sentif .

    ID              reduce using rule 8 (sentencias -> sentif .)
    NFUNCTION       reduce using rule 8 (sentencias -> sentif .)
    IF              reduce using rule 8 (sentencias -> sentif .)
    ECHO            reduce using rule 8 (sentencias -> sentif .)
    FUNCTION        reduce using rule 8 (sentencias -> sentif .)
    RETURN          reduce using rule 8 (sentencias -> sentif .)
    FOR             reduce using rule 8 (sentencias -> sentif .)
    WHILE           reduce using rule 8 (sentencias -> sentif .)
    DO              reduce using rule 8 (sentencias -> sentif .)
    FOREACH         reduce using rule 8 (sentencias -> sentif .)
    SWITCH          reduce using rule 8 (sentencias -> sentif .)
    DEFINE          reduce using rule 8 (sentencias -> sentif .)
    CLASS           reduce using rule 8 (sentencias -> sentif .)
    ISSET           reduce using rule 8 (sentencias -> sentif .)
    GET_CLASS       reduce using rule 8 (sentencias -> sentif .)
    CONST           reduce using rule 8 (sentencias -> sentif .)
    REFERENCE       reduce using rule 8 (sentencias -> sentif .)
    INTERFACE       reduce using rule 8 (sentencias -> sentif .)
    ELABEL          reduce using rule 8 (sentencias -> sentif .)
    RKEY            reduce using rule 8 (sentencias -> sentif .)
    BREAK           reduce using rule 8 (sentencias -> sentif .)


state 10

    (9) sentencias -> sentecho .

    ID              reduce using rule 9 (sentencias -> sentecho .)
    NFUNCTION       reduce using rule 9 (sentencias -> sentecho .)
    IF              reduce using rule 9 (sentencias -> sentecho .)
    ECHO            reduce using rule 9 (sentencias -> sentecho .)
    FUNCTION        reduce using rule 9 (sentencias -> sentecho .)
    RETURN          reduce using rule 9 (sentencias -> sentecho .)
    FOR             reduce using rule 9 (sentencias -> sentecho .)
    WHILE           reduce using rule 9 (sentencias -> sentecho .)
    DO              reduce using rule 9 (sentencias -> sentecho .)
    FOREACH         reduce using rule 9 (sentencias -> sentecho .)
    SWITCH          reduce using rule 9 (sentencias -> sentecho .)
    DEFINE          reduce using rule 9 (sentencias -> sentecho .)
    CLASS           reduce using rule 9 (sentencias -> sentecho .)
    ISSET           reduce using rule 9 (sentencias -> sentecho .)
    GET_CLASS       reduce using rule 9 (sentencias -> sentecho .)
    CONST           reduce using rule 9 (sentencias -> sentecho .)
    REFERENCE       reduce using rule 9 (sentencias -> sentecho .)
    INTERFACE       reduce using rule 9 (sentencias -> sentecho .)
    ELABEL          reduce using rule 9 (sentencias -> sentecho .)
    RKEY            reduce using rule 9 (sentencias -> sentecho .)
    BREAK           reduce using rule 9 (sentencias -> sentecho .)


state 11

    (10) sentencias -> sentfunc .

    ID              reduce using rule 10 (sentencias -> sentfunc .)
    NFUNCTION       reduce using rule 10 (sentencias -> sentfunc .)
    IF              reduce using rule 10 (sentencias -> sentfunc .)
    ECHO            reduce using rule 10 (sentencias -> sentfunc .)
    FUNCTION        reduce using rule 10 (sentencias -> sentfunc .)
    RETURN          reduce using rule 10 (sentencias -> sentfunc .)
    FOR             reduce using rule 10 (sentencias -> sentfunc .)
    WHILE           reduce using rule 10 (sentencias -> sentfunc .)
    DO              reduce using rule 10 (sentencias -> sentfunc .)
    FOREACH         reduce using rule 10 (sentencias -> sentfunc .)
    SWITCH          reduce using rule 10 (sentencias -> sentfunc .)
    DEFINE          reduce using rule 10 (sentencias -> sentfunc .)
    CLASS           reduce using rule 10 (sentencias -> sentfunc .)
    ISSET           reduce using rule 10 (sentencias -> sentfunc .)
    GET_CLASS       reduce using rule 10 (sentencias -> sentfunc .)
    CONST           reduce using rule 10 (sentencias -> sentfunc .)
    REFERENCE       reduce using rule 10 (sentencias -> sentfunc .)
    INTERFACE       reduce using rule 10 (sentencias -> sentfunc .)
    ELABEL          reduce using rule 10 (sentencias -> sentfunc .)
    RKEY            reduce using rule 10 (sentencias -> sentfunc .)
    BREAK           reduce using rule 10 (sentencias -> sentfunc .)


state 12

    (11) sentencias -> sentreturn .

    ID              reduce using rule 11 (sentencias -> sentreturn .)
    NFUNCTION       reduce using rule 11 (sentencias -> sentreturn .)
    IF              reduce using rule 11 (sentencias -> sentreturn .)
    ECHO            reduce using rule 11 (sentencias -> sentreturn .)
    FUNCTION        reduce using rule 11 (sentencias -> sentreturn .)
    RETURN          reduce using rule 11 (sentencias -> sentreturn .)
    FOR             reduce using rule 11 (sentencias -> sentreturn .)
    WHILE           reduce using rule 11 (sentencias -> sentreturn .)
    DO              reduce using rule 11 (sentencias -> sentreturn .)
    FOREACH         reduce using rule 11 (sentencias -> sentreturn .)
    SWITCH          reduce using rule 11 (sentencias -> sentreturn .)
    DEFINE          reduce using rule 11 (sentencias -> sentreturn .)
    CLASS           reduce using rule 11 (sentencias -> sentreturn .)
    ISSET           reduce using rule 11 (sentencias -> sentreturn .)
    GET_CLASS       reduce using rule 11 (sentencias -> sentreturn .)
    CONST           reduce using rule 11 (sentencias -> sentreturn .)
    REFERENCE       reduce using rule 11 (sentencias -> sentreturn .)
    INTERFACE       reduce using rule 11 (sentencias -> sentreturn .)
    ELABEL          reduce using rule 11 (sentencias -> sentreturn .)
    RKEY            reduce using rule 11 (sentencias -> sentreturn .)
    BREAK           reduce using rule 11 (sentencias -> sentreturn .)


state 13

    (12) sentencias -> sentfor .

    ID              reduce using rule 12 (sentencias -> sentfor .)
    NFUNCTION       reduce using rule 12 (sentencias -> sentfor .)
    IF              reduce using rule 12 (sentencias -> sentfor .)
    ECHO            reduce using rule 12 (sentencias -> sentfor .)
    FUNCTION        reduce using rule 12 (sentencias -> sentfor .)
    RETURN          reduce using rule 12 (sentencias -> sentfor .)
    FOR             reduce using rule 12 (sentencias -> sentfor .)
    WHILE           reduce using rule 12 (sentencias -> sentfor .)
    DO              reduce using rule 12 (sentencias -> sentfor .)
    FOREACH         reduce using rule 12 (sentencias -> sentfor .)
    SWITCH          reduce using rule 12 (sentencias -> sentfor .)
    DEFINE          reduce using rule 12 (sentencias -> sentfor .)
    CLASS           reduce using rule 12 (sentencias -> sentfor .)
    ISSET           reduce using rule 12 (sentencias -> sentfor .)
    GET_CLASS       reduce using rule 12 (sentencias -> sentfor .)
    CONST           reduce using rule 12 (sentencias -> sentfor .)
    REFERENCE       reduce using rule 12 (sentencias -> sentfor .)
    INTERFACE       reduce using rule 12 (sentencias -> sentfor .)
    ELABEL          reduce using rule 12 (sentencias -> sentfor .)
    RKEY            reduce using rule 12 (sentencias -> sentfor .)
    BREAK           reduce using rule 12 (sentencias -> sentfor .)


state 14

    (13) sentencias -> sentwhile .

    ID              reduce using rule 13 (sentencias -> sentwhile .)
    NFUNCTION       reduce using rule 13 (sentencias -> sentwhile .)
    IF              reduce using rule 13 (sentencias -> sentwhile .)
    ECHO            reduce using rule 13 (sentencias -> sentwhile .)
    FUNCTION        reduce using rule 13 (sentencias -> sentwhile .)
    RETURN          reduce using rule 13 (sentencias -> sentwhile .)
    FOR             reduce using rule 13 (sentencias -> sentwhile .)
    WHILE           reduce using rule 13 (sentencias -> sentwhile .)
    DO              reduce using rule 13 (sentencias -> sentwhile .)
    FOREACH         reduce using rule 13 (sentencias -> sentwhile .)
    SWITCH          reduce using rule 13 (sentencias -> sentwhile .)
    DEFINE          reduce using rule 13 (sentencias -> sentwhile .)
    CLASS           reduce using rule 13 (sentencias -> sentwhile .)
    ISSET           reduce using rule 13 (sentencias -> sentwhile .)
    GET_CLASS       reduce using rule 13 (sentencias -> sentwhile .)
    CONST           reduce using rule 13 (sentencias -> sentwhile .)
    REFERENCE       reduce using rule 13 (sentencias -> sentwhile .)
    INTERFACE       reduce using rule 13 (sentencias -> sentwhile .)
    ELABEL          reduce using rule 13 (sentencias -> sentwhile .)
    RKEY            reduce using rule 13 (sentencias -> sentwhile .)
    BREAK           reduce using rule 13 (sentencias -> sentwhile .)


state 15

    (14) sentencias -> sentdowhile .

    ID              reduce using rule 14 (sentencias -> sentdowhile .)
    NFUNCTION       reduce using rule 14 (sentencias -> sentdowhile .)
    IF              reduce using rule 14 (sentencias -> sentdowhile .)
    ECHO            reduce using rule 14 (sentencias -> sentdowhile .)
    FUNCTION        reduce using rule 14 (sentencias -> sentdowhile .)
    RETURN          reduce using rule 14 (sentencias -> sentdowhile .)
    FOR             reduce using rule 14 (sentencias -> sentdowhile .)
    WHILE           reduce using rule 14 (sentencias -> sentdowhile .)
    DO              reduce using rule 14 (sentencias -> sentdowhile .)
    FOREACH         reduce using rule 14 (sentencias -> sentdowhile .)
    SWITCH          reduce using rule 14 (sentencias -> sentdowhile .)
    DEFINE          reduce using rule 14 (sentencias -> sentdowhile .)
    CLASS           reduce using rule 14 (sentencias -> sentdowhile .)
    ISSET           reduce using rule 14 (sentencias -> sentdowhile .)
    GET_CLASS       reduce using rule 14 (sentencias -> sentdowhile .)
    CONST           reduce using rule 14 (sentencias -> sentdowhile .)
    REFERENCE       reduce using rule 14 (sentencias -> sentdowhile .)
    INTERFACE       reduce using rule 14 (sentencias -> sentdowhile .)
    ELABEL          reduce using rule 14 (sentencias -> sentdowhile .)
    RKEY            reduce using rule 14 (sentencias -> sentdowhile .)
    BREAK           reduce using rule 14 (sentencias -> sentdowhile .)


state 16

    (15) sentencias -> sentforeach .

    ID              reduce using rule 15 (sentencias -> sentforeach .)
    NFUNCTION       reduce using rule 15 (sentencias -> sentforeach .)
    IF              reduce using rule 15 (sentencias -> sentforeach .)
    ECHO            reduce using rule 15 (sentencias -> sentforeach .)
    FUNCTION        reduce using rule 15 (sentencias -> sentforeach .)
    RETURN          reduce using rule 15 (sentencias -> sentforeach .)
    FOR             reduce using rule 15 (sentencias -> sentforeach .)
    WHILE           reduce using rule 15 (sentencias -> sentforeach .)
    DO              reduce using rule 15 (sentencias -> sentforeach .)
    FOREACH         reduce using rule 15 (sentencias -> sentforeach .)
    SWITCH          reduce using rule 15 (sentencias -> sentforeach .)
    DEFINE          reduce using rule 15 (sentencias -> sentforeach .)
    CLASS           reduce using rule 15 (sentencias -> sentforeach .)
    ISSET           reduce using rule 15 (sentencias -> sentforeach .)
    GET_CLASS       reduce using rule 15 (sentencias -> sentforeach .)
    CONST           reduce using rule 15 (sentencias -> sentforeach .)
    REFERENCE       reduce using rule 15 (sentencias -> sentforeach .)
    INTERFACE       reduce using rule 15 (sentencias -> sentforeach .)
    ELABEL          reduce using rule 15 (sentencias -> sentforeach .)
    RKEY            reduce using rule 15 (sentencias -> sentforeach .)
    BREAK           reduce using rule 15 (sentencias -> sentforeach .)


state 17

    (16) sentencias -> sentswitch .

    ID              reduce using rule 16 (sentencias -> sentswitch .)
    NFUNCTION       reduce using rule 16 (sentencias -> sentswitch .)
    IF              reduce using rule 16 (sentencias -> sentswitch .)
    ECHO            reduce using rule 16 (sentencias -> sentswitch .)
    FUNCTION        reduce using rule 16 (sentencias -> sentswitch .)
    RETURN          reduce using rule 16 (sentencias -> sentswitch .)
    FOR             reduce using rule 16 (sentencias -> sentswitch .)
    WHILE           reduce using rule 16 (sentencias -> sentswitch .)
    DO              reduce using rule 16 (sentencias -> sentswitch .)
    FOREACH         reduce using rule 16 (sentencias -> sentswitch .)
    SWITCH          reduce using rule 16 (sentencias -> sentswitch .)
    DEFINE          reduce using rule 16 (sentencias -> sentswitch .)
    CLASS           reduce using rule 16 (sentencias -> sentswitch .)
    ISSET           reduce using rule 16 (sentencias -> sentswitch .)
    GET_CLASS       reduce using rule 16 (sentencias -> sentswitch .)
    CONST           reduce using rule 16 (sentencias -> sentswitch .)
    REFERENCE       reduce using rule 16 (sentencias -> sentswitch .)
    INTERFACE       reduce using rule 16 (sentencias -> sentswitch .)
    ELABEL          reduce using rule 16 (sentencias -> sentswitch .)
    RKEY            reduce using rule 16 (sentencias -> sentswitch .)
    BREAK           reduce using rule 16 (sentencias -> sentswitch .)


state 18

    (17) sentencias -> sentconst .

    ID              reduce using rule 17 (sentencias -> sentconst .)
    NFUNCTION       reduce using rule 17 (sentencias -> sentconst .)
    IF              reduce using rule 17 (sentencias -> sentconst .)
    ECHO            reduce using rule 17 (sentencias -> sentconst .)
    FUNCTION        reduce using rule 17 (sentencias -> sentconst .)
    RETURN          reduce using rule 17 (sentencias -> sentconst .)
    FOR             reduce using rule 17 (sentencias -> sentconst .)
    WHILE           reduce using rule 17 (sentencias -> sentconst .)
    DO              reduce using rule 17 (sentencias -> sentconst .)
    FOREACH         reduce using rule 17 (sentencias -> sentconst .)
    SWITCH          reduce using rule 17 (sentencias -> sentconst .)
    DEFINE          reduce using rule 17 (sentencias -> sentconst .)
    CLASS           reduce using rule 17 (sentencias -> sentconst .)
    ISSET           reduce using rule 17 (sentencias -> sentconst .)
    GET_CLASS       reduce using rule 17 (sentencias -> sentconst .)
    CONST           reduce using rule 17 (sentencias -> sentconst .)
    REFERENCE       reduce using rule 17 (sentencias -> sentconst .)
    INTERFACE       reduce using rule 17 (sentencias -> sentconst .)
    ELABEL          reduce using rule 17 (sentencias -> sentconst .)
    RKEY            reduce using rule 17 (sentencias -> sentconst .)
    BREAK           reduce using rule 17 (sentencias -> sentconst .)


state 19

    (18) sentencias -> sentclass .

    ID              reduce using rule 18 (sentencias -> sentclass .)
    NFUNCTION       reduce using rule 18 (sentencias -> sentclass .)
    IF              reduce using rule 18 (sentencias -> sentclass .)
    ECHO            reduce using rule 18 (sentencias -> sentclass .)
    FUNCTION        reduce using rule 18 (sentencias -> sentclass .)
    RETURN          reduce using rule 18 (sentencias -> sentclass .)
    FOR             reduce using rule 18 (sentencias -> sentclass .)
    WHILE           reduce using rule 18 (sentencias -> sentclass .)
    DO              reduce using rule 18 (sentencias -> sentclass .)
    FOREACH         reduce using rule 18 (sentencias -> sentclass .)
    SWITCH          reduce using rule 18 (sentencias -> sentclass .)
    DEFINE          reduce using rule 18 (sentencias -> sentclass .)
    CLASS           reduce using rule 18 (sentencias -> sentclass .)
    ISSET           reduce using rule 18 (sentencias -> sentclass .)
    GET_CLASS       reduce using rule 18 (sentencias -> sentclass .)
    CONST           reduce using rule 18 (sentencias -> sentclass .)
    REFERENCE       reduce using rule 18 (sentencias -> sentclass .)
    INTERFACE       reduce using rule 18 (sentencias -> sentclass .)
    ELABEL          reduce using rule 18 (sentencias -> sentclass .)
    RKEY            reduce using rule 18 (sentencias -> sentclass .)
    BREAK           reduce using rule 18 (sentencias -> sentclass .)


state 20

    (19) sentencias -> met_clases .
    (170) sentfunc -> met_clases .
    (45) var_declaration -> met_clases .

  ! reduce/reduce conflict for ID resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for NFUNCTION resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for IF resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for ECHO resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for DO resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for FOREACH resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for SWITCH resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for DEFINE resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for CLASS resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for ISSET resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for GET_CLASS resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for CONST resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for REFERENCE resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for ELABEL resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for RKEY resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for BREAK resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for ID resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for NFUNCTION resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for IF resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for ECHO resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for DO resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for FOREACH resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for SWITCH resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for DEFINE resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for CLASS resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for ISSET resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for GET_CLASS resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for CONST resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for REFERENCE resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for ELABEL resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for RKEY resolved using rule 19 (sentencias -> met_clases .)
  ! reduce/reduce conflict for BREAK resolved using rule 19 (sentencias -> met_clases .)
    ID              reduce using rule 19 (sentencias -> met_clases .)
    NFUNCTION       reduce using rule 19 (sentencias -> met_clases .)
    IF              reduce using rule 19 (sentencias -> met_clases .)
    ECHO            reduce using rule 19 (sentencias -> met_clases .)
    FUNCTION        reduce using rule 19 (sentencias -> met_clases .)
    RETURN          reduce using rule 19 (sentencias -> met_clases .)
    FOR             reduce using rule 19 (sentencias -> met_clases .)
    WHILE           reduce using rule 19 (sentencias -> met_clases .)
    DO              reduce using rule 19 (sentencias -> met_clases .)
    FOREACH         reduce using rule 19 (sentencias -> met_clases .)
    SWITCH          reduce using rule 19 (sentencias -> met_clases .)
    DEFINE          reduce using rule 19 (sentencias -> met_clases .)
    CLASS           reduce using rule 19 (sentencias -> met_clases .)
    ISSET           reduce using rule 19 (sentencias -> met_clases .)
    GET_CLASS       reduce using rule 19 (sentencias -> met_clases .)
    CONST           reduce using rule 19 (sentencias -> met_clases .)
    REFERENCE       reduce using rule 19 (sentencias -> met_clases .)
    INTERFACE       reduce using rule 19 (sentencias -> met_clases .)
    ELABEL          reduce using rule 19 (sentencias -> met_clases .)
    RKEY            reduce using rule 19 (sentencias -> met_clases .)
    BREAK           reduce using rule 19 (sentencias -> met_clases .)

  ! ID              [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! NFUNCTION       [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! IF              [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! ECHO            [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! FUNCTION        [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! RETURN          [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! FOR             [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! WHILE           [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! DO              [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! FOREACH         [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! SWITCH          [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! DEFINE          [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! CLASS           [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! ISSET           [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! GET_CLASS       [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! CONST           [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! REFERENCE       [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! INTERFACE       [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! ELABEL          [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! RKEY            [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! BREAK           [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! ID              [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! NFUNCTION       [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! IF              [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! ECHO            [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! FUNCTION        [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! RETURN          [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! FOR             [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! WHILE           [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! DO              [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! FOREACH         [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! SWITCH          [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! DEFINE          [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! CLASS           [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! ISSET           [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! GET_CLASS       [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! CONST           [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! REFERENCE       [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! INTERFACE       [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! ELABEL          [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! RKEY            [ reduce using rule 45 (var_declaration -> met_clases .) ]
  ! BREAK           [ reduce using rule 45 (var_declaration -> met_clases .) ]


state 21

    (20) sentencias -> var_declaration .

    ID              reduce using rule 20 (sentencias -> var_declaration .)
    NFUNCTION       reduce using rule 20 (sentencias -> var_declaration .)
    IF              reduce using rule 20 (sentencias -> var_declaration .)
    ECHO            reduce using rule 20 (sentencias -> var_declaration .)
    FUNCTION        reduce using rule 20 (sentencias -> var_declaration .)
    RETURN          reduce using rule 20 (sentencias -> var_declaration .)
    FOR             reduce using rule 20 (sentencias -> var_declaration .)
    WHILE           reduce using rule 20 (sentencias -> var_declaration .)
    DO              reduce using rule 20 (sentencias -> var_declaration .)
    FOREACH         reduce using rule 20 (sentencias -> var_declaration .)
    SWITCH          reduce using rule 20 (sentencias -> var_declaration .)
    DEFINE          reduce using rule 20 (sentencias -> var_declaration .)
    CLASS           reduce using rule 20 (sentencias -> var_declaration .)
    ISSET           reduce using rule 20 (sentencias -> var_declaration .)
    GET_CLASS       reduce using rule 20 (sentencias -> var_declaration .)
    CONST           reduce using rule 20 (sentencias -> var_declaration .)
    REFERENCE       reduce using rule 20 (sentencias -> var_declaration .)
    INTERFACE       reduce using rule 20 (sentencias -> var_declaration .)
    ELABEL          reduce using rule 20 (sentencias -> var_declaration .)
    RKEY            reduce using rule 20 (sentencias -> var_declaration .)
    BREAK           reduce using rule 20 (sentencias -> var_declaration .)


state 22

    (21) sentencias -> sentinterface .

    ID              reduce using rule 21 (sentencias -> sentinterface .)
    NFUNCTION       reduce using rule 21 (sentencias -> sentinterface .)
    IF              reduce using rule 21 (sentencias -> sentinterface .)
    ECHO            reduce using rule 21 (sentencias -> sentinterface .)
    FUNCTION        reduce using rule 21 (sentencias -> sentinterface .)
    RETURN          reduce using rule 21 (sentencias -> sentinterface .)
    FOR             reduce using rule 21 (sentencias -> sentinterface .)
    WHILE           reduce using rule 21 (sentencias -> sentinterface .)
    DO              reduce using rule 21 (sentencias -> sentinterface .)
    FOREACH         reduce using rule 21 (sentencias -> sentinterface .)
    SWITCH          reduce using rule 21 (sentencias -> sentinterface .)
    DEFINE          reduce using rule 21 (sentencias -> sentinterface .)
    CLASS           reduce using rule 21 (sentencias -> sentinterface .)
    ISSET           reduce using rule 21 (sentencias -> sentinterface .)
    GET_CLASS       reduce using rule 21 (sentencias -> sentinterface .)
    CONST           reduce using rule 21 (sentencias -> sentinterface .)
    REFERENCE       reduce using rule 21 (sentencias -> sentinterface .)
    INTERFACE       reduce using rule 21 (sentencias -> sentinterface .)
    ELABEL          reduce using rule 21 (sentencias -> sentinterface .)
    RKEY            reduce using rule 21 (sentencias -> sentinterface .)
    BREAK           reduce using rule 21 (sentencias -> sentinterface .)


state 23

    (106) sentassign -> ID . EQUAL exp SEMICOLON
    (107) sentassign -> ID . PLUS PLUS SEMICOLON
    (108) sentassign -> ID . EQUAL declaracion_array
    (109) sentassign -> ID . MINUS MINUS SEMICOLON
    (173) call_function -> ID . LPARENTHESIS arg RPARENTHESIS
    (70) met_clases -> ID . DOUBLE_COLON call_function SEMICOLON
    (72) met_clases -> ID . EQUAL NEW call_function SEMICOLON
    (73) met_clases -> ID . CMETHOD call_function SEMICOLON
    (74) met_clases -> ID . CMETHOD NFUNCTION
    (75) met_clases -> ID . CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> ID . CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> ID . CMETHOD PRIVATE SEMICOLON
    (23) var_declaration -> ID . SEMICOLON var_declaration
    (24) var_declaration -> ID . SEMICOLON
    (25) var_declaration -> ID . EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> ID . EQUAL INTEGER SEMICOLON
    (27) var_declaration -> ID . EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> ID . EQUAL FLOAT SEMICOLON
    (29) var_declaration -> ID . EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> ID . EQUAL STRING SEMICOLON
    (31) var_declaration -> ID . EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> ID . EQUAL bool SEMICOLON
    (33) var_declaration -> ID . EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> ID . EQUAL ID SEMICOLON
    (35) var_declaration -> ID . EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> ID . EQUAL exp SEMICOLON
    (37) var_declaration -> ID . EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> ID . EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> ID . EQUAL declaracion_array var_declaration
    (40) var_declaration -> ID . EQUAL declaracion_array
    (43) var_declaration -> ID . EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> ID . EQUAL call_function SEMICOLON

    EQUAL           shift and go to state 47
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    LPARENTHESIS    shift and go to state 51
    DOUBLE_COLON    shift and go to state 52
    CMETHOD         shift and go to state 53
    SEMICOLON       shift and go to state 48


state 24

    (171) call_function -> NFUNCTION .
    (172) call_function -> NFUNCTION . LPARENTHESIS arg RPARENTHESIS
    (69) met_clases -> NFUNCTION . DOUBLE_COLON call_function SEMICOLON

    SEMICOLON       reduce using rule 171 (call_function -> NFUNCTION .)
    LPARENTHESIS    shift and go to state 54
    DOUBLE_COLON    shift and go to state 55


state 25

    (100) sentif -> IF . genif auxsentif
    (104) genif -> . LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (105) genif -> . LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY

    LPARENTHESIS    shift and go to state 57

    genif                          shift and go to state 56

state 26

    (96) sentecho -> ECHO . typevar SEMICOLON
    (97) sentecho -> ECHO . exp SEMICOLON
    (98) sentecho -> ECHO . cond SEMICOLON
    (99) sentecho -> ECHO . met_clases
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (116) exp -> . expsimple opcomparacion expsimple
    (117) exp -> . LPARENTHESIS expsimple opcomparacion expsimple RPARENTHESIS
    (118) exp -> . expsimple
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (128) term -> . term opmult factor
    (129) term -> . factor
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    STRING          shift and go to state 62
    INTEGER         shift and go to state 63
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 66
    LPARENTHESIS    shift and go to state 68
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 71
    ID              shift and go to state 70
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73
    IF              reduce using rule 81 (met_clases -> .)
    ECHO            reduce using rule 81 (met_clases -> .)
    RETURN          reduce using rule 81 (met_clases -> .)
    FOR             reduce using rule 81 (met_clases -> .)
    WHILE           reduce using rule 81 (met_clases -> .)
    DO              reduce using rule 81 (met_clases -> .)
    FOREACH         reduce using rule 81 (met_clases -> .)
    SWITCH          reduce using rule 81 (met_clases -> .)
    DEFINE          reduce using rule 81 (met_clases -> .)
    CLASS           reduce using rule 81 (met_clases -> .)
    REFERENCE       reduce using rule 81 (met_clases -> .)
    INTERFACE       reduce using rule 81 (met_clases -> .)
    ELABEL          reduce using rule 81 (met_clases -> .)
    RKEY            reduce using rule 81 (met_clases -> .)
    BREAK           reduce using rule 81 (met_clases -> .)
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77

  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    typevar                        shift and go to state 58
    exp                            shift and go to state 59
    cond                           shift and go to state 60
    met_clases                     shift and go to state 61
    expsimple                      shift and go to state 67
    type                           shift and go to state 69
    call_function                  shift and go to state 72
    term                           shift and go to state 74
    var_declaration_gen            shift and go to state 75
    factor                         shift and go to state 76

state 27

    (169) sentfunc -> FUNCTION . NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (78) met_clases -> FUNCTION . CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> FUNCTION . DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> FUNCTION . NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY

    NFUNCTION       shift and go to state 79
    CONSTRUCTOR     shift and go to state 80
    DESTRUCTOR      shift and go to state 81


state 28

    (91) sentreturn -> RETURN . type SEMICOLON
    (92) sentreturn -> RETURN . cond SEMICOLON
    (93) sentreturn -> RETURN . var_declaration
    (94) sentreturn -> RETURN . expsimple SEMICOLON
    (95) sentreturn -> RETURN . SEMICOLON
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
    SEMICOLON       shift and go to state 83
    LPARENTHESIS    shift and go to state 88
    ID              shift and go to state 89
    REFERENCE       shift and go to state 39
    STRING          shift and go to state 62
    INTEGER         shift and go to state 63
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 66
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 71
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73
    IF              reduce using rule 81 (met_clases -> .)
    ECHO            reduce using rule 81 (met_clases -> .)
    RETURN          reduce using rule 81 (met_clases -> .)
    FOR             reduce using rule 81 (met_clases -> .)
    WHILE           reduce using rule 81 (met_clases -> .)
    DO              reduce using rule 81 (met_clases -> .)
    FOREACH         reduce using rule 81 (met_clases -> .)
    SWITCH          reduce using rule 81 (met_clases -> .)
    DEFINE          reduce using rule 81 (met_clases -> .)
    CLASS           reduce using rule 81 (met_clases -> .)
    INTERFACE       reduce using rule 81 (met_clases -> .)
    ELABEL          reduce using rule 81 (met_clases -> .)
    RKEY            reduce using rule 81 (met_clases -> .)
    BREAK           reduce using rule 81 (met_clases -> .)

  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]

    type                           shift and go to state 82
    cond                           shift and go to state 84
    var_declaration                shift and go to state 85
    expsimple                      shift and go to state 86
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75
    call_function                  shift and go to state 72
    met_clases                     shift and go to state 90
    term                           shift and go to state 74
    factor                         shift and go to state 76

state 29

    (174) sentfor -> FOR . LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> FOR . LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> FOR . LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY

    LPARENTHESIS    shift and go to state 91


state 30

    (177) sentwhile -> WHILE . LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY

    LPARENTHESIS    shift and go to state 92


state 31

    (178) sentdowhile -> DO . LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON

    LKEY            shift and go to state 93


state 32

    (179) sentforeach -> FOREACH . LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> FOREACH . LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> FOREACH . LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> FOREACH . LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    LPARENTHESIS    shift and go to state 94


state 33

    (183) sentswitch -> SWITCH . LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY

    LPARENTHESIS    shift and go to state 95


state 34

    (82) sentconst -> DEFINE . LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> DEFINE . LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 96


state 35

    (46) sentclass -> CLASS . NFUNCTION cuerpoclase
    (47) sentclass -> CLASS . NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> CLASS . NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase

    NFUNCTION       shift and go to state 97


state 36

    (67) met_clases -> ISSET . LPARENTHESIS ID RPARENTHESIS

    LPARENTHESIS    shift and go to state 98


state 37

    (68) met_clases -> GET_CLASS . LPARENTHESIS ID RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 99


state 38

    (71) met_clases -> CONST . STRING EQUAL typevar SEMICOLON

    STRING          shift and go to state 100


state 39

    (41) var_declaration -> REFERENCE . ID SEMICOLON var_declaration
    (42) var_declaration -> REFERENCE . ID SEMICOLON

    ID              shift and go to state 101


state 40

    (49) sentinterface -> INTERFACE . NFUNCTION LKEY cuerpo_interface RKEY

    NFUNCTION       shift and go to state 102


state 41

    (1) program -> SLABEL import declaracion_sentencias . ELABEL

    ELABEL          shift and go to state 103


state 42

    (2) program -> SLABEL import ELABEL .

    $end            reduce using rule 2 (program -> SLABEL import ELABEL .)


state 43

    (3) program -> SLABEL declaracion_sentencias ELABEL .

    $end            reduce using rule 3 (program -> SLABEL declaracion_sentencias ELABEL .)


state 44

    (188) import -> INCLUDE STRING . SEMICOLON

    SEMICOLON       shift and go to state 104


state 45

    (4) declaracion_sentencias -> sentencias declaracion_sentencias .

    ELABEL          reduce using rule 4 (declaracion_sentencias -> sentencias declaracion_sentencias .)
    RKEY            reduce using rule 4 (declaracion_sentencias -> sentencias declaracion_sentencias .)
    BREAK           reduce using rule 4 (declaracion_sentencias -> sentencias declaracion_sentencias .)


state 46

    (7) sentencias -> call_function SEMICOLON .

    ID              reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    NFUNCTION       reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    IF              reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    ECHO            reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    FUNCTION        reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    RETURN          reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    FOR             reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    WHILE           reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    DO              reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    FOREACH         reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    SWITCH          reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    DEFINE          reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    CLASS           reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    ISSET           reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    GET_CLASS       reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    CONST           reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    REFERENCE       reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    INTERFACE       reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    ELABEL          reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    RKEY            reduce using rule 7 (sentencias -> call_function SEMICOLON .)
    BREAK           reduce using rule 7 (sentencias -> call_function SEMICOLON .)


state 47

    (106) sentassign -> ID EQUAL . exp SEMICOLON
    (108) sentassign -> ID EQUAL . declaracion_array
    (72) met_clases -> ID EQUAL . NEW call_function SEMICOLON
    (25) var_declaration -> ID EQUAL . INTEGER SEMICOLON var_declaration
    (26) var_declaration -> ID EQUAL . INTEGER SEMICOLON
    (27) var_declaration -> ID EQUAL . FLOAT SEMICOLON var_declaration
    (28) var_declaration -> ID EQUAL . FLOAT SEMICOLON
    (29) var_declaration -> ID EQUAL . STRING SEMICOLON var_declaration
    (30) var_declaration -> ID EQUAL . STRING SEMICOLON
    (31) var_declaration -> ID EQUAL . bool SEMICOLON var_declaration
    (32) var_declaration -> ID EQUAL . bool SEMICOLON
    (33) var_declaration -> ID EQUAL . ID SEMICOLON var_declaration
    (34) var_declaration -> ID EQUAL . ID SEMICOLON
    (35) var_declaration -> ID EQUAL . exp SEMICOLON var_declaration
    (36) var_declaration -> ID EQUAL . exp SEMICOLON
    (37) var_declaration -> ID EQUAL . NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> ID EQUAL . NEW call_function SEMICOLON
    (39) var_declaration -> ID EQUAL . declaracion_array var_declaration
    (40) var_declaration -> ID EQUAL . declaracion_array
    (43) var_declaration -> ID EQUAL . call_function SEMICOLON var_declaration
    (44) var_declaration -> ID EQUAL . call_function SEMICOLON
    (116) exp -> . expsimple opcomparacion expsimple
    (117) exp -> . LPARENTHESIS expsimple opcomparacion expsimple RPARENTHESIS
    (118) exp -> . expsimple
    (84) declaracion_array -> . ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON
    (85) declaracion_array -> . ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS
    (110) bool -> . TRUE
    (111) bool -> . FALSE
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS

    NEW             shift and go to state 108
    INTEGER         shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 105
    LPARENTHESIS    shift and go to state 114
    ARRAY           shift and go to state 115
    TRUE            shift and go to state 116
    FALSE           shift and go to state 117
    NFUNCTION       shift and go to state 118

    exp                            shift and go to state 106
    declaracion_array              shift and go to state 107
    call_function                  shift and go to state 109
    bool                           shift and go to state 113
    expsimple                      shift and go to state 67
    term                           shift and go to state 74
    factor                         shift and go to state 76

state 48

    (23) var_declaration -> ID SEMICOLON . var_declaration
    (24) var_declaration -> ID SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 24 (var_declaration -> ID SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 24 (var_declaration -> ID SEMICOLON .)
    IF              reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    ECHO            reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    RETURN          reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    FOR             reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    WHILE           reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    DO              reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    FOREACH         reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    SWITCH          reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    DEFINE          reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    CLASS           reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    INTERFACE       reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    ELABEL          reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    RKEY            reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    BREAK           reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    PUBLIC          reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    PRIVATE         reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    PROTECTED       reduce using rule 24 (var_declaration -> ID SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 24 (var_declaration -> ID SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 24 (var_declaration -> ID SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 24 (var_declaration -> ID SEMICOLON .) ]
  ! ISSET           [ reduce using rule 24 (var_declaration -> ID SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 24 (var_declaration -> ID SEMICOLON .) ]
  ! CONST           [ reduce using rule 24 (var_declaration -> ID SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 24 (var_declaration -> ID SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 120
    met_clases                     shift and go to state 90

state 49

    (107) sentassign -> ID PLUS . PLUS SEMICOLON

    PLUS            shift and go to state 122


state 50

    (109) sentassign -> ID MINUS . MINUS SEMICOLON

    MINUS           shift and go to state 123


state 51

    (173) call_function -> ID LPARENTHESIS . arg RPARENTHESIS
    (159) arg -> . var_declaration_gen
    (160) arg -> . type
    (161) arg -> . type COMMA arg
    (162) arg -> . STRING
    (163) arg -> . var_declaration_gen COMMA arg
    (164) arg -> . STRING COMMA arg
    (165) arg -> .
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT

    STRING          shift and go to state 128
    RPARENTHESIS    reduce using rule 165 (arg -> .)
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131

    arg                            shift and go to state 125
    var_declaration_gen            shift and go to state 126
    type                           shift and go to state 127
    typevar                        shift and go to state 129

state 52

    (70) met_clases -> ID DOUBLE_COLON . call_function SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    NFUNCTION       shift and go to state 118
    ID              shift and go to state 132

    call_function                  shift and go to state 133

state 53

    (73) met_clases -> ID CMETHOD . call_function SEMICOLON
    (74) met_clases -> ID CMETHOD . NFUNCTION
    (75) met_clases -> ID CMETHOD . PUBLIC SEMICOLON
    (76) met_clases -> ID CMETHOD . PROTECTED SEMICOLON
    (77) met_clases -> ID CMETHOD . PRIVATE SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    NFUNCTION       shift and go to state 135
    PUBLIC          shift and go to state 136
    PROTECTED       shift and go to state 137
    PRIVATE         shift and go to state 138
    ID              shift and go to state 132

    call_function                  shift and go to state 134

state 54

    (172) call_function -> NFUNCTION LPARENTHESIS . arg RPARENTHESIS
    (159) arg -> . var_declaration_gen
    (160) arg -> . type
    (161) arg -> . type COMMA arg
    (162) arg -> . STRING
    (163) arg -> . var_declaration_gen COMMA arg
    (164) arg -> . STRING COMMA arg
    (165) arg -> .
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT

    STRING          shift and go to state 128
    RPARENTHESIS    reduce using rule 165 (arg -> .)
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131

    arg                            shift and go to state 139
    var_declaration_gen            shift and go to state 126
    type                           shift and go to state 127
    typevar                        shift and go to state 129

state 55

    (69) met_clases -> NFUNCTION DOUBLE_COLON . call_function SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    NFUNCTION       shift and go to state 118
    ID              shift and go to state 132

    call_function                  shift and go to state 140

state 56

    (100) sentif -> IF genif . auxsentif
    (101) auxsentif -> . ELSE IF genif auxsentif
    (102) auxsentif -> . ELSE LKEY declaracion_sentencias RKEY
    (103) auxsentif -> . empty
    (189) empty -> .

    ELSE            shift and go to state 142
    ID              reduce using rule 189 (empty -> .)
    NFUNCTION       reduce using rule 189 (empty -> .)
    IF              reduce using rule 189 (empty -> .)
    ECHO            reduce using rule 189 (empty -> .)
    FUNCTION        reduce using rule 189 (empty -> .)
    RETURN          reduce using rule 189 (empty -> .)
    FOR             reduce using rule 189 (empty -> .)
    WHILE           reduce using rule 189 (empty -> .)
    DO              reduce using rule 189 (empty -> .)
    FOREACH         reduce using rule 189 (empty -> .)
    SWITCH          reduce using rule 189 (empty -> .)
    DEFINE          reduce using rule 189 (empty -> .)
    CLASS           reduce using rule 189 (empty -> .)
    ISSET           reduce using rule 189 (empty -> .)
    GET_CLASS       reduce using rule 189 (empty -> .)
    CONST           reduce using rule 189 (empty -> .)
    REFERENCE       reduce using rule 189 (empty -> .)
    INTERFACE       reduce using rule 189 (empty -> .)
    ELABEL          reduce using rule 189 (empty -> .)
    RKEY            reduce using rule 189 (empty -> .)
    BREAK           reduce using rule 189 (empty -> .)

    auxsentif                      shift and go to state 141
    empty                          shift and go to state 143

state 57

    (104) genif -> LPARENTHESIS . cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (105) genif -> LPARENTHESIS . met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar

    LPARENTHESIS    shift and go to state 144
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    ID              shift and go to state 147
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73
    RPARENTHESIS    reduce using rule 81 (met_clases -> .)
    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77

    cond                           shift and go to state 145
    met_clases                     shift and go to state 146
    type                           shift and go to state 69
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75

state 58

    (96) sentecho -> ECHO typevar . SEMICOLON
    (151) type -> typevar .
    (158) var_declaration_gen -> typevar .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for GREATER resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for GEQUAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for LESS resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for LEQUAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for AND resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for OR resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for XOR resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for NOT resolved using rule 151 (type -> typevar .)
    SEMICOLON       shift and go to state 148
    EQUALEQUAL      reduce using rule 151 (type -> typevar .)
    NEQUAL          reduce using rule 151 (type -> typevar .)
    IDENTICAL       reduce using rule 151 (type -> typevar .)
    GREATER         reduce using rule 151 (type -> typevar .)
    GEQUAL          reduce using rule 151 (type -> typevar .)
    LESS            reduce using rule 151 (type -> typevar .)
    LEQUAL          reduce using rule 151 (type -> typevar .)
    AND             reduce using rule 151 (type -> typevar .)
    OR              reduce using rule 151 (type -> typevar .)
    XOR             reduce using rule 151 (type -> typevar .)
    NOT             reduce using rule 151 (type -> typevar .)

  ! SEMICOLON       [ reduce using rule 151 (type -> typevar .) ]
  ! SEMICOLON       [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! EQUALEQUAL      [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! NEQUAL          [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! IDENTICAL       [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! GREATER         [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! GEQUAL          [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! LESS            [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! LEQUAL          [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! AND             [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! OR              [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! XOR             [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! NOT             [ reduce using rule 158 (var_declaration_gen -> typevar .) ]


state 59

    (97) sentecho -> ECHO exp . SEMICOLON

    SEMICOLON       shift and go to state 149


state 60

    (98) sentecho -> ECHO cond . SEMICOLON
    (147) cond -> cond . opcomparacion cond
    (148) cond -> cond . oplogicos cond
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (112) oplogicos -> . AND
    (113) oplogicos -> . OR
    (114) oplogicos -> . XOR
    (115) oplogicos -> . NOT

    SEMICOLON       shift and go to state 150
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    XOR             shift and go to state 162
    NOT             shift and go to state 163

    opcomparacion                  shift and go to state 151
    oplogicos                      shift and go to state 152

state 61

    (99) sentecho -> ECHO met_clases .

    ID              reduce using rule 99 (sentecho -> ECHO met_clases .)
    NFUNCTION       reduce using rule 99 (sentecho -> ECHO met_clases .)
    IF              reduce using rule 99 (sentecho -> ECHO met_clases .)
    ECHO            reduce using rule 99 (sentecho -> ECHO met_clases .)
    FUNCTION        reduce using rule 99 (sentecho -> ECHO met_clases .)
    RETURN          reduce using rule 99 (sentecho -> ECHO met_clases .)
    FOR             reduce using rule 99 (sentecho -> ECHO met_clases .)
    WHILE           reduce using rule 99 (sentecho -> ECHO met_clases .)
    DO              reduce using rule 99 (sentecho -> ECHO met_clases .)
    FOREACH         reduce using rule 99 (sentecho -> ECHO met_clases .)
    SWITCH          reduce using rule 99 (sentecho -> ECHO met_clases .)
    DEFINE          reduce using rule 99 (sentecho -> ECHO met_clases .)
    CLASS           reduce using rule 99 (sentecho -> ECHO met_clases .)
    ISSET           reduce using rule 99 (sentecho -> ECHO met_clases .)
    GET_CLASS       reduce using rule 99 (sentecho -> ECHO met_clases .)
    CONST           reduce using rule 99 (sentecho -> ECHO met_clases .)
    REFERENCE       reduce using rule 99 (sentecho -> ECHO met_clases .)
    INTERFACE       reduce using rule 99 (sentecho -> ECHO met_clases .)
    ELABEL          reduce using rule 99 (sentecho -> ECHO met_clases .)
    RKEY            reduce using rule 99 (sentecho -> ECHO met_clases .)
    BREAK           reduce using rule 99 (sentecho -> ECHO met_clases .)


state 62

    (135) typevar -> STRING .

    SEMICOLON       reduce using rule 135 (typevar -> STRING .)
    EQUALEQUAL      reduce using rule 135 (typevar -> STRING .)
    NEQUAL          reduce using rule 135 (typevar -> STRING .)
    IDENTICAL       reduce using rule 135 (typevar -> STRING .)
    GREATER         reduce using rule 135 (typevar -> STRING .)
    GEQUAL          reduce using rule 135 (typevar -> STRING .)
    LESS            reduce using rule 135 (typevar -> STRING .)
    LEQUAL          reduce using rule 135 (typevar -> STRING .)
    AND             reduce using rule 135 (typevar -> STRING .)
    OR              reduce using rule 135 (typevar -> STRING .)
    XOR             reduce using rule 135 (typevar -> STRING .)
    NOT             reduce using rule 135 (typevar -> STRING .)
    RPARENTHESIS    reduce using rule 135 (typevar -> STRING .)
    COMMA           reduce using rule 135 (typevar -> STRING .)
    EQUALG          reduce using rule 135 (typevar -> STRING .)


state 63

    (136) typevar -> INTEGER .
    (130) factor -> INTEGER .

  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 130 (factor -> INTEGER .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 130 (factor -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 130 (factor -> INTEGER .)
  ! reduce/reduce conflict for GREATER resolved using rule 130 (factor -> INTEGER .)
  ! reduce/reduce conflict for GEQUAL resolved using rule 130 (factor -> INTEGER .)
  ! reduce/reduce conflict for LESS resolved using rule 130 (factor -> INTEGER .)
  ! reduce/reduce conflict for LEQUAL resolved using rule 130 (factor -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 130 (factor -> INTEGER .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 130 (factor -> INTEGER .)
    AND             reduce using rule 136 (typevar -> INTEGER .)
    OR              reduce using rule 136 (typevar -> INTEGER .)
    XOR             reduce using rule 136 (typevar -> INTEGER .)
    NOT             reduce using rule 136 (typevar -> INTEGER .)
    TIMES           reduce using rule 130 (factor -> INTEGER .)
    DIV             reduce using rule 130 (factor -> INTEGER .)
    MODULE          reduce using rule 130 (factor -> INTEGER .)
    EXPONENTIATION  reduce using rule 130 (factor -> INTEGER .)
    EQUALEQUAL      reduce using rule 130 (factor -> INTEGER .)
    NEQUAL          reduce using rule 130 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 130 (factor -> INTEGER .)
    GREATER         reduce using rule 130 (factor -> INTEGER .)
    GEQUAL          reduce using rule 130 (factor -> INTEGER .)
    LESS            reduce using rule 130 (factor -> INTEGER .)
    LEQUAL          reduce using rule 130 (factor -> INTEGER .)
    PLUS            reduce using rule 130 (factor -> INTEGER .)
    MINUS           reduce using rule 130 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 130 (factor -> INTEGER .)
    RPARENTHESIS    reduce using rule 130 (factor -> INTEGER .)

  ! SEMICOLON       [ reduce using rule 136 (typevar -> INTEGER .) ]
  ! EQUALEQUAL      [ reduce using rule 136 (typevar -> INTEGER .) ]
  ! NEQUAL          [ reduce using rule 136 (typevar -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 136 (typevar -> INTEGER .) ]
  ! GREATER         [ reduce using rule 136 (typevar -> INTEGER .) ]
  ! GEQUAL          [ reduce using rule 136 (typevar -> INTEGER .) ]
  ! LESS            [ reduce using rule 136 (typevar -> INTEGER .) ]
  ! LEQUAL          [ reduce using rule 136 (typevar -> INTEGER .) ]
  ! RPARENTHESIS    [ reduce using rule 136 (typevar -> INTEGER .) ]


state 64

    (137) typevar -> TRUE .

    SEMICOLON       reduce using rule 137 (typevar -> TRUE .)
    EQUALEQUAL      reduce using rule 137 (typevar -> TRUE .)
    NEQUAL          reduce using rule 137 (typevar -> TRUE .)
    IDENTICAL       reduce using rule 137 (typevar -> TRUE .)
    GREATER         reduce using rule 137 (typevar -> TRUE .)
    GEQUAL          reduce using rule 137 (typevar -> TRUE .)
    LESS            reduce using rule 137 (typevar -> TRUE .)
    LEQUAL          reduce using rule 137 (typevar -> TRUE .)
    AND             reduce using rule 137 (typevar -> TRUE .)
    OR              reduce using rule 137 (typevar -> TRUE .)
    XOR             reduce using rule 137 (typevar -> TRUE .)
    NOT             reduce using rule 137 (typevar -> TRUE .)
    COMMA           reduce using rule 137 (typevar -> TRUE .)
    RPARENTHESIS    reduce using rule 137 (typevar -> TRUE .)
    EQUALG          reduce using rule 137 (typevar -> TRUE .)


state 65

    (138) typevar -> FALSE .

    SEMICOLON       reduce using rule 138 (typevar -> FALSE .)
    EQUALEQUAL      reduce using rule 138 (typevar -> FALSE .)
    NEQUAL          reduce using rule 138 (typevar -> FALSE .)
    IDENTICAL       reduce using rule 138 (typevar -> FALSE .)
    GREATER         reduce using rule 138 (typevar -> FALSE .)
    GEQUAL          reduce using rule 138 (typevar -> FALSE .)
    LESS            reduce using rule 138 (typevar -> FALSE .)
    LEQUAL          reduce using rule 138 (typevar -> FALSE .)
    AND             reduce using rule 138 (typevar -> FALSE .)
    OR              reduce using rule 138 (typevar -> FALSE .)
    XOR             reduce using rule 138 (typevar -> FALSE .)
    NOT             reduce using rule 138 (typevar -> FALSE .)
    COMMA           reduce using rule 138 (typevar -> FALSE .)
    RPARENTHESIS    reduce using rule 138 (typevar -> FALSE .)
    EQUALG          reduce using rule 138 (typevar -> FALSE .)


state 66

    (139) typevar -> FLOAT .
    (131) factor -> FLOAT .

  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 131 (factor -> FLOAT .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 131 (factor -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 131 (factor -> FLOAT .)
  ! reduce/reduce conflict for GREATER resolved using rule 131 (factor -> FLOAT .)
  ! reduce/reduce conflict for GEQUAL resolved using rule 131 (factor -> FLOAT .)
  ! reduce/reduce conflict for LESS resolved using rule 131 (factor -> FLOAT .)
  ! reduce/reduce conflict for LEQUAL resolved using rule 131 (factor -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 131 (factor -> FLOAT .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 131 (factor -> FLOAT .)
    AND             reduce using rule 139 (typevar -> FLOAT .)
    OR              reduce using rule 139 (typevar -> FLOAT .)
    XOR             reduce using rule 139 (typevar -> FLOAT .)
    NOT             reduce using rule 139 (typevar -> FLOAT .)
    TIMES           reduce using rule 131 (factor -> FLOAT .)
    DIV             reduce using rule 131 (factor -> FLOAT .)
    MODULE          reduce using rule 131 (factor -> FLOAT .)
    EXPONENTIATION  reduce using rule 131 (factor -> FLOAT .)
    EQUALEQUAL      reduce using rule 131 (factor -> FLOAT .)
    NEQUAL          reduce using rule 131 (factor -> FLOAT .)
    IDENTICAL       reduce using rule 131 (factor -> FLOAT .)
    GREATER         reduce using rule 131 (factor -> FLOAT .)
    GEQUAL          reduce using rule 131 (factor -> FLOAT .)
    LESS            reduce using rule 131 (factor -> FLOAT .)
    LEQUAL          reduce using rule 131 (factor -> FLOAT .)
    PLUS            reduce using rule 131 (factor -> FLOAT .)
    MINUS           reduce using rule 131 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 131 (factor -> FLOAT .)
    RPARENTHESIS    reduce using rule 131 (factor -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 139 (typevar -> FLOAT .) ]
  ! EQUALEQUAL      [ reduce using rule 139 (typevar -> FLOAT .) ]
  ! NEQUAL          [ reduce using rule 139 (typevar -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 139 (typevar -> FLOAT .) ]
  ! GREATER         [ reduce using rule 139 (typevar -> FLOAT .) ]
  ! GEQUAL          [ reduce using rule 139 (typevar -> FLOAT .) ]
  ! LESS            [ reduce using rule 139 (typevar -> FLOAT .) ]
  ! LEQUAL          [ reduce using rule 139 (typevar -> FLOAT .) ]
  ! RPARENTHESIS    [ reduce using rule 139 (typevar -> FLOAT .) ]


state 67

    (116) exp -> expsimple . opcomparacion expsimple
    (118) exp -> expsimple .
    (126) expsimple -> expsimple . opsuma term
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (140) opsuma -> . PLUS
    (141) opsuma -> . MINUS

    SEMICOLON       reduce using rule 118 (exp -> expsimple .)
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167

    opcomparacion                  shift and go to state 164
    opsuma                         shift and go to state 165

state 68

    (117) exp -> LPARENTHESIS . expsimple opcomparacion expsimple RPARENTHESIS
    (149) cond -> LPARENTHESIS . type RPARENTHESIS
    (150) cond -> LPARENTHESIS . cond RPARENTHESIS
    (134) factor -> LPARENTHESIS . expsimple RPARENTHESIS
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (128) term -> . term opmult factor
    (129) term -> . factor
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    LPARENTHESIS    shift and go to state 88
    STRING          shift and go to state 62
    INTEGER         shift and go to state 63
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 66
    ID              shift and go to state 171
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77
    NFUNCTION       shift and go to state 118

    expsimple                      shift and go to state 168
    type                           shift and go to state 169
    cond                           shift and go to state 170
    term                           shift and go to state 74
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75
    factor                         shift and go to state 76
    call_function                  shift and go to state 72

state 69

    (146) cond -> type .

    SEMICOLON       reduce using rule 146 (cond -> type .)
    EQUALEQUAL      reduce using rule 146 (cond -> type .)
    NEQUAL          reduce using rule 146 (cond -> type .)
    IDENTICAL       reduce using rule 146 (cond -> type .)
    GREATER         reduce using rule 146 (cond -> type .)
    GEQUAL          reduce using rule 146 (cond -> type .)
    LESS            reduce using rule 146 (cond -> type .)
    LEQUAL          reduce using rule 146 (cond -> type .)
    AND             reduce using rule 146 (cond -> type .)
    OR              reduce using rule 146 (cond -> type .)
    XOR             reduce using rule 146 (cond -> type .)
    NOT             reduce using rule 146 (cond -> type .)
    RPARENTHESIS    reduce using rule 146 (cond -> type .)


state 70

    (70) met_clases -> ID . DOUBLE_COLON call_function SEMICOLON
    (72) met_clases -> ID . EQUAL NEW call_function SEMICOLON
    (73) met_clases -> ID . CMETHOD call_function SEMICOLON
    (74) met_clases -> ID . CMETHOD NFUNCTION
    (75) met_clases -> ID . CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> ID . CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> ID . CMETHOD PRIVATE SEMICOLON
    (153) var_declaration_gen -> ID .
    (154) var_declaration_gen -> ID . PLUS PLUS
    (155) var_declaration_gen -> ID . MINUS MINUS
    (132) factor -> ID .
    (173) call_function -> ID . LPARENTHESIS arg RPARENTHESIS

  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for GEQUAL resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for LESS resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for LEQUAL resolved using rule 132 (factor -> ID .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 132 (factor -> ID .)
    DOUBLE_COLON    shift and go to state 52
    EQUAL           shift and go to state 172
    CMETHOD         shift and go to state 53
    AND             reduce using rule 153 (var_declaration_gen -> ID .)
    OR              reduce using rule 153 (var_declaration_gen -> ID .)
    XOR             reduce using rule 153 (var_declaration_gen -> ID .)
    NOT             reduce using rule 153 (var_declaration_gen -> ID .)
    PLUS            shift and go to state 173
    MINUS           shift and go to state 174
    TIMES           reduce using rule 132 (factor -> ID .)
    DIV             reduce using rule 132 (factor -> ID .)
    MODULE          reduce using rule 132 (factor -> ID .)
    EXPONENTIATION  reduce using rule 132 (factor -> ID .)
    EQUALEQUAL      reduce using rule 132 (factor -> ID .)
    NEQUAL          reduce using rule 132 (factor -> ID .)
    IDENTICAL       reduce using rule 132 (factor -> ID .)
    GREATER         reduce using rule 132 (factor -> ID .)
    GEQUAL          reduce using rule 132 (factor -> ID .)
    LESS            reduce using rule 132 (factor -> ID .)
    LEQUAL          reduce using rule 132 (factor -> ID .)
    SEMICOLON       reduce using rule 132 (factor -> ID .)
    LPARENTHESIS    shift and go to state 51

  ! SEMICOLON       [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! EQUALEQUAL      [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! NEQUAL          [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! IDENTICAL       [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! GREATER         [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! GEQUAL          [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! LESS            [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! LEQUAL          [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! PLUS            [ reduce using rule 132 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 132 (factor -> ID .) ]


state 71

    (69) met_clases -> NFUNCTION . DOUBLE_COLON call_function SEMICOLON
    (171) call_function -> NFUNCTION .
    (172) call_function -> NFUNCTION . LPARENTHESIS arg RPARENTHESIS

    DOUBLE_COLON    shift and go to state 55
    TIMES           reduce using rule 171 (call_function -> NFUNCTION .)
    DIV             reduce using rule 171 (call_function -> NFUNCTION .)
    MODULE          reduce using rule 171 (call_function -> NFUNCTION .)
    EXPONENTIATION  reduce using rule 171 (call_function -> NFUNCTION .)
    EQUALEQUAL      reduce using rule 171 (call_function -> NFUNCTION .)
    NEQUAL          reduce using rule 171 (call_function -> NFUNCTION .)
    IDENTICAL       reduce using rule 171 (call_function -> NFUNCTION .)
    GREATER         reduce using rule 171 (call_function -> NFUNCTION .)
    GEQUAL          reduce using rule 171 (call_function -> NFUNCTION .)
    LESS            reduce using rule 171 (call_function -> NFUNCTION .)
    LEQUAL          reduce using rule 171 (call_function -> NFUNCTION .)
    PLUS            reduce using rule 171 (call_function -> NFUNCTION .)
    MINUS           reduce using rule 171 (call_function -> NFUNCTION .)
    SEMICOLON       reduce using rule 171 (call_function -> NFUNCTION .)
    LPARENTHESIS    shift and go to state 54


state 72

    (133) factor -> call_function .

    TIMES           reduce using rule 133 (factor -> call_function .)
    DIV             reduce using rule 133 (factor -> call_function .)
    MODULE          reduce using rule 133 (factor -> call_function .)
    EXPONENTIATION  reduce using rule 133 (factor -> call_function .)
    EQUALEQUAL      reduce using rule 133 (factor -> call_function .)
    NEQUAL          reduce using rule 133 (factor -> call_function .)
    IDENTICAL       reduce using rule 133 (factor -> call_function .)
    GREATER         reduce using rule 133 (factor -> call_function .)
    GEQUAL          reduce using rule 133 (factor -> call_function .)
    LESS            reduce using rule 133 (factor -> call_function .)
    LEQUAL          reduce using rule 133 (factor -> call_function .)
    PLUS            reduce using rule 133 (factor -> call_function .)
    MINUS           reduce using rule 133 (factor -> call_function .)
    SEMICOLON       reduce using rule 133 (factor -> call_function .)
    RPARENTHESIS    reduce using rule 133 (factor -> call_function .)


state 73

    (78) met_clases -> FUNCTION . CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> FUNCTION . DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> FUNCTION . NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY

    CONSTRUCTOR     shift and go to state 80
    DESTRUCTOR      shift and go to state 81
    NFUNCTION       shift and go to state 175


state 74

    (127) expsimple -> term .
    (128) term -> term . opmult factor
    (142) opmult -> . TIMES
    (143) opmult -> . DIV
    (144) opmult -> . MODULE
    (145) opmult -> . EXPONENTIATION

    EQUALEQUAL      reduce using rule 127 (expsimple -> term .)
    NEQUAL          reduce using rule 127 (expsimple -> term .)
    IDENTICAL       reduce using rule 127 (expsimple -> term .)
    GREATER         reduce using rule 127 (expsimple -> term .)
    GEQUAL          reduce using rule 127 (expsimple -> term .)
    LESS            reduce using rule 127 (expsimple -> term .)
    LEQUAL          reduce using rule 127 (expsimple -> term .)
    PLUS            reduce using rule 127 (expsimple -> term .)
    MINUS           reduce using rule 127 (expsimple -> term .)
    SEMICOLON       reduce using rule 127 (expsimple -> term .)
    RPARENTHESIS    reduce using rule 127 (expsimple -> term .)
    TIMES           shift and go to state 177
    DIV             shift and go to state 178
    MODULE          shift and go to state 179
    EXPONENTIATION  shift and go to state 180

    opmult                         shift and go to state 176

state 75

    (152) type -> var_declaration_gen .

    SEMICOLON       reduce using rule 152 (type -> var_declaration_gen .)
    EQUALEQUAL      reduce using rule 152 (type -> var_declaration_gen .)
    NEQUAL          reduce using rule 152 (type -> var_declaration_gen .)
    IDENTICAL       reduce using rule 152 (type -> var_declaration_gen .)
    GREATER         reduce using rule 152 (type -> var_declaration_gen .)
    GEQUAL          reduce using rule 152 (type -> var_declaration_gen .)
    LESS            reduce using rule 152 (type -> var_declaration_gen .)
    LEQUAL          reduce using rule 152 (type -> var_declaration_gen .)
    AND             reduce using rule 152 (type -> var_declaration_gen .)
    OR              reduce using rule 152 (type -> var_declaration_gen .)
    XOR             reduce using rule 152 (type -> var_declaration_gen .)
    NOT             reduce using rule 152 (type -> var_declaration_gen .)
    RPARENTHESIS    reduce using rule 152 (type -> var_declaration_gen .)


state 76

    (129) term -> factor .

    TIMES           reduce using rule 129 (term -> factor .)
    DIV             reduce using rule 129 (term -> factor .)
    MODULE          reduce using rule 129 (term -> factor .)
    EXPONENTIATION  reduce using rule 129 (term -> factor .)
    EQUALEQUAL      reduce using rule 129 (term -> factor .)
    NEQUAL          reduce using rule 129 (term -> factor .)
    IDENTICAL       reduce using rule 129 (term -> factor .)
    GREATER         reduce using rule 129 (term -> factor .)
    GEQUAL          reduce using rule 129 (term -> factor .)
    LESS            reduce using rule 129 (term -> factor .)
    LEQUAL          reduce using rule 129 (term -> factor .)
    PLUS            reduce using rule 129 (term -> factor .)
    MINUS           reduce using rule 129 (term -> factor .)
    SEMICOLON       reduce using rule 129 (term -> factor .)
    RPARENTHESIS    reduce using rule 129 (term -> factor .)


state 77

    (157) var_declaration_gen -> PLUS . PLUS ID

    PLUS            shift and go to state 181


state 78

    (156) var_declaration_gen -> MINUS . MINUS ID

    MINUS           shift and go to state 182


state 79

    (169) sentfunc -> FUNCTION NFUNCTION . LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> FUNCTION NFUNCTION . LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY

    LPARENTHESIS    shift and go to state 183


state 80

    (78) met_clases -> FUNCTION CONSTRUCTOR . LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY

    LPARENTHESIS    shift and go to state 184


state 81

    (79) met_clases -> FUNCTION DESTRUCTOR . LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY

    LPARENTHESIS    shift and go to state 185


state 82

    (91) sentreturn -> RETURN type . SEMICOLON
    (146) cond -> type .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 186
    EQUALEQUAL      reduce using rule 146 (cond -> type .)
    NEQUAL          reduce using rule 146 (cond -> type .)
    IDENTICAL       reduce using rule 146 (cond -> type .)
    GREATER         reduce using rule 146 (cond -> type .)
    GEQUAL          reduce using rule 146 (cond -> type .)
    LESS            reduce using rule 146 (cond -> type .)
    LEQUAL          reduce using rule 146 (cond -> type .)
    AND             reduce using rule 146 (cond -> type .)
    OR              reduce using rule 146 (cond -> type .)
    XOR             reduce using rule 146 (cond -> type .)
    NOT             reduce using rule 146 (cond -> type .)

  ! SEMICOLON       [ reduce using rule 146 (cond -> type .) ]


state 83

    (95) sentreturn -> RETURN SEMICOLON .

    ID              reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    NFUNCTION       reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    IF              reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    ECHO            reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    RETURN          reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    FOR             reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    WHILE           reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    DO              reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    DEFINE          reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    CLASS           reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    ISSET           reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    GET_CLASS       reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    CONST           reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    REFERENCE       reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    INTERFACE       reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    ELABEL          reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    RKEY            reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)
    BREAK           reduce using rule 95 (sentreturn -> RETURN SEMICOLON .)


state 84

    (92) sentreturn -> RETURN cond . SEMICOLON
    (147) cond -> cond . opcomparacion cond
    (148) cond -> cond . oplogicos cond
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (112) oplogicos -> . AND
    (113) oplogicos -> . OR
    (114) oplogicos -> . XOR
    (115) oplogicos -> . NOT

    SEMICOLON       shift and go to state 187
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    XOR             shift and go to state 162
    NOT             shift and go to state 163

    opcomparacion                  shift and go to state 151
    oplogicos                      shift and go to state 152

state 85

    (93) sentreturn -> RETURN var_declaration .

    ID              reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    NFUNCTION       reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    IF              reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    ECHO            reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    FUNCTION        reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    RETURN          reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    FOR             reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    WHILE           reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    DO              reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    FOREACH         reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    SWITCH          reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    DEFINE          reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    CLASS           reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    ISSET           reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    GET_CLASS       reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    CONST           reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    REFERENCE       reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    INTERFACE       reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    ELABEL          reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    RKEY            reduce using rule 93 (sentreturn -> RETURN var_declaration .)
    BREAK           reduce using rule 93 (sentreturn -> RETURN var_declaration .)


state 86

    (94) sentreturn -> RETURN expsimple . SEMICOLON
    (126) expsimple -> expsimple . opsuma term
    (140) opsuma -> . PLUS
    (141) opsuma -> . MINUS

    SEMICOLON       shift and go to state 188
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167

    opsuma                         shift and go to state 165

state 87

    (151) type -> typevar .
    (158) var_declaration_gen -> typevar .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for GREATER resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for GEQUAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for LESS resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for LEQUAL resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for AND resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for OR resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for XOR resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for NOT resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 151 (type -> typevar .)
    SEMICOLON       reduce using rule 151 (type -> typevar .)
    EQUALEQUAL      reduce using rule 151 (type -> typevar .)
    NEQUAL          reduce using rule 151 (type -> typevar .)
    IDENTICAL       reduce using rule 151 (type -> typevar .)
    GREATER         reduce using rule 151 (type -> typevar .)
    GEQUAL          reduce using rule 151 (type -> typevar .)
    LESS            reduce using rule 151 (type -> typevar .)
    LEQUAL          reduce using rule 151 (type -> typevar .)
    AND             reduce using rule 151 (type -> typevar .)
    OR              reduce using rule 151 (type -> typevar .)
    XOR             reduce using rule 151 (type -> typevar .)
    NOT             reduce using rule 151 (type -> typevar .)
    RPARENTHESIS    reduce using rule 151 (type -> typevar .)

  ! SEMICOLON       [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! EQUALEQUAL      [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! NEQUAL          [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! IDENTICAL       [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! GREATER         [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! GEQUAL          [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! LESS            [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! LEQUAL          [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! AND             [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! OR              [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! XOR             [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! NOT             [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! RPARENTHESIS    [ reduce using rule 158 (var_declaration_gen -> typevar .) ]


state 88

    (149) cond -> LPARENTHESIS . type RPARENTHESIS
    (150) cond -> LPARENTHESIS . cond RPARENTHESIS
    (134) factor -> LPARENTHESIS . expsimple RPARENTHESIS
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    LPARENTHESIS    shift and go to state 88
    STRING          shift and go to state 62
    INTEGER         shift and go to state 63
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 66
    ID              shift and go to state 171
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77
    NFUNCTION       shift and go to state 118

    type                           shift and go to state 169
    cond                           shift and go to state 170
    expsimple                      shift and go to state 189
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75
    term                           shift and go to state 74
    factor                         shift and go to state 76
    call_function                  shift and go to state 72

state 89

    (23) var_declaration -> ID . SEMICOLON var_declaration
    (24) var_declaration -> ID . SEMICOLON
    (25) var_declaration -> ID . EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> ID . EQUAL INTEGER SEMICOLON
    (27) var_declaration -> ID . EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> ID . EQUAL FLOAT SEMICOLON
    (29) var_declaration -> ID . EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> ID . EQUAL STRING SEMICOLON
    (31) var_declaration -> ID . EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> ID . EQUAL bool SEMICOLON
    (33) var_declaration -> ID . EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> ID . EQUAL ID SEMICOLON
    (35) var_declaration -> ID . EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> ID . EQUAL exp SEMICOLON
    (37) var_declaration -> ID . EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> ID . EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> ID . EQUAL declaracion_array var_declaration
    (40) var_declaration -> ID . EQUAL declaracion_array
    (43) var_declaration -> ID . EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> ID . EQUAL call_function SEMICOLON
    (153) var_declaration_gen -> ID .
    (154) var_declaration_gen -> ID . PLUS PLUS
    (155) var_declaration_gen -> ID . MINUS MINUS
    (70) met_clases -> ID . DOUBLE_COLON call_function SEMICOLON
    (72) met_clases -> ID . EQUAL NEW call_function SEMICOLON
    (73) met_clases -> ID . CMETHOD call_function SEMICOLON
    (74) met_clases -> ID . CMETHOD NFUNCTION
    (75) met_clases -> ID . CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> ID . CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> ID . CMETHOD PRIVATE SEMICOLON
    (132) factor -> ID .
    (173) call_function -> ID . LPARENTHESIS arg RPARENTHESIS

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       shift and go to state 48
    EQUAL           shift and go to state 190
    EQUALEQUAL      reduce using rule 153 (var_declaration_gen -> ID .)
    NEQUAL          reduce using rule 153 (var_declaration_gen -> ID .)
    IDENTICAL       reduce using rule 153 (var_declaration_gen -> ID .)
    GREATER         reduce using rule 153 (var_declaration_gen -> ID .)
    GEQUAL          reduce using rule 153 (var_declaration_gen -> ID .)
    LESS            reduce using rule 153 (var_declaration_gen -> ID .)
    LEQUAL          reduce using rule 153 (var_declaration_gen -> ID .)
    AND             reduce using rule 153 (var_declaration_gen -> ID .)
    OR              reduce using rule 153 (var_declaration_gen -> ID .)
    XOR             reduce using rule 153 (var_declaration_gen -> ID .)
    NOT             reduce using rule 153 (var_declaration_gen -> ID .)
    PLUS            shift and go to state 173
    MINUS           shift and go to state 174
    DOUBLE_COLON    shift and go to state 52
    CMETHOD         shift and go to state 53
    TIMES           reduce using rule 132 (factor -> ID .)
    DIV             reduce using rule 132 (factor -> ID .)
    MODULE          reduce using rule 132 (factor -> ID .)
    EXPONENTIATION  reduce using rule 132 (factor -> ID .)
    LPARENTHESIS    shift and go to state 51

  ! SEMICOLON       [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! SEMICOLON       [ reduce using rule 132 (factor -> ID .) ]
  ! PLUS            [ reduce using rule 132 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 132 (factor -> ID .) ]


state 90

    (45) var_declaration -> met_clases .

    ID              reduce using rule 45 (var_declaration -> met_clases .)
    NFUNCTION       reduce using rule 45 (var_declaration -> met_clases .)
    IF              reduce using rule 45 (var_declaration -> met_clases .)
    ECHO            reduce using rule 45 (var_declaration -> met_clases .)
    FUNCTION        reduce using rule 45 (var_declaration -> met_clases .)
    RETURN          reduce using rule 45 (var_declaration -> met_clases .)
    FOR             reduce using rule 45 (var_declaration -> met_clases .)
    WHILE           reduce using rule 45 (var_declaration -> met_clases .)
    DO              reduce using rule 45 (var_declaration -> met_clases .)
    FOREACH         reduce using rule 45 (var_declaration -> met_clases .)
    SWITCH          reduce using rule 45 (var_declaration -> met_clases .)
    DEFINE          reduce using rule 45 (var_declaration -> met_clases .)
    CLASS           reduce using rule 45 (var_declaration -> met_clases .)
    ISSET           reduce using rule 45 (var_declaration -> met_clases .)
    GET_CLASS       reduce using rule 45 (var_declaration -> met_clases .)
    CONST           reduce using rule 45 (var_declaration -> met_clases .)
    REFERENCE       reduce using rule 45 (var_declaration -> met_clases .)
    INTERFACE       reduce using rule 45 (var_declaration -> met_clases .)
    ELABEL          reduce using rule 45 (var_declaration -> met_clases .)
    RKEY            reduce using rule 45 (var_declaration -> met_clases .)
    BREAK           reduce using rule 45 (var_declaration -> met_clases .)
    PUBLIC          reduce using rule 45 (var_declaration -> met_clases .)
    PRIVATE         reduce using rule 45 (var_declaration -> met_clases .)
    PROTECTED       reduce using rule 45 (var_declaration -> met_clases .)


state 91

    (174) sentfor -> FOR LPARENTHESIS . ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> FOR LPARENTHESIS . ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> FOR LPARENTHESIS . ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY

    ID              shift and go to state 191


state 92

    (177) sentwhile -> WHILE LPARENTHESIS . cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar

    LPARENTHESIS    shift and go to state 144
    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77

    cond                           shift and go to state 192
    type                           shift and go to state 69
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75

state 93

    (178) sentdowhile -> DO LKEY . declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 193
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 94

    (179) sentforeach -> FOREACH LPARENTHESIS . ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> FOREACH LPARENTHESIS . ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> FOREACH LPARENTHESIS . declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> FOREACH LPARENTHESIS . met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (84) declaracion_array -> . ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON
    (85) declaracion_array -> . ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

    ID              shift and go to state 194
    ARRAY           shift and go to state 115
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73
    AS              reduce using rule 81 (met_clases -> .)

    declaracion_array              shift and go to state 195
    met_clases                     shift and go to state 196

state 95

    (183) sentswitch -> SWITCH LPARENTHESIS . ID RPARENTHESIS LKEY cuerpo_switch RKEY

    ID              shift and go to state 197


state 96

    (82) sentconst -> DEFINE LPARENTHESIS . STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> DEFINE LPARENTHESIS . STRING COMMA typevar RPARENTHESIS SEMICOLON

    STRING          shift and go to state 198


state 97

    (46) sentclass -> CLASS NFUNCTION . cuerpoclase
    (47) sentclass -> CLASS NFUNCTION . EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> CLASS NFUNCTION . IMPLEMENTS NFUNCTION cuerpoclase
    (52) cuerpoclase -> . LKEY listaatributos listametodos RKEY
    (53) cuerpoclase -> . LKEY listaatributos RKEY
    (54) cuerpoclase -> . LKEY listametodos RKEY

    EXTENDS         shift and go to state 200
    IMPLEMENTS      shift and go to state 201
    LKEY            shift and go to state 202

    cuerpoclase                    shift and go to state 199

state 98

    (67) met_clases -> ISSET LPARENTHESIS . ID RPARENTHESIS

    ID              shift and go to state 203


state 99

    (68) met_clases -> GET_CLASS LPARENTHESIS . ID RPARENTHESIS SEMICOLON

    ID              shift and go to state 204


state 100

    (71) met_clases -> CONST STRING . EQUAL typevar SEMICOLON

    EQUAL           shift and go to state 205


state 101

    (41) var_declaration -> REFERENCE ID . SEMICOLON var_declaration
    (42) var_declaration -> REFERENCE ID . SEMICOLON

    SEMICOLON       shift and go to state 206


state 102

    (49) sentinterface -> INTERFACE NFUNCTION . LKEY cuerpo_interface RKEY

    LKEY            shift and go to state 207


state 103

    (1) program -> SLABEL import declaracion_sentencias ELABEL .

    $end            reduce using rule 1 (program -> SLABEL import declaracion_sentencias ELABEL .)


state 104

    (188) import -> INCLUDE STRING SEMICOLON .

    ELABEL          reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    ID              reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    NFUNCTION       reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    IF              reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    ECHO            reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    FUNCTION        reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    RETURN          reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    FOR             reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    WHILE           reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    DO              reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    FOREACH         reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    SWITCH          reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    DEFINE          reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    CLASS           reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    ISSET           reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    GET_CLASS       reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    CONST           reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    REFERENCE       reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)
    INTERFACE       reduce using rule 188 (import -> INCLUDE STRING SEMICOLON .)


state 105

    (33) var_declaration -> ID EQUAL ID . SEMICOLON var_declaration
    (34) var_declaration -> ID EQUAL ID . SEMICOLON
    (173) call_function -> ID . LPARENTHESIS arg RPARENTHESIS
    (132) factor -> ID .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 208
    LPARENTHESIS    shift and go to state 51
    TIMES           reduce using rule 132 (factor -> ID .)
    DIV             reduce using rule 132 (factor -> ID .)
    MODULE          reduce using rule 132 (factor -> ID .)
    EXPONENTIATION  reduce using rule 132 (factor -> ID .)
    EQUALEQUAL      reduce using rule 132 (factor -> ID .)
    NEQUAL          reduce using rule 132 (factor -> ID .)
    IDENTICAL       reduce using rule 132 (factor -> ID .)
    GREATER         reduce using rule 132 (factor -> ID .)
    GEQUAL          reduce using rule 132 (factor -> ID .)
    LESS            reduce using rule 132 (factor -> ID .)
    LEQUAL          reduce using rule 132 (factor -> ID .)
    PLUS            reduce using rule 132 (factor -> ID .)
    MINUS           reduce using rule 132 (factor -> ID .)

  ! SEMICOLON       [ reduce using rule 132 (factor -> ID .) ]


state 106

    (106) sentassign -> ID EQUAL exp . SEMICOLON
    (35) var_declaration -> ID EQUAL exp . SEMICOLON var_declaration
    (36) var_declaration -> ID EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 209


state 107

    (108) sentassign -> ID EQUAL declaracion_array .
    (39) var_declaration -> ID EQUAL declaracion_array . var_declaration
    (40) var_declaration -> ID EQUAL declaracion_array .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! reduce/reduce conflict for ID resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for NFUNCTION resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for IF resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for ECHO resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for WHILE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for DO resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for FOREACH resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for SWITCH resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for DEFINE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for CLASS resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for ISSET resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for GET_CLASS resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for CONST resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for REFERENCE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for ELABEL resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for RKEY resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for BREAK resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for ECHO resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for WHILE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for DO resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for FOREACH resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for SWITCH resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for DEFINE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for CLASS resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for ELABEL resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for RKEY resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for BREAK resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    IF              reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    ECHO            reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    RETURN          reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    FOR             reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    WHILE           reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    DO              reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    FOREACH         reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    SWITCH          reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    DEFINE          reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    CLASS           reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    INTERFACE       reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    ELABEL          reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    RKEY            reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    BREAK           reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! NFUNCTION       [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! IF              [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! ECHO            [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! FUNCTION        [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! RETURN          [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! FOR             [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! WHILE           [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! DO              [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! FOREACH         [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! SWITCH          [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! DEFINE          [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! CLASS           [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! ISSET           [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! GET_CLASS       [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! CONST           [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! REFERENCE       [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! INTERFACE       [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! ELABEL          [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! RKEY            [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! BREAK           [ reduce using rule 108 (sentassign -> ID EQUAL declaracion_array .) ]
  ! ID              [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! NFUNCTION       [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! FUNCTION        [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! ISSET           [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! GET_CLASS       [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! CONST           [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! REFERENCE       [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 210
    met_clases                     shift and go to state 90

state 108

    (72) met_clases -> ID EQUAL NEW . call_function SEMICOLON
    (37) var_declaration -> ID EQUAL NEW . call_function SEMICOLON var_declaration
    (38) var_declaration -> ID EQUAL NEW . call_function SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    NFUNCTION       shift and go to state 118
    ID              shift and go to state 132

    call_function                  shift and go to state 211

state 109

    (43) var_declaration -> ID EQUAL call_function . SEMICOLON var_declaration
    (44) var_declaration -> ID EQUAL call_function . SEMICOLON
    (133) factor -> call_function .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 212
    TIMES           reduce using rule 133 (factor -> call_function .)
    DIV             reduce using rule 133 (factor -> call_function .)
    MODULE          reduce using rule 133 (factor -> call_function .)
    EXPONENTIATION  reduce using rule 133 (factor -> call_function .)
    EQUALEQUAL      reduce using rule 133 (factor -> call_function .)
    NEQUAL          reduce using rule 133 (factor -> call_function .)
    IDENTICAL       reduce using rule 133 (factor -> call_function .)
    GREATER         reduce using rule 133 (factor -> call_function .)
    GEQUAL          reduce using rule 133 (factor -> call_function .)
    LESS            reduce using rule 133 (factor -> call_function .)
    LEQUAL          reduce using rule 133 (factor -> call_function .)
    PLUS            reduce using rule 133 (factor -> call_function .)
    MINUS           reduce using rule 133 (factor -> call_function .)

  ! SEMICOLON       [ reduce using rule 133 (factor -> call_function .) ]


state 110

    (25) var_declaration -> ID EQUAL INTEGER . SEMICOLON var_declaration
    (26) var_declaration -> ID EQUAL INTEGER . SEMICOLON
    (130) factor -> INTEGER .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 213
    TIMES           reduce using rule 130 (factor -> INTEGER .)
    DIV             reduce using rule 130 (factor -> INTEGER .)
    MODULE          reduce using rule 130 (factor -> INTEGER .)
    EXPONENTIATION  reduce using rule 130 (factor -> INTEGER .)
    EQUALEQUAL      reduce using rule 130 (factor -> INTEGER .)
    NEQUAL          reduce using rule 130 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 130 (factor -> INTEGER .)
    GREATER         reduce using rule 130 (factor -> INTEGER .)
    GEQUAL          reduce using rule 130 (factor -> INTEGER .)
    LESS            reduce using rule 130 (factor -> INTEGER .)
    LEQUAL          reduce using rule 130 (factor -> INTEGER .)
    PLUS            reduce using rule 130 (factor -> INTEGER .)
    MINUS           reduce using rule 130 (factor -> INTEGER .)

  ! SEMICOLON       [ reduce using rule 130 (factor -> INTEGER .) ]


state 111

    (27) var_declaration -> ID EQUAL FLOAT . SEMICOLON var_declaration
    (28) var_declaration -> ID EQUAL FLOAT . SEMICOLON
    (131) factor -> FLOAT .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 214
    TIMES           reduce using rule 131 (factor -> FLOAT .)
    DIV             reduce using rule 131 (factor -> FLOAT .)
    MODULE          reduce using rule 131 (factor -> FLOAT .)
    EXPONENTIATION  reduce using rule 131 (factor -> FLOAT .)
    EQUALEQUAL      reduce using rule 131 (factor -> FLOAT .)
    NEQUAL          reduce using rule 131 (factor -> FLOAT .)
    IDENTICAL       reduce using rule 131 (factor -> FLOAT .)
    GREATER         reduce using rule 131 (factor -> FLOAT .)
    GEQUAL          reduce using rule 131 (factor -> FLOAT .)
    LESS            reduce using rule 131 (factor -> FLOAT .)
    LEQUAL          reduce using rule 131 (factor -> FLOAT .)
    PLUS            reduce using rule 131 (factor -> FLOAT .)
    MINUS           reduce using rule 131 (factor -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 131 (factor -> FLOAT .) ]


state 112

    (29) var_declaration -> ID EQUAL STRING . SEMICOLON var_declaration
    (30) var_declaration -> ID EQUAL STRING . SEMICOLON

    SEMICOLON       shift and go to state 215


state 113

    (31) var_declaration -> ID EQUAL bool . SEMICOLON var_declaration
    (32) var_declaration -> ID EQUAL bool . SEMICOLON

    SEMICOLON       shift and go to state 216


state 114

    (117) exp -> LPARENTHESIS . expsimple opcomparacion expsimple RPARENTHESIS
    (134) factor -> LPARENTHESIS . expsimple RPARENTHESIS
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    INTEGER         shift and go to state 218
    FLOAT           shift and go to state 219
    ID              shift and go to state 220
    LPARENTHESIS    shift and go to state 217
    NFUNCTION       shift and go to state 118

    expsimple                      shift and go to state 168
    term                           shift and go to state 74
    factor                         shift and go to state 76
    call_function                  shift and go to state 72

state 115

    (84) declaracion_array -> ARRAY . LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON
    (85) declaracion_array -> ARRAY . LPARENTHESIS cuerpo_array RPARENTHESIS

    LPARENTHESIS    shift and go to state 221


state 116

    (110) bool -> TRUE .

    SEMICOLON       reduce using rule 110 (bool -> TRUE .)


state 117

    (111) bool -> FALSE .

    SEMICOLON       reduce using rule 111 (bool -> FALSE .)


state 118

    (171) call_function -> NFUNCTION .
    (172) call_function -> NFUNCTION . LPARENTHESIS arg RPARENTHESIS

    SEMICOLON       reduce using rule 171 (call_function -> NFUNCTION .)
    TIMES           reduce using rule 171 (call_function -> NFUNCTION .)
    DIV             reduce using rule 171 (call_function -> NFUNCTION .)
    MODULE          reduce using rule 171 (call_function -> NFUNCTION .)
    EXPONENTIATION  reduce using rule 171 (call_function -> NFUNCTION .)
    EQUALEQUAL      reduce using rule 171 (call_function -> NFUNCTION .)
    NEQUAL          reduce using rule 171 (call_function -> NFUNCTION .)
    IDENTICAL       reduce using rule 171 (call_function -> NFUNCTION .)
    GREATER         reduce using rule 171 (call_function -> NFUNCTION .)
    GEQUAL          reduce using rule 171 (call_function -> NFUNCTION .)
    LESS            reduce using rule 171 (call_function -> NFUNCTION .)
    LEQUAL          reduce using rule 171 (call_function -> NFUNCTION .)
    PLUS            reduce using rule 171 (call_function -> NFUNCTION .)
    MINUS           reduce using rule 171 (call_function -> NFUNCTION .)
    RPARENTHESIS    reduce using rule 171 (call_function -> NFUNCTION .)
    LPARENTHESIS    shift and go to state 54


state 119

    (23) var_declaration -> ID . SEMICOLON var_declaration
    (24) var_declaration -> ID . SEMICOLON
    (25) var_declaration -> ID . EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> ID . EQUAL INTEGER SEMICOLON
    (27) var_declaration -> ID . EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> ID . EQUAL FLOAT SEMICOLON
    (29) var_declaration -> ID . EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> ID . EQUAL STRING SEMICOLON
    (31) var_declaration -> ID . EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> ID . EQUAL bool SEMICOLON
    (33) var_declaration -> ID . EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> ID . EQUAL ID SEMICOLON
    (35) var_declaration -> ID . EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> ID . EQUAL exp SEMICOLON
    (37) var_declaration -> ID . EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> ID . EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> ID . EQUAL declaracion_array var_declaration
    (40) var_declaration -> ID . EQUAL declaracion_array
    (43) var_declaration -> ID . EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> ID . EQUAL call_function SEMICOLON
    (70) met_clases -> ID . DOUBLE_COLON call_function SEMICOLON
    (72) met_clases -> ID . EQUAL NEW call_function SEMICOLON
    (73) met_clases -> ID . CMETHOD call_function SEMICOLON
    (74) met_clases -> ID . CMETHOD NFUNCTION
    (75) met_clases -> ID . CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> ID . CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> ID . CMETHOD PRIVATE SEMICOLON

    SEMICOLON       shift and go to state 48
    EQUAL           shift and go to state 190
    DOUBLE_COLON    shift and go to state 52
    CMETHOD         shift and go to state 53


state 120

    (23) var_declaration -> ID SEMICOLON var_declaration .

    ID              reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    IF              reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    FOR             reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    DO              reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    FOREACH         reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    DEFINE          reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    ISSET           reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    CONST           reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    ELABEL          reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    RKEY            reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    BREAK           reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 23 (var_declaration -> ID SEMICOLON var_declaration .)


state 121

    (69) met_clases -> NFUNCTION . DOUBLE_COLON call_function SEMICOLON

    DOUBLE_COLON    shift and go to state 55


state 122

    (107) sentassign -> ID PLUS PLUS . SEMICOLON

    SEMICOLON       shift and go to state 222


state 123

    (109) sentassign -> ID MINUS MINUS . SEMICOLON

    SEMICOLON       shift and go to state 223


state 124

    (153) var_declaration_gen -> ID .
    (154) var_declaration_gen -> ID . PLUS PLUS
    (155) var_declaration_gen -> ID . MINUS MINUS

    COMMA           reduce using rule 153 (var_declaration_gen -> ID .)
    RPARENTHESIS    reduce using rule 153 (var_declaration_gen -> ID .)
    EQUALEQUAL      reduce using rule 153 (var_declaration_gen -> ID .)
    NEQUAL          reduce using rule 153 (var_declaration_gen -> ID .)
    IDENTICAL       reduce using rule 153 (var_declaration_gen -> ID .)
    GREATER         reduce using rule 153 (var_declaration_gen -> ID .)
    GEQUAL          reduce using rule 153 (var_declaration_gen -> ID .)
    LESS            reduce using rule 153 (var_declaration_gen -> ID .)
    LEQUAL          reduce using rule 153 (var_declaration_gen -> ID .)
    AND             reduce using rule 153 (var_declaration_gen -> ID .)
    OR              reduce using rule 153 (var_declaration_gen -> ID .)
    XOR             reduce using rule 153 (var_declaration_gen -> ID .)
    NOT             reduce using rule 153 (var_declaration_gen -> ID .)
    SEMICOLON       reduce using rule 153 (var_declaration_gen -> ID .)
    PLUS            shift and go to state 173
    MINUS           shift and go to state 174


state 125

    (173) call_function -> ID LPARENTHESIS arg . RPARENTHESIS

    RPARENTHESIS    shift and go to state 224


state 126

    (159) arg -> var_declaration_gen .
    (163) arg -> var_declaration_gen . COMMA arg
    (152) type -> var_declaration_gen .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 152 (type -> var_declaration_gen .)
    COMMA           shift and go to state 225
    RPARENTHESIS    reduce using rule 152 (type -> var_declaration_gen .)

  ! RPARENTHESIS    [ reduce using rule 159 (arg -> var_declaration_gen .) ]
  ! COMMA           [ reduce using rule 152 (type -> var_declaration_gen .) ]


state 127

    (160) arg -> type .
    (161) arg -> type . COMMA arg

    RPARENTHESIS    reduce using rule 160 (arg -> type .)
    COMMA           shift and go to state 226


state 128

    (162) arg -> STRING .
    (164) arg -> STRING . COMMA arg
    (135) typevar -> STRING .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 135 (typevar -> STRING .)
    COMMA           shift and go to state 227
    RPARENTHESIS    reduce using rule 135 (typevar -> STRING .)

  ! RPARENTHESIS    [ reduce using rule 162 (arg -> STRING .) ]
  ! COMMA           [ reduce using rule 135 (typevar -> STRING .) ]


state 129

    (158) var_declaration_gen -> typevar .
    (151) type -> typevar .

  ! reduce/reduce conflict for COMMA resolved using rule 151 (type -> typevar .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 151 (type -> typevar .)
    COMMA           reduce using rule 151 (type -> typevar .)
    RPARENTHESIS    reduce using rule 151 (type -> typevar .)

  ! COMMA           [ reduce using rule 158 (var_declaration_gen -> typevar .) ]
  ! RPARENTHESIS    [ reduce using rule 158 (var_declaration_gen -> typevar .) ]


state 130

    (136) typevar -> INTEGER .

    COMMA           reduce using rule 136 (typevar -> INTEGER .)
    RPARENTHESIS    reduce using rule 136 (typevar -> INTEGER .)
    EQUALEQUAL      reduce using rule 136 (typevar -> INTEGER .)
    NEQUAL          reduce using rule 136 (typevar -> INTEGER .)
    IDENTICAL       reduce using rule 136 (typevar -> INTEGER .)
    GREATER         reduce using rule 136 (typevar -> INTEGER .)
    GEQUAL          reduce using rule 136 (typevar -> INTEGER .)
    LESS            reduce using rule 136 (typevar -> INTEGER .)
    LEQUAL          reduce using rule 136 (typevar -> INTEGER .)
    AND             reduce using rule 136 (typevar -> INTEGER .)
    OR              reduce using rule 136 (typevar -> INTEGER .)
    XOR             reduce using rule 136 (typevar -> INTEGER .)
    NOT             reduce using rule 136 (typevar -> INTEGER .)
    SEMICOLON       reduce using rule 136 (typevar -> INTEGER .)
    EQUALG          reduce using rule 136 (typevar -> INTEGER .)


state 131

    (139) typevar -> FLOAT .

    COMMA           reduce using rule 139 (typevar -> FLOAT .)
    RPARENTHESIS    reduce using rule 139 (typevar -> FLOAT .)
    EQUALEQUAL      reduce using rule 139 (typevar -> FLOAT .)
    NEQUAL          reduce using rule 139 (typevar -> FLOAT .)
    IDENTICAL       reduce using rule 139 (typevar -> FLOAT .)
    GREATER         reduce using rule 139 (typevar -> FLOAT .)
    GEQUAL          reduce using rule 139 (typevar -> FLOAT .)
    LESS            reduce using rule 139 (typevar -> FLOAT .)
    LEQUAL          reduce using rule 139 (typevar -> FLOAT .)
    AND             reduce using rule 139 (typevar -> FLOAT .)
    OR              reduce using rule 139 (typevar -> FLOAT .)
    XOR             reduce using rule 139 (typevar -> FLOAT .)
    NOT             reduce using rule 139 (typevar -> FLOAT .)
    SEMICOLON       reduce using rule 139 (typevar -> FLOAT .)
    EQUALG          reduce using rule 139 (typevar -> FLOAT .)


state 132

    (173) call_function -> ID . LPARENTHESIS arg RPARENTHESIS

    LPARENTHESIS    shift and go to state 51


state 133

    (70) met_clases -> ID DOUBLE_COLON call_function . SEMICOLON

    SEMICOLON       shift and go to state 228


state 134

    (73) met_clases -> ID CMETHOD call_function . SEMICOLON

    SEMICOLON       shift and go to state 229


state 135

    (74) met_clases -> ID CMETHOD NFUNCTION .
    (171) call_function -> NFUNCTION .
    (172) call_function -> NFUNCTION . LPARENTHESIS arg RPARENTHESIS

    ID              reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    NFUNCTION       reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    IF              reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    ECHO            reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    FUNCTION        reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    RETURN          reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    FOR             reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    WHILE           reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    DO              reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    FOREACH         reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    SWITCH          reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    DEFINE          reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    CLASS           reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    ISSET           reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    GET_CLASS       reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    CONST           reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    REFERENCE       reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    INTERFACE       reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    ELABEL          reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    RKEY            reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    BREAK           reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    PUBLIC          reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    PRIVATE         reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    PROTECTED       reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    RPARENTHESIS    reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    AS              reduce using rule 74 (met_clases -> ID CMETHOD NFUNCTION .)
    SEMICOLON       reduce using rule 171 (call_function -> NFUNCTION .)
    LPARENTHESIS    shift and go to state 54


state 136

    (75) met_clases -> ID CMETHOD PUBLIC . SEMICOLON

    SEMICOLON       shift and go to state 230


state 137

    (76) met_clases -> ID CMETHOD PROTECTED . SEMICOLON

    SEMICOLON       shift and go to state 231


state 138

    (77) met_clases -> ID CMETHOD PRIVATE . SEMICOLON

    SEMICOLON       shift and go to state 232


state 139

    (172) call_function -> NFUNCTION LPARENTHESIS arg . RPARENTHESIS

    RPARENTHESIS    shift and go to state 233


state 140

    (69) met_clases -> NFUNCTION DOUBLE_COLON call_function . SEMICOLON

    SEMICOLON       shift and go to state 234


state 141

    (100) sentif -> IF genif auxsentif .

    ID              reduce using rule 100 (sentif -> IF genif auxsentif .)
    NFUNCTION       reduce using rule 100 (sentif -> IF genif auxsentif .)
    IF              reduce using rule 100 (sentif -> IF genif auxsentif .)
    ECHO            reduce using rule 100 (sentif -> IF genif auxsentif .)
    FUNCTION        reduce using rule 100 (sentif -> IF genif auxsentif .)
    RETURN          reduce using rule 100 (sentif -> IF genif auxsentif .)
    FOR             reduce using rule 100 (sentif -> IF genif auxsentif .)
    WHILE           reduce using rule 100 (sentif -> IF genif auxsentif .)
    DO              reduce using rule 100 (sentif -> IF genif auxsentif .)
    FOREACH         reduce using rule 100 (sentif -> IF genif auxsentif .)
    SWITCH          reduce using rule 100 (sentif -> IF genif auxsentif .)
    DEFINE          reduce using rule 100 (sentif -> IF genif auxsentif .)
    CLASS           reduce using rule 100 (sentif -> IF genif auxsentif .)
    ISSET           reduce using rule 100 (sentif -> IF genif auxsentif .)
    GET_CLASS       reduce using rule 100 (sentif -> IF genif auxsentif .)
    CONST           reduce using rule 100 (sentif -> IF genif auxsentif .)
    REFERENCE       reduce using rule 100 (sentif -> IF genif auxsentif .)
    INTERFACE       reduce using rule 100 (sentif -> IF genif auxsentif .)
    ELABEL          reduce using rule 100 (sentif -> IF genif auxsentif .)
    RKEY            reduce using rule 100 (sentif -> IF genif auxsentif .)
    BREAK           reduce using rule 100 (sentif -> IF genif auxsentif .)


state 142

    (101) auxsentif -> ELSE . IF genif auxsentif
    (102) auxsentif -> ELSE . LKEY declaracion_sentencias RKEY

    IF              shift and go to state 235
    LKEY            shift and go to state 236


state 143

    (103) auxsentif -> empty .

    ID              reduce using rule 103 (auxsentif -> empty .)
    NFUNCTION       reduce using rule 103 (auxsentif -> empty .)
    IF              reduce using rule 103 (auxsentif -> empty .)
    ECHO            reduce using rule 103 (auxsentif -> empty .)
    FUNCTION        reduce using rule 103 (auxsentif -> empty .)
    RETURN          reduce using rule 103 (auxsentif -> empty .)
    FOR             reduce using rule 103 (auxsentif -> empty .)
    WHILE           reduce using rule 103 (auxsentif -> empty .)
    DO              reduce using rule 103 (auxsentif -> empty .)
    FOREACH         reduce using rule 103 (auxsentif -> empty .)
    SWITCH          reduce using rule 103 (auxsentif -> empty .)
    DEFINE          reduce using rule 103 (auxsentif -> empty .)
    CLASS           reduce using rule 103 (auxsentif -> empty .)
    ISSET           reduce using rule 103 (auxsentif -> empty .)
    GET_CLASS       reduce using rule 103 (auxsentif -> empty .)
    CONST           reduce using rule 103 (auxsentif -> empty .)
    REFERENCE       reduce using rule 103 (auxsentif -> empty .)
    INTERFACE       reduce using rule 103 (auxsentif -> empty .)
    ELABEL          reduce using rule 103 (auxsentif -> empty .)
    RKEY            reduce using rule 103 (auxsentif -> empty .)
    BREAK           reduce using rule 103 (auxsentif -> empty .)


state 144

    (149) cond -> LPARENTHESIS . type RPARENTHESIS
    (150) cond -> LPARENTHESIS . cond RPARENTHESIS
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar

    LPARENTHESIS    shift and go to state 144
    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77

    type                           shift and go to state 169
    cond                           shift and go to state 170
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75

state 145

    (104) genif -> LPARENTHESIS cond . RPARENTHESIS LKEY declaracion_sentencias RKEY
    (147) cond -> cond . opcomparacion cond
    (148) cond -> cond . oplogicos cond
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (112) oplogicos -> . AND
    (113) oplogicos -> . OR
    (114) oplogicos -> . XOR
    (115) oplogicos -> . NOT

    RPARENTHESIS    shift and go to state 237
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    XOR             shift and go to state 162
    NOT             shift and go to state 163

    opcomparacion                  shift and go to state 151
    oplogicos                      shift and go to state 152

state 146

    (105) genif -> LPARENTHESIS met_clases . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 238


state 147

    (70) met_clases -> ID . DOUBLE_COLON call_function SEMICOLON
    (72) met_clases -> ID . EQUAL NEW call_function SEMICOLON
    (73) met_clases -> ID . CMETHOD call_function SEMICOLON
    (74) met_clases -> ID . CMETHOD NFUNCTION
    (75) met_clases -> ID . CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> ID . CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> ID . CMETHOD PRIVATE SEMICOLON
    (153) var_declaration_gen -> ID .
    (154) var_declaration_gen -> ID . PLUS PLUS
    (155) var_declaration_gen -> ID . MINUS MINUS

    DOUBLE_COLON    shift and go to state 52
    EQUAL           shift and go to state 172
    CMETHOD         shift and go to state 53
    RPARENTHESIS    reduce using rule 153 (var_declaration_gen -> ID .)
    EQUALEQUAL      reduce using rule 153 (var_declaration_gen -> ID .)
    NEQUAL          reduce using rule 153 (var_declaration_gen -> ID .)
    IDENTICAL       reduce using rule 153 (var_declaration_gen -> ID .)
    GREATER         reduce using rule 153 (var_declaration_gen -> ID .)
    GEQUAL          reduce using rule 153 (var_declaration_gen -> ID .)
    LESS            reduce using rule 153 (var_declaration_gen -> ID .)
    LEQUAL          reduce using rule 153 (var_declaration_gen -> ID .)
    AND             reduce using rule 153 (var_declaration_gen -> ID .)
    OR              reduce using rule 153 (var_declaration_gen -> ID .)
    XOR             reduce using rule 153 (var_declaration_gen -> ID .)
    NOT             reduce using rule 153 (var_declaration_gen -> ID .)
    PLUS            shift and go to state 173
    MINUS           shift and go to state 174


state 148

    (96) sentecho -> ECHO typevar SEMICOLON .

    ID              reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    NFUNCTION       reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    IF              reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    ECHO            reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    FUNCTION        reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    RETURN          reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    FOR             reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    WHILE           reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    DO              reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    FOREACH         reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    SWITCH          reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    DEFINE          reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    CLASS           reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    ISSET           reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    GET_CLASS       reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    CONST           reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    REFERENCE       reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    INTERFACE       reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    ELABEL          reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    RKEY            reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)
    BREAK           reduce using rule 96 (sentecho -> ECHO typevar SEMICOLON .)


state 149

    (97) sentecho -> ECHO exp SEMICOLON .

    ID              reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    NFUNCTION       reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    IF              reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    ECHO            reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    FUNCTION        reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    RETURN          reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    FOR             reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    WHILE           reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    DO              reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    FOREACH         reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    SWITCH          reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    DEFINE          reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    CLASS           reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    ISSET           reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    GET_CLASS       reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    CONST           reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    REFERENCE       reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    INTERFACE       reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    ELABEL          reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    RKEY            reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)
    BREAK           reduce using rule 97 (sentecho -> ECHO exp SEMICOLON .)


state 150

    (98) sentecho -> ECHO cond SEMICOLON .

    ID              reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    NFUNCTION       reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    IF              reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    ECHO            reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    FUNCTION        reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    RETURN          reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    FOR             reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    WHILE           reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    DO              reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    FOREACH         reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    SWITCH          reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    DEFINE          reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    CLASS           reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    ISSET           reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    GET_CLASS       reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    CONST           reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    REFERENCE       reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    INTERFACE       reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    ELABEL          reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    RKEY            reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)
    BREAK           reduce using rule 98 (sentecho -> ECHO cond SEMICOLON .)


state 151

    (147) cond -> cond opcomparacion . cond
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar

    LPARENTHESIS    shift and go to state 144
    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77

    cond                           shift and go to state 239
    type                           shift and go to state 69
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75

state 152

    (148) cond -> cond oplogicos . cond
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar

    LPARENTHESIS    shift and go to state 144
    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77

    cond                           shift and go to state 240
    type                           shift and go to state 69
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75

state 153

    (119) opcomparacion -> EQUALEQUAL .

    LPARENTHESIS    reduce using rule 119 (opcomparacion -> EQUALEQUAL .)
    STRING          reduce using rule 119 (opcomparacion -> EQUALEQUAL .)
    INTEGER         reduce using rule 119 (opcomparacion -> EQUALEQUAL .)
    TRUE            reduce using rule 119 (opcomparacion -> EQUALEQUAL .)
    FALSE           reduce using rule 119 (opcomparacion -> EQUALEQUAL .)
    FLOAT           reduce using rule 119 (opcomparacion -> EQUALEQUAL .)
    ID              reduce using rule 119 (opcomparacion -> EQUALEQUAL .)
    MINUS           reduce using rule 119 (opcomparacion -> EQUALEQUAL .)
    PLUS            reduce using rule 119 (opcomparacion -> EQUALEQUAL .)
    NFUNCTION       reduce using rule 119 (opcomparacion -> EQUALEQUAL .)


state 154

    (120) opcomparacion -> NEQUAL .

    LPARENTHESIS    reduce using rule 120 (opcomparacion -> NEQUAL .)
    STRING          reduce using rule 120 (opcomparacion -> NEQUAL .)
    INTEGER         reduce using rule 120 (opcomparacion -> NEQUAL .)
    TRUE            reduce using rule 120 (opcomparacion -> NEQUAL .)
    FALSE           reduce using rule 120 (opcomparacion -> NEQUAL .)
    FLOAT           reduce using rule 120 (opcomparacion -> NEQUAL .)
    ID              reduce using rule 120 (opcomparacion -> NEQUAL .)
    MINUS           reduce using rule 120 (opcomparacion -> NEQUAL .)
    PLUS            reduce using rule 120 (opcomparacion -> NEQUAL .)
    NFUNCTION       reduce using rule 120 (opcomparacion -> NEQUAL .)


state 155

    (121) opcomparacion -> IDENTICAL .

    LPARENTHESIS    reduce using rule 121 (opcomparacion -> IDENTICAL .)
    STRING          reduce using rule 121 (opcomparacion -> IDENTICAL .)
    INTEGER         reduce using rule 121 (opcomparacion -> IDENTICAL .)
    TRUE            reduce using rule 121 (opcomparacion -> IDENTICAL .)
    FALSE           reduce using rule 121 (opcomparacion -> IDENTICAL .)
    FLOAT           reduce using rule 121 (opcomparacion -> IDENTICAL .)
    ID              reduce using rule 121 (opcomparacion -> IDENTICAL .)
    MINUS           reduce using rule 121 (opcomparacion -> IDENTICAL .)
    PLUS            reduce using rule 121 (opcomparacion -> IDENTICAL .)
    NFUNCTION       reduce using rule 121 (opcomparacion -> IDENTICAL .)


state 156

    (122) opcomparacion -> GREATER .

    LPARENTHESIS    reduce using rule 122 (opcomparacion -> GREATER .)
    STRING          reduce using rule 122 (opcomparacion -> GREATER .)
    INTEGER         reduce using rule 122 (opcomparacion -> GREATER .)
    TRUE            reduce using rule 122 (opcomparacion -> GREATER .)
    FALSE           reduce using rule 122 (opcomparacion -> GREATER .)
    FLOAT           reduce using rule 122 (opcomparacion -> GREATER .)
    ID              reduce using rule 122 (opcomparacion -> GREATER .)
    MINUS           reduce using rule 122 (opcomparacion -> GREATER .)
    PLUS            reduce using rule 122 (opcomparacion -> GREATER .)
    NFUNCTION       reduce using rule 122 (opcomparacion -> GREATER .)


state 157

    (123) opcomparacion -> GEQUAL .

    LPARENTHESIS    reduce using rule 123 (opcomparacion -> GEQUAL .)
    STRING          reduce using rule 123 (opcomparacion -> GEQUAL .)
    INTEGER         reduce using rule 123 (opcomparacion -> GEQUAL .)
    TRUE            reduce using rule 123 (opcomparacion -> GEQUAL .)
    FALSE           reduce using rule 123 (opcomparacion -> GEQUAL .)
    FLOAT           reduce using rule 123 (opcomparacion -> GEQUAL .)
    ID              reduce using rule 123 (opcomparacion -> GEQUAL .)
    MINUS           reduce using rule 123 (opcomparacion -> GEQUAL .)
    PLUS            reduce using rule 123 (opcomparacion -> GEQUAL .)
    NFUNCTION       reduce using rule 123 (opcomparacion -> GEQUAL .)


state 158

    (124) opcomparacion -> LESS .

    LPARENTHESIS    reduce using rule 124 (opcomparacion -> LESS .)
    STRING          reduce using rule 124 (opcomparacion -> LESS .)
    INTEGER         reduce using rule 124 (opcomparacion -> LESS .)
    TRUE            reduce using rule 124 (opcomparacion -> LESS .)
    FALSE           reduce using rule 124 (opcomparacion -> LESS .)
    FLOAT           reduce using rule 124 (opcomparacion -> LESS .)
    ID              reduce using rule 124 (opcomparacion -> LESS .)
    MINUS           reduce using rule 124 (opcomparacion -> LESS .)
    PLUS            reduce using rule 124 (opcomparacion -> LESS .)
    NFUNCTION       reduce using rule 124 (opcomparacion -> LESS .)


state 159

    (125) opcomparacion -> LEQUAL .

    LPARENTHESIS    reduce using rule 125 (opcomparacion -> LEQUAL .)
    STRING          reduce using rule 125 (opcomparacion -> LEQUAL .)
    INTEGER         reduce using rule 125 (opcomparacion -> LEQUAL .)
    TRUE            reduce using rule 125 (opcomparacion -> LEQUAL .)
    FALSE           reduce using rule 125 (opcomparacion -> LEQUAL .)
    FLOAT           reduce using rule 125 (opcomparacion -> LEQUAL .)
    ID              reduce using rule 125 (opcomparacion -> LEQUAL .)
    MINUS           reduce using rule 125 (opcomparacion -> LEQUAL .)
    PLUS            reduce using rule 125 (opcomparacion -> LEQUAL .)
    NFUNCTION       reduce using rule 125 (opcomparacion -> LEQUAL .)


state 160

    (112) oplogicos -> AND .

    LPARENTHESIS    reduce using rule 112 (oplogicos -> AND .)
    STRING          reduce using rule 112 (oplogicos -> AND .)
    INTEGER         reduce using rule 112 (oplogicos -> AND .)
    TRUE            reduce using rule 112 (oplogicos -> AND .)
    FALSE           reduce using rule 112 (oplogicos -> AND .)
    FLOAT           reduce using rule 112 (oplogicos -> AND .)
    ID              reduce using rule 112 (oplogicos -> AND .)
    MINUS           reduce using rule 112 (oplogicos -> AND .)
    PLUS            reduce using rule 112 (oplogicos -> AND .)


state 161

    (113) oplogicos -> OR .

    LPARENTHESIS    reduce using rule 113 (oplogicos -> OR .)
    STRING          reduce using rule 113 (oplogicos -> OR .)
    INTEGER         reduce using rule 113 (oplogicos -> OR .)
    TRUE            reduce using rule 113 (oplogicos -> OR .)
    FALSE           reduce using rule 113 (oplogicos -> OR .)
    FLOAT           reduce using rule 113 (oplogicos -> OR .)
    ID              reduce using rule 113 (oplogicos -> OR .)
    MINUS           reduce using rule 113 (oplogicos -> OR .)
    PLUS            reduce using rule 113 (oplogicos -> OR .)


state 162

    (114) oplogicos -> XOR .

    LPARENTHESIS    reduce using rule 114 (oplogicos -> XOR .)
    STRING          reduce using rule 114 (oplogicos -> XOR .)
    INTEGER         reduce using rule 114 (oplogicos -> XOR .)
    TRUE            reduce using rule 114 (oplogicos -> XOR .)
    FALSE           reduce using rule 114 (oplogicos -> XOR .)
    FLOAT           reduce using rule 114 (oplogicos -> XOR .)
    ID              reduce using rule 114 (oplogicos -> XOR .)
    MINUS           reduce using rule 114 (oplogicos -> XOR .)
    PLUS            reduce using rule 114 (oplogicos -> XOR .)


state 163

    (115) oplogicos -> NOT .

    LPARENTHESIS    reduce using rule 115 (oplogicos -> NOT .)
    STRING          reduce using rule 115 (oplogicos -> NOT .)
    INTEGER         reduce using rule 115 (oplogicos -> NOT .)
    TRUE            reduce using rule 115 (oplogicos -> NOT .)
    FALSE           reduce using rule 115 (oplogicos -> NOT .)
    FLOAT           reduce using rule 115 (oplogicos -> NOT .)
    ID              reduce using rule 115 (oplogicos -> NOT .)
    MINUS           reduce using rule 115 (oplogicos -> NOT .)
    PLUS            reduce using rule 115 (oplogicos -> NOT .)


state 164

    (116) exp -> expsimple opcomparacion . expsimple
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    INTEGER         shift and go to state 218
    FLOAT           shift and go to state 219
    ID              shift and go to state 220
    LPARENTHESIS    shift and go to state 217
    NFUNCTION       shift and go to state 118

    expsimple                      shift and go to state 241
    term                           shift and go to state 74
    factor                         shift and go to state 76
    call_function                  shift and go to state 72

state 165

    (126) expsimple -> expsimple opsuma . term
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    INTEGER         shift and go to state 218
    FLOAT           shift and go to state 219
    ID              shift and go to state 220
    LPARENTHESIS    shift and go to state 217
    NFUNCTION       shift and go to state 118

    term                           shift and go to state 242
    factor                         shift and go to state 76
    call_function                  shift and go to state 72

state 166

    (140) opsuma -> PLUS .

    INTEGER         reduce using rule 140 (opsuma -> PLUS .)
    FLOAT           reduce using rule 140 (opsuma -> PLUS .)
    ID              reduce using rule 140 (opsuma -> PLUS .)
    LPARENTHESIS    reduce using rule 140 (opsuma -> PLUS .)
    NFUNCTION       reduce using rule 140 (opsuma -> PLUS .)


state 167

    (141) opsuma -> MINUS .

    INTEGER         reduce using rule 141 (opsuma -> MINUS .)
    FLOAT           reduce using rule 141 (opsuma -> MINUS .)
    ID              reduce using rule 141 (opsuma -> MINUS .)
    LPARENTHESIS    reduce using rule 141 (opsuma -> MINUS .)
    NFUNCTION       reduce using rule 141 (opsuma -> MINUS .)


state 168

    (117) exp -> LPARENTHESIS expsimple . opcomparacion expsimple RPARENTHESIS
    (134) factor -> LPARENTHESIS expsimple . RPARENTHESIS
    (126) expsimple -> expsimple . opsuma term
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (140) opsuma -> . PLUS
    (141) opsuma -> . MINUS

    RPARENTHESIS    shift and go to state 244
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167

    opcomparacion                  shift and go to state 243
    opsuma                         shift and go to state 165

state 169

    (149) cond -> LPARENTHESIS type . RPARENTHESIS
    (146) cond -> type .

  ! shift/reduce conflict for RPARENTHESIS resolved as shift
    RPARENTHESIS    shift and go to state 245
    EQUALEQUAL      reduce using rule 146 (cond -> type .)
    NEQUAL          reduce using rule 146 (cond -> type .)
    IDENTICAL       reduce using rule 146 (cond -> type .)
    GREATER         reduce using rule 146 (cond -> type .)
    GEQUAL          reduce using rule 146 (cond -> type .)
    LESS            reduce using rule 146 (cond -> type .)
    LEQUAL          reduce using rule 146 (cond -> type .)
    AND             reduce using rule 146 (cond -> type .)
    OR              reduce using rule 146 (cond -> type .)
    XOR             reduce using rule 146 (cond -> type .)
    NOT             reduce using rule 146 (cond -> type .)

  ! RPARENTHESIS    [ reduce using rule 146 (cond -> type .) ]


state 170

    (150) cond -> LPARENTHESIS cond . RPARENTHESIS
    (147) cond -> cond . opcomparacion cond
    (148) cond -> cond . oplogicos cond
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (112) oplogicos -> . AND
    (113) oplogicos -> . OR
    (114) oplogicos -> . XOR
    (115) oplogicos -> . NOT

    RPARENTHESIS    shift and go to state 246
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    XOR             shift and go to state 162
    NOT             shift and go to state 163

    opcomparacion                  shift and go to state 151
    oplogicos                      shift and go to state 152

state 171

    (153) var_declaration_gen -> ID .
    (154) var_declaration_gen -> ID . PLUS PLUS
    (155) var_declaration_gen -> ID . MINUS MINUS
    (132) factor -> ID .
    (173) call_function -> ID . LPARENTHESIS arg RPARENTHESIS

  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for GEQUAL resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for LESS resolved using rule 132 (factor -> ID .)
  ! reduce/reduce conflict for LEQUAL resolved using rule 132 (factor -> ID .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    AND             reduce using rule 153 (var_declaration_gen -> ID .)
    OR              reduce using rule 153 (var_declaration_gen -> ID .)
    XOR             reduce using rule 153 (var_declaration_gen -> ID .)
    NOT             reduce using rule 153 (var_declaration_gen -> ID .)
    PLUS            shift and go to state 173
    MINUS           shift and go to state 174
    TIMES           reduce using rule 132 (factor -> ID .)
    DIV             reduce using rule 132 (factor -> ID .)
    MODULE          reduce using rule 132 (factor -> ID .)
    EXPONENTIATION  reduce using rule 132 (factor -> ID .)
    RPARENTHESIS    reduce using rule 132 (factor -> ID .)
    EQUALEQUAL      reduce using rule 132 (factor -> ID .)
    NEQUAL          reduce using rule 132 (factor -> ID .)
    IDENTICAL       reduce using rule 132 (factor -> ID .)
    GREATER         reduce using rule 132 (factor -> ID .)
    GEQUAL          reduce using rule 132 (factor -> ID .)
    LESS            reduce using rule 132 (factor -> ID .)
    LEQUAL          reduce using rule 132 (factor -> ID .)
    LPARENTHESIS    shift and go to state 51

  ! RPARENTHESIS    [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! EQUALEQUAL      [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! NEQUAL          [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! IDENTICAL       [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! GREATER         [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! GEQUAL          [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! LESS            [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! LEQUAL          [ reduce using rule 153 (var_declaration_gen -> ID .) ]
  ! PLUS            [ reduce using rule 132 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 132 (factor -> ID .) ]


state 172

    (72) met_clases -> ID EQUAL . NEW call_function SEMICOLON

    NEW             shift and go to state 247


state 173

    (154) var_declaration_gen -> ID PLUS . PLUS

    PLUS            shift and go to state 248


state 174

    (155) var_declaration_gen -> ID MINUS . MINUS

    MINUS           shift and go to state 249


state 175

    (80) met_clases -> FUNCTION NFUNCTION . LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY

    LPARENTHESIS    shift and go to state 250


state 176

    (128) term -> term opmult . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    INTEGER         shift and go to state 218
    FLOAT           shift and go to state 219
    ID              shift and go to state 220
    LPARENTHESIS    shift and go to state 217
    NFUNCTION       shift and go to state 118

    factor                         shift and go to state 251
    call_function                  shift and go to state 72

state 177

    (142) opmult -> TIMES .

    INTEGER         reduce using rule 142 (opmult -> TIMES .)
    FLOAT           reduce using rule 142 (opmult -> TIMES .)
    ID              reduce using rule 142 (opmult -> TIMES .)
    LPARENTHESIS    reduce using rule 142 (opmult -> TIMES .)
    NFUNCTION       reduce using rule 142 (opmult -> TIMES .)


state 178

    (143) opmult -> DIV .

    INTEGER         reduce using rule 143 (opmult -> DIV .)
    FLOAT           reduce using rule 143 (opmult -> DIV .)
    ID              reduce using rule 143 (opmult -> DIV .)
    LPARENTHESIS    reduce using rule 143 (opmult -> DIV .)
    NFUNCTION       reduce using rule 143 (opmult -> DIV .)


state 179

    (144) opmult -> MODULE .

    INTEGER         reduce using rule 144 (opmult -> MODULE .)
    FLOAT           reduce using rule 144 (opmult -> MODULE .)
    ID              reduce using rule 144 (opmult -> MODULE .)
    LPARENTHESIS    reduce using rule 144 (opmult -> MODULE .)
    NFUNCTION       reduce using rule 144 (opmult -> MODULE .)


state 180

    (145) opmult -> EXPONENTIATION .

    INTEGER         reduce using rule 145 (opmult -> EXPONENTIATION .)
    FLOAT           reduce using rule 145 (opmult -> EXPONENTIATION .)
    ID              reduce using rule 145 (opmult -> EXPONENTIATION .)
    LPARENTHESIS    reduce using rule 145 (opmult -> EXPONENTIATION .)
    NFUNCTION       reduce using rule 145 (opmult -> EXPONENTIATION .)


state 181

    (157) var_declaration_gen -> PLUS PLUS . ID

    ID              shift and go to state 252


state 182

    (156) var_declaration_gen -> MINUS MINUS . ID

    ID              shift and go to state 253


state 183

    (169) sentfunc -> FUNCTION NFUNCTION LPARENTHESIS . argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS . argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (166) argfunc -> . ID
    (167) argfunc -> . ID COMMA argfunc
    (168) argfunc -> .

    ID              shift and go to state 255
    RPARENTHESIS    reduce using rule 168 (argfunc -> .)

    argfunc                        shift and go to state 254

state 184

    (78) met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS . argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (166) argfunc -> . ID
    (167) argfunc -> . ID COMMA argfunc
    (168) argfunc -> .

    ID              shift and go to state 255
    RPARENTHESIS    reduce using rule 168 (argfunc -> .)

    argfunc                        shift and go to state 256

state 185

    (79) met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS . argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (166) argfunc -> . ID
    (167) argfunc -> . ID COMMA argfunc
    (168) argfunc -> .

    ID              shift and go to state 255
    RPARENTHESIS    reduce using rule 168 (argfunc -> .)

    argfunc                        shift and go to state 257

state 186

    (91) sentreturn -> RETURN type SEMICOLON .

    ID              reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    NFUNCTION       reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    IF              reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    ECHO            reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    FUNCTION        reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    RETURN          reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    FOR             reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    WHILE           reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    DO              reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    FOREACH         reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    SWITCH          reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    DEFINE          reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    CLASS           reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    ISSET           reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    GET_CLASS       reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    CONST           reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    REFERENCE       reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    INTERFACE       reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    ELABEL          reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    RKEY            reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)
    BREAK           reduce using rule 91 (sentreturn -> RETURN type SEMICOLON .)


state 187

    (92) sentreturn -> RETURN cond SEMICOLON .

    ID              reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    NFUNCTION       reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    IF              reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    ECHO            reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    FUNCTION        reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    RETURN          reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    FOR             reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    WHILE           reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    DO              reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    FOREACH         reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    SWITCH          reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    DEFINE          reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    CLASS           reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    ISSET           reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    GET_CLASS       reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    CONST           reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    REFERENCE       reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    INTERFACE       reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    ELABEL          reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    RKEY            reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)
    BREAK           reduce using rule 92 (sentreturn -> RETURN cond SEMICOLON .)


state 188

    (94) sentreturn -> RETURN expsimple SEMICOLON .

    ID              reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    NFUNCTION       reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    IF              reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    ECHO            reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    FUNCTION        reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    RETURN          reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    FOR             reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    WHILE           reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    DO              reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    FOREACH         reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    SWITCH          reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    DEFINE          reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    CLASS           reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    ISSET           reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    GET_CLASS       reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    CONST           reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    REFERENCE       reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    INTERFACE       reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    ELABEL          reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    RKEY            reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)
    BREAK           reduce using rule 94 (sentreturn -> RETURN expsimple SEMICOLON .)


state 189

    (134) factor -> LPARENTHESIS expsimple . RPARENTHESIS
    (126) expsimple -> expsimple . opsuma term
    (140) opsuma -> . PLUS
    (141) opsuma -> . MINUS

    RPARENTHESIS    shift and go to state 244
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167

    opsuma                         shift and go to state 165

state 190

    (25) var_declaration -> ID EQUAL . INTEGER SEMICOLON var_declaration
    (26) var_declaration -> ID EQUAL . INTEGER SEMICOLON
    (27) var_declaration -> ID EQUAL . FLOAT SEMICOLON var_declaration
    (28) var_declaration -> ID EQUAL . FLOAT SEMICOLON
    (29) var_declaration -> ID EQUAL . STRING SEMICOLON var_declaration
    (30) var_declaration -> ID EQUAL . STRING SEMICOLON
    (31) var_declaration -> ID EQUAL . bool SEMICOLON var_declaration
    (32) var_declaration -> ID EQUAL . bool SEMICOLON
    (33) var_declaration -> ID EQUAL . ID SEMICOLON var_declaration
    (34) var_declaration -> ID EQUAL . ID SEMICOLON
    (35) var_declaration -> ID EQUAL . exp SEMICOLON var_declaration
    (36) var_declaration -> ID EQUAL . exp SEMICOLON
    (37) var_declaration -> ID EQUAL . NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> ID EQUAL . NEW call_function SEMICOLON
    (39) var_declaration -> ID EQUAL . declaracion_array var_declaration
    (40) var_declaration -> ID EQUAL . declaracion_array
    (43) var_declaration -> ID EQUAL . call_function SEMICOLON var_declaration
    (44) var_declaration -> ID EQUAL . call_function SEMICOLON
    (72) met_clases -> ID EQUAL . NEW call_function SEMICOLON
    (110) bool -> . TRUE
    (111) bool -> . FALSE
    (116) exp -> . expsimple opcomparacion expsimple
    (117) exp -> . LPARENTHESIS expsimple opcomparacion expsimple RPARENTHESIS
    (118) exp -> . expsimple
    (84) declaracion_array -> . ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON
    (85) declaracion_array -> . ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS

    INTEGER         shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    ID              shift and go to state 105
    NEW             shift and go to state 259
    TRUE            shift and go to state 116
    FALSE           shift and go to state 117
    LPARENTHESIS    shift and go to state 114
    ARRAY           shift and go to state 115
    NFUNCTION       shift and go to state 118

    bool                           shift and go to state 113
    exp                            shift and go to state 258
    call_function                  shift and go to state 109
    declaracion_array              shift and go to state 260
    expsimple                      shift and go to state 67
    term                           shift and go to state 74
    factor                         shift and go to state 76

state 191

    (174) sentfor -> FOR LPARENTHESIS ID . EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> FOR LPARENTHESIS ID . EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> FOR LPARENTHESIS ID . EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY

    EQUAL           shift and go to state 261


state 192

    (177) sentwhile -> WHILE LPARENTHESIS cond . RPARENTHESIS LKEY declaracion_sentencias RKEY
    (147) cond -> cond . opcomparacion cond
    (148) cond -> cond . oplogicos cond
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (112) oplogicos -> . AND
    (113) oplogicos -> . OR
    (114) oplogicos -> . XOR
    (115) oplogicos -> . NOT

    RPARENTHESIS    shift and go to state 262
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    XOR             shift and go to state 162
    NOT             shift and go to state 163

    opcomparacion                  shift and go to state 151
    oplogicos                      shift and go to state 152

state 193

    (178) sentdowhile -> DO LKEY declaracion_sentencias . RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON

    RKEY            shift and go to state 263


state 194

    (179) sentforeach -> FOREACH LPARENTHESIS ID . AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> FOREACH LPARENTHESIS ID . AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (70) met_clases -> ID . DOUBLE_COLON call_function SEMICOLON
    (72) met_clases -> ID . EQUAL NEW call_function SEMICOLON
    (73) met_clases -> ID . CMETHOD call_function SEMICOLON
    (74) met_clases -> ID . CMETHOD NFUNCTION
    (75) met_clases -> ID . CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> ID . CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> ID . CMETHOD PRIVATE SEMICOLON

    AS              shift and go to state 264
    DOUBLE_COLON    shift and go to state 52
    EQUAL           shift and go to state 172
    CMETHOD         shift and go to state 53


state 195

    (181) sentforeach -> FOREACH LPARENTHESIS declaracion_array . AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    AS              shift and go to state 265


state 196

    (182) sentforeach -> FOREACH LPARENTHESIS met_clases . AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    AS              shift and go to state 266


state 197

    (183) sentswitch -> SWITCH LPARENTHESIS ID . RPARENTHESIS LKEY cuerpo_switch RKEY

    RPARENTHESIS    shift and go to state 267


state 198

    (82) sentconst -> DEFINE LPARENTHESIS STRING . COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> DEFINE LPARENTHESIS STRING . COMMA typevar RPARENTHESIS SEMICOLON

    COMMA           shift and go to state 268


state 199

    (46) sentclass -> CLASS NFUNCTION cuerpoclase .

    ID              reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    NFUNCTION       reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    IF              reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    ECHO            reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    FUNCTION        reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    RETURN          reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    FOR             reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    WHILE           reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    DO              reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    FOREACH         reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    SWITCH          reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    DEFINE          reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    CLASS           reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    ISSET           reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    GET_CLASS       reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    CONST           reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    REFERENCE       reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    INTERFACE       reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    ELABEL          reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    RKEY            reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)
    BREAK           reduce using rule 46 (sentclass -> CLASS NFUNCTION cuerpoclase .)


state 200

    (47) sentclass -> CLASS NFUNCTION EXTENDS . NFUNCTION cuerpoclase

    NFUNCTION       shift and go to state 269


state 201

    (48) sentclass -> CLASS NFUNCTION IMPLEMENTS . NFUNCTION cuerpoclase

    NFUNCTION       shift and go to state 270


state 202

    (52) cuerpoclase -> LKEY . listaatributos listametodos RKEY
    (53) cuerpoclase -> LKEY . listaatributos RKEY
    (54) cuerpoclase -> LKEY . listametodos RKEY
    (55) listaatributos -> . listaatributos scopes var_declaration
    (56) listaatributos -> . scopes var_declaration
    (57) listaatributos -> . scopes STATIC var_declaration
    (58) listametodos -> . listametodos scopes sentfunc
    (59) listametodos -> . scopes sentfunc
    (60) listametodos -> . listametodos sentfunc
    (61) listametodos -> . sentfunc
    (62) listametodos -> . listametodos scopes STATIC sentfunc
    (63) listametodos -> . scopes STATIC sentfunc
    (64) scopes -> . PUBLIC
    (65) scopes -> . PRIVATE
    (66) scopes -> . PROTECTED
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    PUBLIC          shift and go to state 275
    PRIVATE         shift and go to state 276
    PROTECTED       shift and go to state 277
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    ID              shift and go to state 279
    CONST           shift and go to state 38
    RKEY            reduce using rule 81 (met_clases -> .)

  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    listaatributos                 shift and go to state 271
    listametodos                   shift and go to state 272
    scopes                         shift and go to state 273
    sentfunc                       shift and go to state 274
    met_clases                     shift and go to state 278

state 203

    (67) met_clases -> ISSET LPARENTHESIS ID . RPARENTHESIS

    RPARENTHESIS    shift and go to state 280


state 204

    (68) met_clases -> GET_CLASS LPARENTHESIS ID . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 281


state 205

    (71) met_clases -> CONST STRING EQUAL . typevar SEMICOLON
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT

    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131

    typevar                        shift and go to state 282

state 206

    (41) var_declaration -> REFERENCE ID SEMICOLON . var_declaration
    (42) var_declaration -> REFERENCE ID SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    IF              reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    ECHO            reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    RETURN          reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    FOR             reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    WHILE           reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    DO              reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    FOREACH         reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    SWITCH          reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    DEFINE          reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    CLASS           reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    INTERFACE       reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    ELABEL          reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    RKEY            reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    BREAK           reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    PUBLIC          reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    PRIVATE         reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    PROTECTED       reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .) ]
  ! ISSET           [ reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .) ]
  ! CONST           [ reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 42 (var_declaration -> REFERENCE ID SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 283
    met_clases                     shift and go to state 90

state 207

    (49) sentinterface -> INTERFACE NFUNCTION LKEY . cuerpo_interface RKEY
    (50) cuerpo_interface -> . scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON cuerpo_interface
    (51) cuerpo_interface -> . scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON
    (64) scopes -> . PUBLIC
    (65) scopes -> . PRIVATE
    (66) scopes -> . PROTECTED

    PUBLIC          shift and go to state 275
    PRIVATE         shift and go to state 276
    PROTECTED       shift and go to state 277

    cuerpo_interface               shift and go to state 284
    scopes                         shift and go to state 285

state 208

    (33) var_declaration -> ID EQUAL ID SEMICOLON . var_declaration
    (34) var_declaration -> ID EQUAL ID SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    IF              reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    ECHO            reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    RETURN          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FOR             reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    WHILE           reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    DO              reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FOREACH         reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    SWITCH          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    DEFINE          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    CLASS           reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    INTERFACE       reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    ELABEL          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    RKEY            reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    BREAK           reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PUBLIC          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PRIVATE         reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PROTECTED       reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! ISSET           [ reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! CONST           [ reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 286
    met_clases                     shift and go to state 90

state 209

    (106) sentassign -> ID EQUAL exp SEMICOLON .
    (35) var_declaration -> ID EQUAL exp SEMICOLON . var_declaration
    (36) var_declaration -> ID EQUAL exp SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! reduce/reduce conflict for ID resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for NFUNCTION resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for ISSET resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for GET_CLASS resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for REFERENCE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    IF              reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    ECHO            reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    FOR             reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    DO              reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    FOREACH         reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    SWITCH          reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    DEFINE          reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    CLASS           reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    ELABEL          reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    RKEY            reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! IF              [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! ECHO            [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! RETURN          [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! FOR             [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! WHILE           [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! DO              [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! FOREACH         [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! DEFINE          [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! CLASS           [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! ISSET           [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! CONST           [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! INTERFACE       [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! ELABEL          [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! RKEY            [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! BREAK           [ reduce using rule 106 (sentassign -> ID EQUAL exp SEMICOLON .) ]
  ! ID              [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! ISSET           [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! CONST           [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 287
    met_clases                     shift and go to state 90

state 210

    (39) var_declaration -> ID EQUAL declaracion_array var_declaration .

    ID              reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    NFUNCTION       reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    IF              reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    ECHO            reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    FUNCTION        reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    RETURN          reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    FOR             reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    WHILE           reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    DO              reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    FOREACH         reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    SWITCH          reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    DEFINE          reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    CLASS           reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    ISSET           reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    GET_CLASS       reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    CONST           reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    REFERENCE       reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    INTERFACE       reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    ELABEL          reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    RKEY            reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    BREAK           reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    PUBLIC          reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    PRIVATE         reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)
    PROTECTED       reduce using rule 39 (var_declaration -> ID EQUAL declaracion_array var_declaration .)


state 211

    (72) met_clases -> ID EQUAL NEW call_function . SEMICOLON
    (37) var_declaration -> ID EQUAL NEW call_function . SEMICOLON var_declaration
    (38) var_declaration -> ID EQUAL NEW call_function . SEMICOLON

    SEMICOLON       shift and go to state 288


state 212

    (43) var_declaration -> ID EQUAL call_function SEMICOLON . var_declaration
    (44) var_declaration -> ID EQUAL call_function SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    IF              reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    ECHO            reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    RETURN          reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    FOR             reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    WHILE           reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    DO              reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    FOREACH         reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    SWITCH          reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    DEFINE          reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    CLASS           reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    INTERFACE       reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    ELABEL          reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    RKEY            reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    BREAK           reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    PUBLIC          reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    PRIVATE         reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    PROTECTED       reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .) ]
  ! ISSET           [ reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .) ]
  ! CONST           [ reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 44 (var_declaration -> ID EQUAL call_function SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 289
    met_clases                     shift and go to state 90

state 213

    (25) var_declaration -> ID EQUAL INTEGER SEMICOLON . var_declaration
    (26) var_declaration -> ID EQUAL INTEGER SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    IF              reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    ECHO            reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    RETURN          reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    FOR             reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    WHILE           reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    DO              reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    FOREACH         reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    SWITCH          reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    DEFINE          reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    CLASS           reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    INTERFACE       reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    ELABEL          reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    RKEY            reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    BREAK           reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    PUBLIC          reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    PRIVATE         reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    PROTECTED       reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .) ]
  ! ISSET           [ reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .) ]
  ! CONST           [ reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 26 (var_declaration -> ID EQUAL INTEGER SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 290
    met_clases                     shift and go to state 90

state 214

    (27) var_declaration -> ID EQUAL FLOAT SEMICOLON . var_declaration
    (28) var_declaration -> ID EQUAL FLOAT SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    IF              reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    ECHO            reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    RETURN          reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    FOR             reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    WHILE           reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    DO              reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    FOREACH         reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    SWITCH          reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    DEFINE          reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    CLASS           reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    INTERFACE       reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    ELABEL          reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    RKEY            reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    BREAK           reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    PUBLIC          reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    PRIVATE         reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    PROTECTED       reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .) ]
  ! ISSET           [ reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .) ]
  ! CONST           [ reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 28 (var_declaration -> ID EQUAL FLOAT SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 291
    met_clases                     shift and go to state 90

state 215

    (29) var_declaration -> ID EQUAL STRING SEMICOLON . var_declaration
    (30) var_declaration -> ID EQUAL STRING SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    IF              reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    ECHO            reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    RETURN          reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    FOR             reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    WHILE           reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    DO              reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    FOREACH         reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    SWITCH          reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    DEFINE          reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    CLASS           reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    INTERFACE       reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    ELABEL          reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    RKEY            reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    BREAK           reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    PUBLIC          reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    PRIVATE         reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    PROTECTED       reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .) ]
  ! ISSET           [ reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .) ]
  ! CONST           [ reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 30 (var_declaration -> ID EQUAL STRING SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 292
    met_clases                     shift and go to state 90

state 216

    (31) var_declaration -> ID EQUAL bool SEMICOLON . var_declaration
    (32) var_declaration -> ID EQUAL bool SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    IF              reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    ECHO            reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    RETURN          reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    FOR             reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    WHILE           reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    DO              reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    FOREACH         reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    SWITCH          reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    DEFINE          reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    CLASS           reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    INTERFACE       reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    ELABEL          reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    RKEY            reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    BREAK           reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    PUBLIC          reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    PRIVATE         reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    PROTECTED       reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .) ]
  ! ISSET           [ reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .) ]
  ! CONST           [ reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 32 (var_declaration -> ID EQUAL bool SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 293
    met_clases                     shift and go to state 90

state 217

    (134) factor -> LPARENTHESIS . expsimple RPARENTHESIS
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    INTEGER         shift and go to state 218
    FLOAT           shift and go to state 219
    ID              shift and go to state 220
    LPARENTHESIS    shift and go to state 217
    NFUNCTION       shift and go to state 118

    expsimple                      shift and go to state 189
    term                           shift and go to state 74
    factor                         shift and go to state 76
    call_function                  shift and go to state 72

state 218

    (130) factor -> INTEGER .

    TIMES           reduce using rule 130 (factor -> INTEGER .)
    DIV             reduce using rule 130 (factor -> INTEGER .)
    MODULE          reduce using rule 130 (factor -> INTEGER .)
    EXPONENTIATION  reduce using rule 130 (factor -> INTEGER .)
    RPARENTHESIS    reduce using rule 130 (factor -> INTEGER .)
    EQUALEQUAL      reduce using rule 130 (factor -> INTEGER .)
    NEQUAL          reduce using rule 130 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 130 (factor -> INTEGER .)
    GREATER         reduce using rule 130 (factor -> INTEGER .)
    GEQUAL          reduce using rule 130 (factor -> INTEGER .)
    LESS            reduce using rule 130 (factor -> INTEGER .)
    LEQUAL          reduce using rule 130 (factor -> INTEGER .)
    PLUS            reduce using rule 130 (factor -> INTEGER .)
    MINUS           reduce using rule 130 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 130 (factor -> INTEGER .)


state 219

    (131) factor -> FLOAT .

    TIMES           reduce using rule 131 (factor -> FLOAT .)
    DIV             reduce using rule 131 (factor -> FLOAT .)
    MODULE          reduce using rule 131 (factor -> FLOAT .)
    EXPONENTIATION  reduce using rule 131 (factor -> FLOAT .)
    RPARENTHESIS    reduce using rule 131 (factor -> FLOAT .)
    EQUALEQUAL      reduce using rule 131 (factor -> FLOAT .)
    NEQUAL          reduce using rule 131 (factor -> FLOAT .)
    IDENTICAL       reduce using rule 131 (factor -> FLOAT .)
    GREATER         reduce using rule 131 (factor -> FLOAT .)
    GEQUAL          reduce using rule 131 (factor -> FLOAT .)
    LESS            reduce using rule 131 (factor -> FLOAT .)
    LEQUAL          reduce using rule 131 (factor -> FLOAT .)
    PLUS            reduce using rule 131 (factor -> FLOAT .)
    MINUS           reduce using rule 131 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 131 (factor -> FLOAT .)


state 220

    (132) factor -> ID .
    (173) call_function -> ID . LPARENTHESIS arg RPARENTHESIS

    TIMES           reduce using rule 132 (factor -> ID .)
    DIV             reduce using rule 132 (factor -> ID .)
    MODULE          reduce using rule 132 (factor -> ID .)
    EXPONENTIATION  reduce using rule 132 (factor -> ID .)
    RPARENTHESIS    reduce using rule 132 (factor -> ID .)
    EQUALEQUAL      reduce using rule 132 (factor -> ID .)
    NEQUAL          reduce using rule 132 (factor -> ID .)
    IDENTICAL       reduce using rule 132 (factor -> ID .)
    GREATER         reduce using rule 132 (factor -> ID .)
    GEQUAL          reduce using rule 132 (factor -> ID .)
    LESS            reduce using rule 132 (factor -> ID .)
    LEQUAL          reduce using rule 132 (factor -> ID .)
    PLUS            reduce using rule 132 (factor -> ID .)
    MINUS           reduce using rule 132 (factor -> ID .)
    SEMICOLON       reduce using rule 132 (factor -> ID .)
    LPARENTHESIS    shift and go to state 51


state 221

    (84) declaracion_array -> ARRAY LPARENTHESIS . cuerpo_array RPARENTHESIS SEMICOLON
    (85) declaracion_array -> ARRAY LPARENTHESIS . cuerpo_array RPARENTHESIS
    (86) cuerpo_array -> . typevar COMMA cuerpo_array
    (87) cuerpo_array -> . typevar EQUALG typevar COMMA cuerpo_array
    (88) cuerpo_array -> . typevar
    (89) cuerpo_array -> . typevar EQUALG typevar
    (90) cuerpo_array -> . empty
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (189) empty -> .

    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    RPARENTHESIS    reduce using rule 189 (empty -> .)

    cuerpo_array                   shift and go to state 294
    typevar                        shift and go to state 295
    empty                          shift and go to state 296

state 222

    (107) sentassign -> ID PLUS PLUS SEMICOLON .

    ID              reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    NFUNCTION       reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    IF              reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    ECHO            reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    FUNCTION        reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    RETURN          reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    FOR             reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    DO              reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    FOREACH         reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    SWITCH          reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    DEFINE          reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    CLASS           reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    ISSET           reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    GET_CLASS       reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    CONST           reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    REFERENCE       reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    INTERFACE       reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    ELABEL          reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    RKEY            reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)
    BREAK           reduce using rule 107 (sentassign -> ID PLUS PLUS SEMICOLON .)


state 223

    (109) sentassign -> ID MINUS MINUS SEMICOLON .

    ID              reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    NFUNCTION       reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    IF              reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    ECHO            reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    FUNCTION        reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    RETURN          reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    FOR             reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    WHILE           reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    DO              reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    FOREACH         reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    SWITCH          reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    DEFINE          reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    CLASS           reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    ISSET           reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    GET_CLASS       reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    CONST           reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    REFERENCE       reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    INTERFACE       reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    ELABEL          reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    RKEY            reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)
    BREAK           reduce using rule 109 (sentassign -> ID MINUS MINUS SEMICOLON .)


state 224

    (173) call_function -> ID LPARENTHESIS arg RPARENTHESIS .

    SEMICOLON       reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    TIMES           reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    DIV             reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    MODULE          reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    EXPONENTIATION  reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    NEQUAL          reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    IDENTICAL       reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    GREATER         reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    GEQUAL          reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    LESS            reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    LEQUAL          reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    PLUS            reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    MINUS           reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 173 (call_function -> ID LPARENTHESIS arg RPARENTHESIS .)


state 225

    (163) arg -> var_declaration_gen COMMA . arg
    (159) arg -> . var_declaration_gen
    (160) arg -> . type
    (161) arg -> . type COMMA arg
    (162) arg -> . STRING
    (163) arg -> . var_declaration_gen COMMA arg
    (164) arg -> . STRING COMMA arg
    (165) arg -> .
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT

    STRING          shift and go to state 128
    RPARENTHESIS    reduce using rule 165 (arg -> .)
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131

    var_declaration_gen            shift and go to state 126
    arg                            shift and go to state 297
    type                           shift and go to state 127
    typevar                        shift and go to state 129

state 226

    (161) arg -> type COMMA . arg
    (159) arg -> . var_declaration_gen
    (160) arg -> . type
    (161) arg -> . type COMMA arg
    (162) arg -> . STRING
    (163) arg -> . var_declaration_gen COMMA arg
    (164) arg -> . STRING COMMA arg
    (165) arg -> .
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT

    STRING          shift and go to state 128
    RPARENTHESIS    reduce using rule 165 (arg -> .)
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131

    type                           shift and go to state 127
    arg                            shift and go to state 298
    var_declaration_gen            shift and go to state 126
    typevar                        shift and go to state 129

state 227

    (164) arg -> STRING COMMA . arg
    (159) arg -> . var_declaration_gen
    (160) arg -> . type
    (161) arg -> . type COMMA arg
    (162) arg -> . STRING
    (163) arg -> . var_declaration_gen COMMA arg
    (164) arg -> . STRING COMMA arg
    (165) arg -> .
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT

    STRING          shift and go to state 128
    RPARENTHESIS    reduce using rule 165 (arg -> .)
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131

    arg                            shift and go to state 299
    var_declaration_gen            shift and go to state 126
    type                           shift and go to state 127
    typevar                        shift and go to state 129

state 228

    (70) met_clases -> ID DOUBLE_COLON call_function SEMICOLON .

    ID              reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    NFUNCTION       reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    IF              reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    ECHO            reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    FUNCTION        reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    RETURN          reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    FOR             reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    WHILE           reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    DO              reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    FOREACH         reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    SWITCH          reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    DEFINE          reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    CLASS           reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    ISSET           reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    GET_CLASS       reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    CONST           reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    REFERENCE       reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    INTERFACE       reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    ELABEL          reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    RKEY            reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    BREAK           reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    PUBLIC          reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    PRIVATE         reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    PROTECTED       reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    RPARENTHESIS    reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)
    AS              reduce using rule 70 (met_clases -> ID DOUBLE_COLON call_function SEMICOLON .)


state 229

    (73) met_clases -> ID CMETHOD call_function SEMICOLON .

    ID              reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    NFUNCTION       reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    IF              reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    ECHO            reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    FUNCTION        reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    RETURN          reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    FOR             reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    WHILE           reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    DO              reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    FOREACH         reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    SWITCH          reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    DEFINE          reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    CLASS           reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    ISSET           reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    GET_CLASS       reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    CONST           reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    REFERENCE       reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    INTERFACE       reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    ELABEL          reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    RKEY            reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    BREAK           reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    PUBLIC          reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    PRIVATE         reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    PROTECTED       reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    RPARENTHESIS    reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)
    AS              reduce using rule 73 (met_clases -> ID CMETHOD call_function SEMICOLON .)


state 230

    (75) met_clases -> ID CMETHOD PUBLIC SEMICOLON .

    ID              reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    NFUNCTION       reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    IF              reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    ECHO            reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    FUNCTION        reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    RETURN          reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    FOR             reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    WHILE           reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    DO              reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    FOREACH         reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    SWITCH          reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    DEFINE          reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    CLASS           reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    ISSET           reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    GET_CLASS       reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    CONST           reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    REFERENCE       reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    INTERFACE       reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    ELABEL          reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    RKEY            reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    BREAK           reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    PUBLIC          reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    PRIVATE         reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    PROTECTED       reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    RPARENTHESIS    reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)
    AS              reduce using rule 75 (met_clases -> ID CMETHOD PUBLIC SEMICOLON .)


state 231

    (76) met_clases -> ID CMETHOD PROTECTED SEMICOLON .

    ID              reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    NFUNCTION       reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    IF              reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    ECHO            reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    FUNCTION        reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    RETURN          reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    FOR             reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    WHILE           reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    DO              reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    FOREACH         reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    SWITCH          reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    DEFINE          reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    CLASS           reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    ISSET           reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    GET_CLASS       reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    CONST           reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    REFERENCE       reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    INTERFACE       reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    ELABEL          reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    RKEY            reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    BREAK           reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    PUBLIC          reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    PRIVATE         reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    PROTECTED       reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    RPARENTHESIS    reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)
    AS              reduce using rule 76 (met_clases -> ID CMETHOD PROTECTED SEMICOLON .)


state 232

    (77) met_clases -> ID CMETHOD PRIVATE SEMICOLON .

    ID              reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    NFUNCTION       reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    IF              reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    ECHO            reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    FUNCTION        reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    RETURN          reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    FOR             reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    WHILE           reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    DO              reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    FOREACH         reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    SWITCH          reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    DEFINE          reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    CLASS           reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    ISSET           reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    GET_CLASS       reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    CONST           reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    REFERENCE       reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    INTERFACE       reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    ELABEL          reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    RKEY            reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    BREAK           reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    PUBLIC          reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    PRIVATE         reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    PROTECTED       reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    RPARENTHESIS    reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)
    AS              reduce using rule 77 (met_clases -> ID CMETHOD PRIVATE SEMICOLON .)


state 233

    (172) call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .

    SEMICOLON       reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    TIMES           reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    DIV             reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    MODULE          reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    EXPONENTIATION  reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    NEQUAL          reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    IDENTICAL       reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    GREATER         reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    GEQUAL          reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    LESS            reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    LEQUAL          reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    PLUS            reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    MINUS           reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 172 (call_function -> NFUNCTION LPARENTHESIS arg RPARENTHESIS .)


state 234

    (69) met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .

    ID              reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    NFUNCTION       reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    IF              reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    ECHO            reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    FUNCTION        reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    RETURN          reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    FOR             reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    WHILE           reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    DO              reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    FOREACH         reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    SWITCH          reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    DEFINE          reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    CLASS           reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    ISSET           reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    GET_CLASS       reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    CONST           reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    REFERENCE       reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    INTERFACE       reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    ELABEL          reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    RKEY            reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    BREAK           reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    PUBLIC          reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    PRIVATE         reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    PROTECTED       reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    RPARENTHESIS    reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)
    AS              reduce using rule 69 (met_clases -> NFUNCTION DOUBLE_COLON call_function SEMICOLON .)


state 235

    (101) auxsentif -> ELSE IF . genif auxsentif
    (104) genif -> . LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (105) genif -> . LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY

    LPARENTHESIS    shift and go to state 57

    genif                          shift and go to state 300

state 236

    (102) auxsentif -> ELSE LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 301
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 237

    (104) genif -> LPARENTHESIS cond RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 302


state 238

    (105) genif -> LPARENTHESIS met_clases RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 303


state 239

    (147) cond -> cond opcomparacion cond .
    (147) cond -> cond . opcomparacion cond
    (148) cond -> cond . oplogicos cond
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (112) oplogicos -> . AND
    (113) oplogicos -> . OR
    (114) oplogicos -> . XOR
    (115) oplogicos -> . NOT

  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 147 (cond -> cond opcomparacion cond .)
    RPARENTHESIS    reduce using rule 147 (cond -> cond opcomparacion cond .)
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    XOR             shift and go to state 162
    NOT             shift and go to state 163

  ! EQUALEQUAL      [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! NEQUAL          [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! IDENTICAL       [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! GREATER         [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! GEQUAL          [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! LESS            [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! LEQUAL          [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! AND             [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! OR              [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! XOR             [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]
  ! NOT             [ reduce using rule 147 (cond -> cond opcomparacion cond .) ]

    opcomparacion                  shift and go to state 151
    oplogicos                      shift and go to state 152

state 240

    (148) cond -> cond oplogicos cond .
    (147) cond -> cond . opcomparacion cond
    (148) cond -> cond . oplogicos cond
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (112) oplogicos -> . AND
    (113) oplogicos -> . OR
    (114) oplogicos -> . XOR
    (115) oplogicos -> . NOT

  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for IDENTICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 148 (cond -> cond oplogicos cond .)
    RPARENTHESIS    reduce using rule 148 (cond -> cond oplogicos cond .)
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    XOR             shift and go to state 162
    NOT             shift and go to state 163

  ! EQUALEQUAL      [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! NEQUAL          [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! IDENTICAL       [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! GREATER         [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! GEQUAL          [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! LESS            [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! LEQUAL          [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! AND             [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! OR              [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! XOR             [ reduce using rule 148 (cond -> cond oplogicos cond .) ]
  ! NOT             [ reduce using rule 148 (cond -> cond oplogicos cond .) ]

    oplogicos                      shift and go to state 152
    opcomparacion                  shift and go to state 151

state 241

    (116) exp -> expsimple opcomparacion expsimple .
    (126) expsimple -> expsimple . opsuma term
    (140) opsuma -> . PLUS
    (141) opsuma -> . MINUS

    SEMICOLON       reduce using rule 116 (exp -> expsimple opcomparacion expsimple .)
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167

    opsuma                         shift and go to state 165

state 242

    (126) expsimple -> expsimple opsuma term .
    (128) term -> term . opmult factor
    (142) opmult -> . TIMES
    (143) opmult -> . DIV
    (144) opmult -> . MODULE
    (145) opmult -> . EXPONENTIATION

    EQUALEQUAL      reduce using rule 126 (expsimple -> expsimple opsuma term .)
    NEQUAL          reduce using rule 126 (expsimple -> expsimple opsuma term .)
    IDENTICAL       reduce using rule 126 (expsimple -> expsimple opsuma term .)
    GREATER         reduce using rule 126 (expsimple -> expsimple opsuma term .)
    GEQUAL          reduce using rule 126 (expsimple -> expsimple opsuma term .)
    LESS            reduce using rule 126 (expsimple -> expsimple opsuma term .)
    LEQUAL          reduce using rule 126 (expsimple -> expsimple opsuma term .)
    PLUS            reduce using rule 126 (expsimple -> expsimple opsuma term .)
    MINUS           reduce using rule 126 (expsimple -> expsimple opsuma term .)
    SEMICOLON       reduce using rule 126 (expsimple -> expsimple opsuma term .)
    RPARENTHESIS    reduce using rule 126 (expsimple -> expsimple opsuma term .)
    TIMES           shift and go to state 177
    DIV             shift and go to state 178
    MODULE          shift and go to state 179
    EXPONENTIATION  shift and go to state 180

    opmult                         shift and go to state 176

state 243

    (117) exp -> LPARENTHESIS expsimple opcomparacion . expsimple RPARENTHESIS
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    INTEGER         shift and go to state 218
    FLOAT           shift and go to state 219
    ID              shift and go to state 220
    LPARENTHESIS    shift and go to state 217
    NFUNCTION       shift and go to state 118

    expsimple                      shift and go to state 304
    term                           shift and go to state 74
    factor                         shift and go to state 76
    call_function                  shift and go to state 72

state 244

    (134) factor -> LPARENTHESIS expsimple RPARENTHESIS .

    TIMES           reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    DIV             reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    MODULE          reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    EXPONENTIATION  reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    NEQUAL          reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    IDENTICAL       reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    GREATER         reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    GEQUAL          reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    LESS            reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    LEQUAL          reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    PLUS            reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    MINUS           reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    SEMICOLON       reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 134 (factor -> LPARENTHESIS expsimple RPARENTHESIS .)


state 245

    (149) cond -> LPARENTHESIS type RPARENTHESIS .

    SEMICOLON       reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    NEQUAL          reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    IDENTICAL       reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    GREATER         reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    GEQUAL          reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    LESS            reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    LEQUAL          reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    AND             reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    OR              reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    XOR             reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    NOT             reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 149 (cond -> LPARENTHESIS type RPARENTHESIS .)


state 246

    (150) cond -> LPARENTHESIS cond RPARENTHESIS .

    SEMICOLON       reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    NEQUAL          reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    IDENTICAL       reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    GREATER         reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    GEQUAL          reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    LESS            reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    LEQUAL          reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    AND             reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    OR              reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    XOR             reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    NOT             reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 150 (cond -> LPARENTHESIS cond RPARENTHESIS .)


state 247

    (72) met_clases -> ID EQUAL NEW . call_function SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    NFUNCTION       shift and go to state 118
    ID              shift and go to state 132

    call_function                  shift and go to state 305

state 248

    (154) var_declaration_gen -> ID PLUS PLUS .

    SEMICOLON       reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    EQUALEQUAL      reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    NEQUAL          reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    IDENTICAL       reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    GREATER         reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    GEQUAL          reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    LESS            reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    LEQUAL          reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    AND             reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    OR              reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    XOR             reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    NOT             reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    COMMA           reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)
    RPARENTHESIS    reduce using rule 154 (var_declaration_gen -> ID PLUS PLUS .)


state 249

    (155) var_declaration_gen -> ID MINUS MINUS .

    SEMICOLON       reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    EQUALEQUAL      reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    NEQUAL          reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    IDENTICAL       reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    GREATER         reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    GEQUAL          reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    LESS            reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    LEQUAL          reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    AND             reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    OR              reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    XOR             reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    NOT             reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    COMMA           reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)
    RPARENTHESIS    reduce using rule 155 (var_declaration_gen -> ID MINUS MINUS .)


state 250

    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS . argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (166) argfunc -> . ID
    (167) argfunc -> . ID COMMA argfunc
    (168) argfunc -> .

    ID              shift and go to state 255
    RPARENTHESIS    reduce using rule 168 (argfunc -> .)

    argfunc                        shift and go to state 306

state 251

    (128) term -> term opmult factor .

    TIMES           reduce using rule 128 (term -> term opmult factor .)
    DIV             reduce using rule 128 (term -> term opmult factor .)
    MODULE          reduce using rule 128 (term -> term opmult factor .)
    EXPONENTIATION  reduce using rule 128 (term -> term opmult factor .)
    EQUALEQUAL      reduce using rule 128 (term -> term opmult factor .)
    NEQUAL          reduce using rule 128 (term -> term opmult factor .)
    IDENTICAL       reduce using rule 128 (term -> term opmult factor .)
    GREATER         reduce using rule 128 (term -> term opmult factor .)
    GEQUAL          reduce using rule 128 (term -> term opmult factor .)
    LESS            reduce using rule 128 (term -> term opmult factor .)
    LEQUAL          reduce using rule 128 (term -> term opmult factor .)
    PLUS            reduce using rule 128 (term -> term opmult factor .)
    MINUS           reduce using rule 128 (term -> term opmult factor .)
    SEMICOLON       reduce using rule 128 (term -> term opmult factor .)
    RPARENTHESIS    reduce using rule 128 (term -> term opmult factor .)


state 252

    (157) var_declaration_gen -> PLUS PLUS ID .

    SEMICOLON       reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    EQUALEQUAL      reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    NEQUAL          reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    IDENTICAL       reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    GREATER         reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    GEQUAL          reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    LESS            reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    LEQUAL          reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    AND             reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    OR              reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    XOR             reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    NOT             reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    COMMA           reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)
    RPARENTHESIS    reduce using rule 157 (var_declaration_gen -> PLUS PLUS ID .)


state 253

    (156) var_declaration_gen -> MINUS MINUS ID .

    SEMICOLON       reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    EQUALEQUAL      reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    NEQUAL          reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    IDENTICAL       reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    GREATER         reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    GEQUAL          reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    LESS            reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    LEQUAL          reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    AND             reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    OR              reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    XOR             reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    NOT             reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    COMMA           reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)
    RPARENTHESIS    reduce using rule 156 (var_declaration_gen -> MINUS MINUS ID .)


state 254

    (169) sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc . RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 307


state 255

    (166) argfunc -> ID .
    (167) argfunc -> ID . COMMA argfunc

    RPARENTHESIS    reduce using rule 166 (argfunc -> ID .)
    COMMA           shift and go to state 308


state 256

    (78) met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 309


state 257

    (79) met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 310


state 258

    (35) var_declaration -> ID EQUAL exp . SEMICOLON var_declaration
    (36) var_declaration -> ID EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 311


state 259

    (37) var_declaration -> ID EQUAL NEW . call_function SEMICOLON var_declaration
    (38) var_declaration -> ID EQUAL NEW . call_function SEMICOLON
    (72) met_clases -> ID EQUAL NEW . call_function SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    NFUNCTION       shift and go to state 118
    ID              shift and go to state 132

    call_function                  shift and go to state 312

state 260

    (39) var_declaration -> ID EQUAL declaracion_array . var_declaration
    (40) var_declaration -> ID EQUAL declaracion_array .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for ECHO resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for WHILE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for DO resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for FOREACH resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for SWITCH resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for DEFINE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for CLASS resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for ELABEL resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for RKEY resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for BREAK resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    IF              reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    ECHO            reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    RETURN          reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    FOR             reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    WHILE           reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    DO              reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    FOREACH         reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    SWITCH          reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    DEFINE          reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    CLASS           reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    INTERFACE       reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    ELABEL          reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    RKEY            reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    BREAK           reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    PUBLIC          reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    PRIVATE         reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    PROTECTED       reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! NFUNCTION       [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! FUNCTION        [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! ISSET           [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! GET_CLASS       [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! CONST           [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! REFERENCE       [ reduce using rule 40 (var_declaration -> ID EQUAL declaracion_array .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 210
    met_clases                     shift and go to state 90

state 261

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL . expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> FOR LPARENTHESIS ID EQUAL . expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> FOR LPARENTHESIS ID EQUAL . expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    INTEGER         shift and go to state 218
    FLOAT           shift and go to state 219
    ID              shift and go to state 220
    LPARENTHESIS    shift and go to state 217
    NFUNCTION       shift and go to state 118

    expsimple                      shift and go to state 313
    term                           shift and go to state 74
    factor                         shift and go to state 76
    call_function                  shift and go to state 72

state 262

    (177) sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 314


state 263

    (178) sentdowhile -> DO LKEY declaracion_sentencias RKEY . WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON

    WHILE           shift and go to state 315


state 264

    (179) sentforeach -> FOREACH LPARENTHESIS ID AS . ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> FOREACH LPARENTHESIS ID AS . ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    ID              shift and go to state 316


state 265

    (181) sentforeach -> FOREACH LPARENTHESIS declaracion_array AS . ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    ID              shift and go to state 317


state 266

    (182) sentforeach -> FOREACH LPARENTHESIS met_clases AS . ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    ID              shift and go to state 318


state 267

    (183) sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS . LKEY cuerpo_switch RKEY

    LKEY            shift and go to state 319


state 268

    (82) sentconst -> DEFINE LPARENTHESIS STRING COMMA . declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> DEFINE LPARENTHESIS STRING COMMA . typevar RPARENTHESIS SEMICOLON
    (84) declaracion_array -> . ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON
    (85) declaracion_array -> . ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT

    ARRAY           shift and go to state 115
    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131

    declaracion_array              shift and go to state 320
    typevar                        shift and go to state 321

state 269

    (47) sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION . cuerpoclase
    (52) cuerpoclase -> . LKEY listaatributos listametodos RKEY
    (53) cuerpoclase -> . LKEY listaatributos RKEY
    (54) cuerpoclase -> . LKEY listametodos RKEY

    LKEY            shift and go to state 202

    cuerpoclase                    shift and go to state 322

state 270

    (48) sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION . cuerpoclase
    (52) cuerpoclase -> . LKEY listaatributos listametodos RKEY
    (53) cuerpoclase -> . LKEY listaatributos RKEY
    (54) cuerpoclase -> . LKEY listametodos RKEY

    LKEY            shift and go to state 202

    cuerpoclase                    shift and go to state 323

state 271

    (52) cuerpoclase -> LKEY listaatributos . listametodos RKEY
    (53) cuerpoclase -> LKEY listaatributos . RKEY
    (55) listaatributos -> listaatributos . scopes var_declaration
    (58) listametodos -> . listametodos scopes sentfunc
    (59) listametodos -> . scopes sentfunc
    (60) listametodos -> . listametodos sentfunc
    (61) listametodos -> . sentfunc
    (62) listametodos -> . listametodos scopes STATIC sentfunc
    (63) listametodos -> . scopes STATIC sentfunc
    (64) scopes -> . PUBLIC
    (65) scopes -> . PRIVATE
    (66) scopes -> . PROTECTED
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for RKEY resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    RKEY            shift and go to state 325
    PUBLIC          shift and go to state 275
    PRIVATE         shift and go to state 276
    PROTECTED       shift and go to state 277
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    ID              shift and go to state 279
    CONST           shift and go to state 38

  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    listametodos                   shift and go to state 324
    scopes                         shift and go to state 326
    sentfunc                       shift and go to state 274
    met_clases                     shift and go to state 278

state 272

    (54) cuerpoclase -> LKEY listametodos . RKEY
    (58) listametodos -> listametodos . scopes sentfunc
    (60) listametodos -> listametodos . sentfunc
    (62) listametodos -> listametodos . scopes STATIC sentfunc
    (64) scopes -> . PUBLIC
    (65) scopes -> . PRIVATE
    (66) scopes -> . PROTECTED
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for RKEY resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    RKEY            shift and go to state 327
    PUBLIC          shift and go to state 275
    PRIVATE         shift and go to state 276
    PROTECTED       shift and go to state 277
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    ID              shift and go to state 279
    CONST           shift and go to state 38

  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    scopes                         shift and go to state 328
    sentfunc                       shift and go to state 329
    met_clases                     shift and go to state 278

state 273

    (56) listaatributos -> scopes . var_declaration
    (57) listaatributos -> scopes . STATIC var_declaration
    (59) listametodos -> scopes . sentfunc
    (63) listametodos -> scopes . STATIC sentfunc
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    STATIC          shift and go to state 331
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    RKEY            reduce using rule 81 (met_clases -> .)
    PUBLIC          reduce using rule 81 (met_clases -> .)
    PRIVATE         reduce using rule 81 (met_clases -> .)
    PROTECTED       reduce using rule 81 (met_clases -> .)

  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 330
    sentfunc                       shift and go to state 332
    met_clases                     shift and go to state 333

state 274

    (61) listametodos -> sentfunc .

    RKEY            reduce using rule 61 (listametodos -> sentfunc .)
    PUBLIC          reduce using rule 61 (listametodos -> sentfunc .)
    PRIVATE         reduce using rule 61 (listametodos -> sentfunc .)
    PROTECTED       reduce using rule 61 (listametodos -> sentfunc .)
    FUNCTION        reduce using rule 61 (listametodos -> sentfunc .)
    ISSET           reduce using rule 61 (listametodos -> sentfunc .)
    GET_CLASS       reduce using rule 61 (listametodos -> sentfunc .)
    NFUNCTION       reduce using rule 61 (listametodos -> sentfunc .)
    ID              reduce using rule 61 (listametodos -> sentfunc .)
    CONST           reduce using rule 61 (listametodos -> sentfunc .)


state 275

    (64) scopes -> PUBLIC .

    STATIC          reduce using rule 64 (scopes -> PUBLIC .)
    ID              reduce using rule 64 (scopes -> PUBLIC .)
    REFERENCE       reduce using rule 64 (scopes -> PUBLIC .)
    FUNCTION        reduce using rule 64 (scopes -> PUBLIC .)
    ISSET           reduce using rule 64 (scopes -> PUBLIC .)
    GET_CLASS       reduce using rule 64 (scopes -> PUBLIC .)
    NFUNCTION       reduce using rule 64 (scopes -> PUBLIC .)
    CONST           reduce using rule 64 (scopes -> PUBLIC .)
    RKEY            reduce using rule 64 (scopes -> PUBLIC .)
    PUBLIC          reduce using rule 64 (scopes -> PUBLIC .)
    PRIVATE         reduce using rule 64 (scopes -> PUBLIC .)
    PROTECTED       reduce using rule 64 (scopes -> PUBLIC .)


state 276

    (65) scopes -> PRIVATE .

    STATIC          reduce using rule 65 (scopes -> PRIVATE .)
    ID              reduce using rule 65 (scopes -> PRIVATE .)
    REFERENCE       reduce using rule 65 (scopes -> PRIVATE .)
    FUNCTION        reduce using rule 65 (scopes -> PRIVATE .)
    ISSET           reduce using rule 65 (scopes -> PRIVATE .)
    GET_CLASS       reduce using rule 65 (scopes -> PRIVATE .)
    NFUNCTION       reduce using rule 65 (scopes -> PRIVATE .)
    CONST           reduce using rule 65 (scopes -> PRIVATE .)
    RKEY            reduce using rule 65 (scopes -> PRIVATE .)
    PUBLIC          reduce using rule 65 (scopes -> PRIVATE .)
    PRIVATE         reduce using rule 65 (scopes -> PRIVATE .)
    PROTECTED       reduce using rule 65 (scopes -> PRIVATE .)


state 277

    (66) scopes -> PROTECTED .

    STATIC          reduce using rule 66 (scopes -> PROTECTED .)
    ID              reduce using rule 66 (scopes -> PROTECTED .)
    REFERENCE       reduce using rule 66 (scopes -> PROTECTED .)
    FUNCTION        reduce using rule 66 (scopes -> PROTECTED .)
    ISSET           reduce using rule 66 (scopes -> PROTECTED .)
    GET_CLASS       reduce using rule 66 (scopes -> PROTECTED .)
    NFUNCTION       reduce using rule 66 (scopes -> PROTECTED .)
    CONST           reduce using rule 66 (scopes -> PROTECTED .)
    RKEY            reduce using rule 66 (scopes -> PROTECTED .)
    PUBLIC          reduce using rule 66 (scopes -> PROTECTED .)
    PRIVATE         reduce using rule 66 (scopes -> PROTECTED .)
    PROTECTED       reduce using rule 66 (scopes -> PROTECTED .)


state 278

    (170) sentfunc -> met_clases .

    RKEY            reduce using rule 170 (sentfunc -> met_clases .)
    PUBLIC          reduce using rule 170 (sentfunc -> met_clases .)
    PRIVATE         reduce using rule 170 (sentfunc -> met_clases .)
    PROTECTED       reduce using rule 170 (sentfunc -> met_clases .)
    FUNCTION        reduce using rule 170 (sentfunc -> met_clases .)
    ISSET           reduce using rule 170 (sentfunc -> met_clases .)
    GET_CLASS       reduce using rule 170 (sentfunc -> met_clases .)
    NFUNCTION       reduce using rule 170 (sentfunc -> met_clases .)
    ID              reduce using rule 170 (sentfunc -> met_clases .)
    CONST           reduce using rule 170 (sentfunc -> met_clases .)


state 279

    (70) met_clases -> ID . DOUBLE_COLON call_function SEMICOLON
    (72) met_clases -> ID . EQUAL NEW call_function SEMICOLON
    (73) met_clases -> ID . CMETHOD call_function SEMICOLON
    (74) met_clases -> ID . CMETHOD NFUNCTION
    (75) met_clases -> ID . CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> ID . CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> ID . CMETHOD PRIVATE SEMICOLON

    DOUBLE_COLON    shift and go to state 52
    EQUAL           shift and go to state 172
    CMETHOD         shift and go to state 53


state 280

    (67) met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .

    ID              reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    NFUNCTION       reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    IF              reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    ECHO            reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    FUNCTION        reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    RETURN          reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    FOR             reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    WHILE           reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    DO              reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    FOREACH         reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    SWITCH          reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    DEFINE          reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    CLASS           reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    ISSET           reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    GET_CLASS       reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    CONST           reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    REFERENCE       reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    INTERFACE       reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    ELABEL          reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    RKEY            reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    BREAK           reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    PUBLIC          reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    PRIVATE         reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    PROTECTED       reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)
    AS              reduce using rule 67 (met_clases -> ISSET LPARENTHESIS ID RPARENTHESIS .)


state 281

    (68) met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 334


state 282

    (71) met_clases -> CONST STRING EQUAL typevar . SEMICOLON

    SEMICOLON       shift and go to state 335


state 283

    (41) var_declaration -> REFERENCE ID SEMICOLON var_declaration .

    ID              reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    IF              reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    FOR             reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    DO              reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    FOREACH         reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    DEFINE          reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    ISSET           reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    CONST           reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    ELABEL          reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    RKEY            reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    BREAK           reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 41 (var_declaration -> REFERENCE ID SEMICOLON var_declaration .)


state 284

    (49) sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface . RKEY

    RKEY            shift and go to state 336


state 285

    (50) cuerpo_interface -> scopes . FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON cuerpo_interface
    (51) cuerpo_interface -> scopes . FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON

    FUNCTION        shift and go to state 337


state 286

    (33) var_declaration -> ID EQUAL ID SEMICOLON var_declaration .

    ID              reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    IF              reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FOR             reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    DO              reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FOREACH         reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    DEFINE          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    ISSET           reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    CONST           reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    ELABEL          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    RKEY            reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    BREAK           reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)


state 287

    (35) var_declaration -> ID EQUAL exp SEMICOLON var_declaration .

    ID              reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    IF              reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    ECHO            reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    RETURN          reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    FOR             reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    WHILE           reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    DO              reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    FOREACH         reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    SWITCH          reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    DEFINE          reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    CLASS           reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    ISSET           reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    CONST           reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    ELABEL          reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    RKEY            reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    BREAK           reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 35 (var_declaration -> ID EQUAL exp SEMICOLON var_declaration .)


state 288

    (72) met_clases -> ID EQUAL NEW call_function SEMICOLON .
    (37) var_declaration -> ID EQUAL NEW call_function SEMICOLON . var_declaration
    (38) var_declaration -> ID EQUAL NEW call_function SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! reduce/reduce conflict for ID resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for NFUNCTION resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ISSET resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for GET_CLASS resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for REFERENCE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    IF              reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    ECHO            reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    RETURN          reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    FOR             reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    WHILE           reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    DO              reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    FOREACH         reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    SWITCH          reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    DEFINE          reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    CLASS           reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    INTERFACE       reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    ELABEL          reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    RKEY            reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    BREAK           reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! IF              [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ECHO            [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! RETURN          [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! FOR             [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! WHILE           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! DO              [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! FOREACH         [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! DEFINE          [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! CLASS           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ISSET           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! CONST           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! INTERFACE       [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ELABEL          [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! RKEY            [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! BREAK           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ID              [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ISSET           [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! CONST           [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 338
    met_clases                     shift and go to state 90

state 289

    (43) var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .

    ID              reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    IF              reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    ECHO            reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    RETURN          reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    FOR             reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    WHILE           reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    DO              reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    FOREACH         reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    SWITCH          reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    DEFINE          reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    CLASS           reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    ISSET           reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    CONST           reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    ELABEL          reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    RKEY            reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    BREAK           reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 43 (var_declaration -> ID EQUAL call_function SEMICOLON var_declaration .)


state 290

    (25) var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .

    ID              reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    IF              reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    ECHO            reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    RETURN          reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    FOR             reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    WHILE           reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    DO              reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    FOREACH         reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    SWITCH          reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    DEFINE          reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    CLASS           reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    ISSET           reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    CONST           reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    ELABEL          reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    RKEY            reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    BREAK           reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 25 (var_declaration -> ID EQUAL INTEGER SEMICOLON var_declaration .)


state 291

    (27) var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .

    ID              reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    IF              reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    ECHO            reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    RETURN          reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    FOR             reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    WHILE           reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    DO              reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    FOREACH         reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    SWITCH          reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    DEFINE          reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    CLASS           reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    ISSET           reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    CONST           reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    ELABEL          reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    RKEY            reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    BREAK           reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 27 (var_declaration -> ID EQUAL FLOAT SEMICOLON var_declaration .)


state 292

    (29) var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .

    ID              reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    IF              reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    ECHO            reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    RETURN          reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    FOR             reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    WHILE           reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    DO              reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    FOREACH         reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    SWITCH          reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    DEFINE          reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    CLASS           reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    ISSET           reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    CONST           reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    ELABEL          reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    RKEY            reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    BREAK           reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 29 (var_declaration -> ID EQUAL STRING SEMICOLON var_declaration .)


state 293

    (31) var_declaration -> ID EQUAL bool SEMICOLON var_declaration .

    ID              reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    IF              reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    ECHO            reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    RETURN          reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    FOR             reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    WHILE           reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    DO              reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    FOREACH         reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    SWITCH          reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    DEFINE          reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    CLASS           reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    ISSET           reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    CONST           reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    ELABEL          reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    RKEY            reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    BREAK           reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 31 (var_declaration -> ID EQUAL bool SEMICOLON var_declaration .)


state 294

    (84) declaracion_array -> ARRAY LPARENTHESIS cuerpo_array . RPARENTHESIS SEMICOLON
    (85) declaracion_array -> ARRAY LPARENTHESIS cuerpo_array . RPARENTHESIS

    RPARENTHESIS    shift and go to state 339


state 295

    (86) cuerpo_array -> typevar . COMMA cuerpo_array
    (87) cuerpo_array -> typevar . EQUALG typevar COMMA cuerpo_array
    (88) cuerpo_array -> typevar .
    (89) cuerpo_array -> typevar . EQUALG typevar

    COMMA           shift and go to state 340
    EQUALG          shift and go to state 341
    RPARENTHESIS    reduce using rule 88 (cuerpo_array -> typevar .)


state 296

    (90) cuerpo_array -> empty .

    RPARENTHESIS    reduce using rule 90 (cuerpo_array -> empty .)


state 297

    (163) arg -> var_declaration_gen COMMA arg .

    RPARENTHESIS    reduce using rule 163 (arg -> var_declaration_gen COMMA arg .)


state 298

    (161) arg -> type COMMA arg .

    RPARENTHESIS    reduce using rule 161 (arg -> type COMMA arg .)


state 299

    (164) arg -> STRING COMMA arg .

    RPARENTHESIS    reduce using rule 164 (arg -> STRING COMMA arg .)


state 300

    (101) auxsentif -> ELSE IF genif . auxsentif
    (101) auxsentif -> . ELSE IF genif auxsentif
    (102) auxsentif -> . ELSE LKEY declaracion_sentencias RKEY
    (103) auxsentif -> . empty
    (189) empty -> .

    ELSE            shift and go to state 142
    ID              reduce using rule 189 (empty -> .)
    NFUNCTION       reduce using rule 189 (empty -> .)
    IF              reduce using rule 189 (empty -> .)
    ECHO            reduce using rule 189 (empty -> .)
    FUNCTION        reduce using rule 189 (empty -> .)
    RETURN          reduce using rule 189 (empty -> .)
    FOR             reduce using rule 189 (empty -> .)
    WHILE           reduce using rule 189 (empty -> .)
    DO              reduce using rule 189 (empty -> .)
    FOREACH         reduce using rule 189 (empty -> .)
    SWITCH          reduce using rule 189 (empty -> .)
    DEFINE          reduce using rule 189 (empty -> .)
    CLASS           reduce using rule 189 (empty -> .)
    ISSET           reduce using rule 189 (empty -> .)
    GET_CLASS       reduce using rule 189 (empty -> .)
    CONST           reduce using rule 189 (empty -> .)
    REFERENCE       reduce using rule 189 (empty -> .)
    INTERFACE       reduce using rule 189 (empty -> .)
    ELABEL          reduce using rule 189 (empty -> .)
    RKEY            reduce using rule 189 (empty -> .)
    BREAK           reduce using rule 189 (empty -> .)

    auxsentif                      shift and go to state 342
    empty                          shift and go to state 143

state 301

    (102) auxsentif -> ELSE LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 343


state 302

    (104) genif -> LPARENTHESIS cond RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 344
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 303

    (105) genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    met_clases                     shift and go to state 20
    declaracion_sentencias         shift and go to state 345
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 304

    (117) exp -> LPARENTHESIS expsimple opcomparacion expsimple . RPARENTHESIS
    (126) expsimple -> expsimple . opsuma term
    (140) opsuma -> . PLUS
    (141) opsuma -> . MINUS

    RPARENTHESIS    shift and go to state 346
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167

    opsuma                         shift and go to state 165

state 305

    (72) met_clases -> ID EQUAL NEW call_function . SEMICOLON

    SEMICOLON       shift and go to state 347


state 306

    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 348


state 307

    (169) sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS . LKEY declaracion_sentencias RKEY
    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 349


state 308

    (167) argfunc -> ID COMMA . argfunc
    (166) argfunc -> . ID
    (167) argfunc -> . ID COMMA argfunc
    (168) argfunc -> .

    ID              shift and go to state 255
    RPARENTHESIS    reduce using rule 168 (argfunc -> .)

    argfunc                        shift and go to state 350

state 309

    (78) met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 351


state 310

    (79) met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 352


state 311

    (35) var_declaration -> ID EQUAL exp SEMICOLON . var_declaration
    (36) var_declaration -> ID EQUAL exp SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    IF              reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    ECHO            reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    FOR             reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    DO              reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    FOREACH         reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    SWITCH          reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    DEFINE          reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    CLASS           reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    ELABEL          reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    RKEY            reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    PUBLIC          reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    PRIVATE         reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    PROTECTED       reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! ISSET           [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! CONST           [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 36 (var_declaration -> ID EQUAL exp SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 287
    met_clases                     shift and go to state 90

state 312

    (37) var_declaration -> ID EQUAL NEW call_function . SEMICOLON var_declaration
    (38) var_declaration -> ID EQUAL NEW call_function . SEMICOLON
    (72) met_clases -> ID EQUAL NEW call_function . SEMICOLON

    SEMICOLON       shift and go to state 353


state 313

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple . SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple . SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple . SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (126) expsimple -> expsimple . opsuma term
    (140) opsuma -> . PLUS
    (141) opsuma -> . MINUS

    SEMICOLON       shift and go to state 354
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167

    opsuma                         shift and go to state 165

state 314

    (177) sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 355
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 315

    (178) sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE . LPARENTHESIS cond RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 356


state 316

    (179) sentforeach -> FOREACH LPARENTHESIS ID AS ID . RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> FOREACH LPARENTHESIS ID AS ID . EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 357
    EQUALG          shift and go to state 358


state 317

    (181) sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 359


state 318

    (182) sentforeach -> FOREACH LPARENTHESIS met_clases AS ID . EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    EQUALG          shift and go to state 360


state 319

    (183) sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY . cuerpo_switch RKEY
    (184) cuerpo_switch -> . CASE cuerpo_case cuerpo_switch
    (185) cuerpo_switch -> . CASE cuerpo_case
    (186) cuerpo_switch -> . DEFAULT TWOPOINTS declaracion_sentencias BREAK SEMICOLON

    CASE            shift and go to state 362
    DEFAULT         shift and go to state 363

    cuerpo_switch                  shift and go to state 361

state 320

    (82) sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 364


state 321

    (83) sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 365


state 322

    (47) sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .

    ID              reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    NFUNCTION       reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    IF              reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    ECHO            reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    FUNCTION        reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    RETURN          reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    FOR             reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    WHILE           reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    DO              reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    FOREACH         reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    SWITCH          reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    DEFINE          reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    CLASS           reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    ISSET           reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    GET_CLASS       reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    CONST           reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    REFERENCE       reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    INTERFACE       reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    ELABEL          reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    RKEY            reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)
    BREAK           reduce using rule 47 (sentclass -> CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase .)


state 323

    (48) sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .

    ID              reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    NFUNCTION       reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    IF              reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    ECHO            reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    FUNCTION        reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    RETURN          reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    FOR             reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    WHILE           reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    DO              reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    FOREACH         reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    SWITCH          reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    DEFINE          reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    CLASS           reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    ISSET           reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    GET_CLASS       reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    CONST           reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    REFERENCE       reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    INTERFACE       reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    ELABEL          reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    RKEY            reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)
    BREAK           reduce using rule 48 (sentclass -> CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase .)


state 324

    (52) cuerpoclase -> LKEY listaatributos listametodos . RKEY
    (58) listametodos -> listametodos . scopes sentfunc
    (60) listametodos -> listametodos . sentfunc
    (62) listametodos -> listametodos . scopes STATIC sentfunc
    (64) scopes -> . PUBLIC
    (65) scopes -> . PRIVATE
    (66) scopes -> . PROTECTED
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for RKEY resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    RKEY            shift and go to state 366
    PUBLIC          shift and go to state 275
    PRIVATE         shift and go to state 276
    PROTECTED       shift and go to state 277
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    ID              shift and go to state 279
    CONST           shift and go to state 38

  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    scopes                         shift and go to state 328
    sentfunc                       shift and go to state 329
    met_clases                     shift and go to state 278

state 325

    (53) cuerpoclase -> LKEY listaatributos RKEY .

    ID              reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    NFUNCTION       reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    IF              reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    ECHO            reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    FUNCTION        reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    RETURN          reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    FOR             reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    WHILE           reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    DO              reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    FOREACH         reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    SWITCH          reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    DEFINE          reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    CLASS           reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    ISSET           reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    GET_CLASS       reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    CONST           reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    REFERENCE       reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    INTERFACE       reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    ELABEL          reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    RKEY            reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)
    BREAK           reduce using rule 53 (cuerpoclase -> LKEY listaatributos RKEY .)


state 326

    (55) listaatributos -> listaatributos scopes . var_declaration
    (59) listametodos -> scopes . sentfunc
    (63) listametodos -> scopes . STATIC sentfunc
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    STATIC          shift and go to state 368
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    RKEY            reduce using rule 81 (met_clases -> .)
    PUBLIC          reduce using rule 81 (met_clases -> .)
    PRIVATE         reduce using rule 81 (met_clases -> .)
    PROTECTED       reduce using rule 81 (met_clases -> .)

  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 367
    sentfunc                       shift and go to state 332
    met_clases                     shift and go to state 333

state 327

    (54) cuerpoclase -> LKEY listametodos RKEY .

    ID              reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    NFUNCTION       reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    IF              reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    ECHO            reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    FUNCTION        reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    RETURN          reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    FOR             reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    WHILE           reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    DO              reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    FOREACH         reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    SWITCH          reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    DEFINE          reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    CLASS           reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    ISSET           reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    GET_CLASS       reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    CONST           reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    REFERENCE       reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    INTERFACE       reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    ELABEL          reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    RKEY            reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)
    BREAK           reduce using rule 54 (cuerpoclase -> LKEY listametodos RKEY .)


state 328

    (58) listametodos -> listametodos scopes . sentfunc
    (62) listametodos -> listametodos scopes . STATIC sentfunc
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    STATIC          shift and go to state 370
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    ID              shift and go to state 279
    CONST           shift and go to state 38
    RKEY            reduce using rule 81 (met_clases -> .)
    PUBLIC          reduce using rule 81 (met_clases -> .)
    PRIVATE         reduce using rule 81 (met_clases -> .)
    PROTECTED       reduce using rule 81 (met_clases -> .)

  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    sentfunc                       shift and go to state 369
    met_clases                     shift and go to state 278

state 329

    (60) listametodos -> listametodos sentfunc .

    RKEY            reduce using rule 60 (listametodos -> listametodos sentfunc .)
    PUBLIC          reduce using rule 60 (listametodos -> listametodos sentfunc .)
    PRIVATE         reduce using rule 60 (listametodos -> listametodos sentfunc .)
    PROTECTED       reduce using rule 60 (listametodos -> listametodos sentfunc .)
    FUNCTION        reduce using rule 60 (listametodos -> listametodos sentfunc .)
    ISSET           reduce using rule 60 (listametodos -> listametodos sentfunc .)
    GET_CLASS       reduce using rule 60 (listametodos -> listametodos sentfunc .)
    NFUNCTION       reduce using rule 60 (listametodos -> listametodos sentfunc .)
    ID              reduce using rule 60 (listametodos -> listametodos sentfunc .)
    CONST           reduce using rule 60 (listametodos -> listametodos sentfunc .)


state 330

    (56) listaatributos -> scopes var_declaration .

    RKEY            reduce using rule 56 (listaatributos -> scopes var_declaration .)
    PUBLIC          reduce using rule 56 (listaatributos -> scopes var_declaration .)
    PRIVATE         reduce using rule 56 (listaatributos -> scopes var_declaration .)
    PROTECTED       reduce using rule 56 (listaatributos -> scopes var_declaration .)
    FUNCTION        reduce using rule 56 (listaatributos -> scopes var_declaration .)
    ISSET           reduce using rule 56 (listaatributos -> scopes var_declaration .)
    GET_CLASS       reduce using rule 56 (listaatributos -> scopes var_declaration .)
    NFUNCTION       reduce using rule 56 (listaatributos -> scopes var_declaration .)
    ID              reduce using rule 56 (listaatributos -> scopes var_declaration .)
    CONST           reduce using rule 56 (listaatributos -> scopes var_declaration .)


state 331

    (57) listaatributos -> scopes STATIC . var_declaration
    (63) listametodos -> scopes STATIC . sentfunc
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    RKEY            reduce using rule 81 (met_clases -> .)
    PUBLIC          reduce using rule 81 (met_clases -> .)
    PRIVATE         reduce using rule 81 (met_clases -> .)
    PROTECTED       reduce using rule 81 (met_clases -> .)

  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 371
    sentfunc                       shift and go to state 372
    met_clases                     shift and go to state 333

state 332

    (59) listametodos -> scopes sentfunc .

    RKEY            reduce using rule 59 (listametodos -> scopes sentfunc .)
    PUBLIC          reduce using rule 59 (listametodos -> scopes sentfunc .)
    PRIVATE         reduce using rule 59 (listametodos -> scopes sentfunc .)
    PROTECTED       reduce using rule 59 (listametodos -> scopes sentfunc .)
    FUNCTION        reduce using rule 59 (listametodos -> scopes sentfunc .)
    ISSET           reduce using rule 59 (listametodos -> scopes sentfunc .)
    GET_CLASS       reduce using rule 59 (listametodos -> scopes sentfunc .)
    NFUNCTION       reduce using rule 59 (listametodos -> scopes sentfunc .)
    ID              reduce using rule 59 (listametodos -> scopes sentfunc .)
    CONST           reduce using rule 59 (listametodos -> scopes sentfunc .)


state 333

    (45) var_declaration -> met_clases .
    (170) sentfunc -> met_clases .

  ! reduce/reduce conflict for RKEY resolved using rule 45 (var_declaration -> met_clases .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 45 (var_declaration -> met_clases .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 45 (var_declaration -> met_clases .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 45 (var_declaration -> met_clases .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 45 (var_declaration -> met_clases .)
  ! reduce/reduce conflict for ISSET resolved using rule 45 (var_declaration -> met_clases .)
  ! reduce/reduce conflict for GET_CLASS resolved using rule 45 (var_declaration -> met_clases .)
  ! reduce/reduce conflict for NFUNCTION resolved using rule 45 (var_declaration -> met_clases .)
  ! reduce/reduce conflict for ID resolved using rule 45 (var_declaration -> met_clases .)
  ! reduce/reduce conflict for CONST resolved using rule 45 (var_declaration -> met_clases .)
    RKEY            reduce using rule 45 (var_declaration -> met_clases .)
    PUBLIC          reduce using rule 45 (var_declaration -> met_clases .)
    PRIVATE         reduce using rule 45 (var_declaration -> met_clases .)
    PROTECTED       reduce using rule 45 (var_declaration -> met_clases .)
    FUNCTION        reduce using rule 45 (var_declaration -> met_clases .)
    ISSET           reduce using rule 45 (var_declaration -> met_clases .)
    GET_CLASS       reduce using rule 45 (var_declaration -> met_clases .)
    NFUNCTION       reduce using rule 45 (var_declaration -> met_clases .)
    ID              reduce using rule 45 (var_declaration -> met_clases .)
    CONST           reduce using rule 45 (var_declaration -> met_clases .)

  ! RKEY            [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! PUBLIC          [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! PRIVATE         [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! PROTECTED       [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! FUNCTION        [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! ISSET           [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! GET_CLASS       [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! NFUNCTION       [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! ID              [ reduce using rule 170 (sentfunc -> met_clases .) ]
  ! CONST           [ reduce using rule 170 (sentfunc -> met_clases .) ]


state 334

    (68) met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .

    ID              reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    NFUNCTION       reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    DO              reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    DEFINE          reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    ISSET           reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    GET_CLASS       reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    REFERENCE       reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    ELABEL          reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    RKEY            reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    PUBLIC          reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    PROTECTED       reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    RPARENTHESIS    reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)
    AS              reduce using rule 68 (met_clases -> GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON .)


state 335

    (71) met_clases -> CONST STRING EQUAL typevar SEMICOLON .

    ID              reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    NFUNCTION       reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    IF              reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    ECHO            reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    FUNCTION        reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    RETURN          reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    FOR             reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    WHILE           reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    DO              reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    FOREACH         reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    SWITCH          reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    DEFINE          reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    CLASS           reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    ISSET           reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    GET_CLASS       reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    CONST           reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    REFERENCE       reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    INTERFACE       reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    ELABEL          reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    RKEY            reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    BREAK           reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    PUBLIC          reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    PRIVATE         reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    PROTECTED       reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    RPARENTHESIS    reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)
    AS              reduce using rule 71 (met_clases -> CONST STRING EQUAL typevar SEMICOLON .)


state 336

    (49) sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .

    ID              reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    NFUNCTION       reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    IF              reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    ECHO            reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    FUNCTION        reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    RETURN          reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    FOR             reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    WHILE           reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    DO              reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    FOREACH         reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    SWITCH          reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    DEFINE          reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    CLASS           reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    ISSET           reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    GET_CLASS       reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    CONST           reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    REFERENCE       reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    INTERFACE       reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    ELABEL          reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    RKEY            reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)
    BREAK           reduce using rule 49 (sentinterface -> INTERFACE NFUNCTION LKEY cuerpo_interface RKEY .)


state 337

    (50) cuerpo_interface -> scopes FUNCTION . NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON cuerpo_interface
    (51) cuerpo_interface -> scopes FUNCTION . NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON

    NFUNCTION       shift and go to state 373


state 338

    (37) var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .

    ID              reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    NFUNCTION       reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    IF              reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    ECHO            reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    RETURN          reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    FOR             reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    WHILE           reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    DO              reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    FOREACH         reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    SWITCH          reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    DEFINE          reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    CLASS           reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    ISSET           reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    GET_CLASS       reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    CONST           reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    REFERENCE       reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    INTERFACE       reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    ELABEL          reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    RKEY            reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    BREAK           reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 37 (var_declaration -> ID EQUAL NEW call_function SEMICOLON var_declaration .)


state 339

    (84) declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS . SEMICOLON
    (85) declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .

    SEMICOLON       shift and go to state 374
    ID              reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    REFERENCE       reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    ISSET           reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    GET_CLASS       reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    NFUNCTION       reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    CONST           reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    FUNCTION        reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    IF              reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    ECHO            reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    RETURN          reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    FOR             reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    WHILE           reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    DO              reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    FOREACH         reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    SWITCH          reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    DEFINE          reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    CLASS           reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    INTERFACE       reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    ELABEL          reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    RKEY            reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    BREAK           reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    AS              reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    PUBLIC          reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    PRIVATE         reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    PROTECTED       reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 85 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS .)


state 340

    (86) cuerpo_array -> typevar COMMA . cuerpo_array
    (86) cuerpo_array -> . typevar COMMA cuerpo_array
    (87) cuerpo_array -> . typevar EQUALG typevar COMMA cuerpo_array
    (88) cuerpo_array -> . typevar
    (89) cuerpo_array -> . typevar EQUALG typevar
    (90) cuerpo_array -> . empty
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (189) empty -> .

    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    RPARENTHESIS    reduce using rule 189 (empty -> .)

    typevar                        shift and go to state 295
    cuerpo_array                   shift and go to state 375
    empty                          shift and go to state 296

state 341

    (87) cuerpo_array -> typevar EQUALG . typevar COMMA cuerpo_array
    (89) cuerpo_array -> typevar EQUALG . typevar
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT

    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131

    typevar                        shift and go to state 376

state 342

    (101) auxsentif -> ELSE IF genif auxsentif .

    ID              reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    NFUNCTION       reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    IF              reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    ECHO            reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    FUNCTION        reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    RETURN          reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    FOR             reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    WHILE           reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    DO              reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    FOREACH         reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    SWITCH          reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    DEFINE          reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    CLASS           reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    ISSET           reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    GET_CLASS       reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    CONST           reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    REFERENCE       reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    INTERFACE       reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    ELABEL          reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    RKEY            reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)
    BREAK           reduce using rule 101 (auxsentif -> ELSE IF genif auxsentif .)


state 343

    (102) auxsentif -> ELSE LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 102 (auxsentif -> ELSE LKEY declaracion_sentencias RKEY .)


state 344

    (104) genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 377


state 345

    (105) genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 378


state 346

    (117) exp -> LPARENTHESIS expsimple opcomparacion expsimple RPARENTHESIS .

    SEMICOLON       reduce using rule 117 (exp -> LPARENTHESIS expsimple opcomparacion expsimple RPARENTHESIS .)


state 347

    (72) met_clases -> ID EQUAL NEW call_function SEMICOLON .

    ID              reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    NFUNCTION       reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    IF              reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    ECHO            reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    FUNCTION        reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    RETURN          reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    FOR             reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    WHILE           reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    DO              reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    FOREACH         reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    SWITCH          reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    DEFINE          reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    CLASS           reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    ISSET           reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    GET_CLASS       reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    CONST           reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    REFERENCE       reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    INTERFACE       reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    ELABEL          reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    RKEY            reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    BREAK           reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    RPARENTHESIS    reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    AS              reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    PUBLIC          reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    PRIVATE         reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)
    PROTECTED       reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .)


state 348

    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 379


state 349

    (169) sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 380
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 350

    (167) argfunc -> ID COMMA argfunc .

    RPARENTHESIS    reduce using rule 167 (argfunc -> ID COMMA argfunc .)


state 351

    (78) met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 381
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 352

    (79) met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 382
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 353

    (37) var_declaration -> ID EQUAL NEW call_function SEMICOLON . var_declaration
    (38) var_declaration -> ID EQUAL NEW call_function SEMICOLON .
    (72) met_clases -> ID EQUAL NEW call_function SEMICOLON .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! reduce/reduce conflict for ID resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for NFUNCTION resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ISSET resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for GET_CLASS resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for REFERENCE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for DEFINE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! reduce/reduce conflict for INTERFACE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for ELABEL resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for RKEY resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    IF              reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    ECHO            reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    RETURN          reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    FOR             reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    WHILE           reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    DO              reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    FOREACH         reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    SWITCH          reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    DEFINE          reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    CLASS           reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    INTERFACE       reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    ELABEL          reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    RKEY            reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    BREAK           reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    PUBLIC          reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    PRIVATE         reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    PROTECTED       reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .)
    ID              shift and go to state 119
    REFERENCE       shift and go to state 39
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    CONST           shift and go to state 38
    FUNCTION        shift and go to state 73

  ! ID              [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ISSET           [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! CONST           [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 38 (var_declaration -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ID              [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! NFUNCTION       [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! IF              [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ECHO            [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! RETURN          [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! FOR             [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! WHILE           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! DO              [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! FOREACH         [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! DEFINE          [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! CLASS           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ISSET           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! GET_CLASS       [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! CONST           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! REFERENCE       [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! INTERFACE       [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ELABEL          [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! RKEY            [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! BREAK           [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! PUBLIC          [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! PRIVATE         [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! PROTECTED       [ reduce using rule 72 (met_clases -> ID EQUAL NEW call_function SEMICOLON .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! ELABEL          [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]
  ! PUBLIC          [ reduce using rule 81 (met_clases -> .) ]
  ! PRIVATE         [ reduce using rule 81 (met_clases -> .) ]
  ! PROTECTED       [ reduce using rule 81 (met_clases -> .) ]

    var_declaration                shift and go to state 338
    met_clases                     shift and go to state 90

state 354

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON . cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON . cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON . cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar

    LPARENTHESIS    shift and go to state 144
    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77

    cond                           shift and go to state 383
    type                           shift and go to state 69
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75

state 355

    (177) sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 384


state 356

    (178) sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS . cond RPARENTHESIS SEMICOLON
    (146) cond -> . type
    (147) cond -> . cond opcomparacion cond
    (148) cond -> . cond oplogicos cond
    (149) cond -> . LPARENTHESIS type RPARENTHESIS
    (150) cond -> . LPARENTHESIS cond RPARENTHESIS
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar

    LPARENTHESIS    shift and go to state 144
    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77

    cond                           shift and go to state 385
    type                           shift and go to state 69
    typevar                        shift and go to state 87
    var_declaration_gen            shift and go to state 75

state 357

    (179) sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 386


state 358

    (180) sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG . ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    ID              shift and go to state 387


state 359

    (181) sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 388


state 360

    (182) sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG . ID RPARENTHESIS LKEY declaracion_sentencias RKEY

    ID              shift and go to state 389


state 361

    (183) sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch . RKEY

    RKEY            shift and go to state 390


state 362

    (184) cuerpo_switch -> CASE . cuerpo_case cuerpo_switch
    (185) cuerpo_switch -> CASE . cuerpo_case
    (187) cuerpo_case -> . INTEGER TWOPOINTS declaracion_sentencias BREAK SEMICOLON

    INTEGER         shift and go to state 392

    cuerpo_case                    shift and go to state 391

state 363

    (186) cuerpo_switch -> DEFAULT . TWOPOINTS declaracion_sentencias BREAK SEMICOLON

    TWOPOINTS       shift and go to state 393


state 364

    (82) sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 394


state 365

    (83) sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 395


state 366

    (52) cuerpoclase -> LKEY listaatributos listametodos RKEY .

    ID              reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    NFUNCTION       reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    IF              reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    ECHO            reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    FUNCTION        reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    RETURN          reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    FOR             reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    WHILE           reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    DO              reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    FOREACH         reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    SWITCH          reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    DEFINE          reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    CLASS           reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    ISSET           reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    GET_CLASS       reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    CONST           reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    REFERENCE       reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    INTERFACE       reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    ELABEL          reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    RKEY            reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)
    BREAK           reduce using rule 52 (cuerpoclase -> LKEY listaatributos listametodos RKEY .)


state 367

    (55) listaatributos -> listaatributos scopes var_declaration .

    RKEY            reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)
    PUBLIC          reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)
    PRIVATE         reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)
    PROTECTED       reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)
    FUNCTION        reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)
    ISSET           reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)
    GET_CLASS       reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)
    NFUNCTION       reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)
    ID              reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)
    CONST           reduce using rule 55 (listaatributos -> listaatributos scopes var_declaration .)


state 368

    (63) listametodos -> scopes STATIC . sentfunc
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    ID              shift and go to state 279
    CONST           shift and go to state 38
    RKEY            reduce using rule 81 (met_clases -> .)
    PUBLIC          reduce using rule 81 (met_clases -> .)
    PRIVATE         reduce using rule 81 (met_clases -> .)
    PROTECTED       reduce using rule 81 (met_clases -> .)

  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    sentfunc                       shift and go to state 372
    met_clases                     shift and go to state 278

state 369

    (58) listametodos -> listametodos scopes sentfunc .

    RKEY            reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)
    PUBLIC          reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)
    PRIVATE         reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)
    PROTECTED       reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)
    FUNCTION        reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)
    ISSET           reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)
    GET_CLASS       reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)
    NFUNCTION       reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)
    ID              reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)
    CONST           reduce using rule 58 (listametodos -> listametodos scopes sentfunc .)


state 370

    (62) listametodos -> listametodos scopes STATIC . sentfunc
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    FUNCTION        shift and go to state 27
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    NFUNCTION       shift and go to state 121
    ID              shift and go to state 279
    CONST           shift and go to state 38
    RKEY            reduce using rule 81 (met_clases -> .)
    PUBLIC          reduce using rule 81 (met_clases -> .)
    PRIVATE         reduce using rule 81 (met_clases -> .)
    PROTECTED       reduce using rule 81 (met_clases -> .)

  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]

    sentfunc                       shift and go to state 396
    met_clases                     shift and go to state 278

state 371

    (57) listaatributos -> scopes STATIC var_declaration .

    RKEY            reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)
    PUBLIC          reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)
    PRIVATE         reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)
    PROTECTED       reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)
    FUNCTION        reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)
    ISSET           reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)
    GET_CLASS       reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)
    NFUNCTION       reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)
    ID              reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)
    CONST           reduce using rule 57 (listaatributos -> scopes STATIC var_declaration .)


state 372

    (63) listametodos -> scopes STATIC sentfunc .

    RKEY            reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)
    PUBLIC          reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)
    PRIVATE         reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)
    PROTECTED       reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)
    FUNCTION        reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)
    ISSET           reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)
    GET_CLASS       reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)
    NFUNCTION       reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)
    ID              reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)
    CONST           reduce using rule 63 (listametodos -> scopes STATIC sentfunc .)


state 373

    (50) cuerpo_interface -> scopes FUNCTION NFUNCTION . LPARENTHESIS arg RPARENTHESIS SEMICOLON cuerpo_interface
    (51) cuerpo_interface -> scopes FUNCTION NFUNCTION . LPARENTHESIS arg RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 397


state 374

    (84) declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .

    ID              reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    REFERENCE       reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    ISSET           reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    GET_CLASS       reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    NFUNCTION       reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    DO              reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    DEFINE          reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    ELABEL          reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    RKEY            reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    AS              reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    PUBLIC          reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    PRIVATE         reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    PROTECTED       reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)
    RPARENTHESIS    reduce using rule 84 (declaracion_array -> ARRAY LPARENTHESIS cuerpo_array RPARENTHESIS SEMICOLON .)


state 375

    (86) cuerpo_array -> typevar COMMA cuerpo_array .

    RPARENTHESIS    reduce using rule 86 (cuerpo_array -> typevar COMMA cuerpo_array .)


state 376

    (87) cuerpo_array -> typevar EQUALG typevar . COMMA cuerpo_array
    (89) cuerpo_array -> typevar EQUALG typevar .

    COMMA           shift and go to state 398
    RPARENTHESIS    reduce using rule 89 (cuerpo_array -> typevar EQUALG typevar .)


state 377

    (104) genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ELSE            reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ID              reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 104 (genif -> LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 378

    (105) genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ELSE            reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ID              reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 105 (genif -> LPARENTHESIS met_clases RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 379

    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 399
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 380

    (169) sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias . RKEY
    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 400


state 381

    (78) met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 401


state 382

    (79) met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 402


state 383

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond . SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond . SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond . SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (147) cond -> cond . opcomparacion cond
    (148) cond -> cond . oplogicos cond
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (112) oplogicos -> . AND
    (113) oplogicos -> . OR
    (114) oplogicos -> . XOR
    (115) oplogicos -> . NOT

    SEMICOLON       shift and go to state 403
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    XOR             shift and go to state 162
    NOT             shift and go to state 163

    opcomparacion                  shift and go to state 151
    oplogicos                      shift and go to state 152

state 384

    (177) sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 177 (sentwhile -> WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 385

    (178) sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond . RPARENTHESIS SEMICOLON
    (147) cond -> cond . opcomparacion cond
    (148) cond -> cond . oplogicos cond
    (119) opcomparacion -> . EQUALEQUAL
    (120) opcomparacion -> . NEQUAL
    (121) opcomparacion -> . IDENTICAL
    (122) opcomparacion -> . GREATER
    (123) opcomparacion -> . GEQUAL
    (124) opcomparacion -> . LESS
    (125) opcomparacion -> . LEQUAL
    (112) oplogicos -> . AND
    (113) oplogicos -> . OR
    (114) oplogicos -> . XOR
    (115) oplogicos -> . NOT

    RPARENTHESIS    shift and go to state 404
    EQUALEQUAL      shift and go to state 153
    NEQUAL          shift and go to state 154
    IDENTICAL       shift and go to state 155
    GREATER         shift and go to state 156
    GEQUAL          shift and go to state 157
    LESS            shift and go to state 158
    LEQUAL          shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    XOR             shift and go to state 162
    NOT             shift and go to state 163

    opcomparacion                  shift and go to state 151
    oplogicos                      shift and go to state 152

state 386

    (179) sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 405
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 387

    (180) sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 406


state 388

    (181) sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 407
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 389

    (182) sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 408


state 390

    (183) sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .

    ID              reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    NFUNCTION       reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    IF              reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    ECHO            reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    FUNCTION        reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    RETURN          reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    FOR             reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    WHILE           reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    DO              reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    FOREACH         reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    SWITCH          reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    DEFINE          reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    CLASS           reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    ISSET           reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    GET_CLASS       reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    CONST           reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    REFERENCE       reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    INTERFACE       reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    ELABEL          reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    RKEY            reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)
    BREAK           reduce using rule 183 (sentswitch -> SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY .)


state 391

    (184) cuerpo_switch -> CASE cuerpo_case . cuerpo_switch
    (185) cuerpo_switch -> CASE cuerpo_case .
    (184) cuerpo_switch -> . CASE cuerpo_case cuerpo_switch
    (185) cuerpo_switch -> . CASE cuerpo_case
    (186) cuerpo_switch -> . DEFAULT TWOPOINTS declaracion_sentencias BREAK SEMICOLON

    RKEY            reduce using rule 185 (cuerpo_switch -> CASE cuerpo_case .)
    CASE            shift and go to state 362
    DEFAULT         shift and go to state 363

    cuerpo_switch                  shift and go to state 409

state 392

    (187) cuerpo_case -> INTEGER . TWOPOINTS declaracion_sentencias BREAK SEMICOLON

    TWOPOINTS       shift and go to state 410


state 393

    (186) cuerpo_switch -> DEFAULT TWOPOINTS . declaracion_sentencias BREAK SEMICOLON
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BREAK           reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 411
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 394

    (82) sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .

    ID              reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    NFUNCTION       reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    DO              reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    DEFINE          reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    ISSET           reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    GET_CLASS       reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    REFERENCE       reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    ELABEL          reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    RKEY            reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 82 (sentconst -> DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON .)


state 395

    (83) sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .

    ID              reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    NFUNCTION       reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    DO              reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    DEFINE          reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    ISSET           reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    GET_CLASS       reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    REFERENCE       reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    ELABEL          reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    RKEY            reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 83 (sentconst -> DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON .)


state 396

    (62) listametodos -> listametodos scopes STATIC sentfunc .

    RKEY            reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)
    PUBLIC          reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)
    PRIVATE         reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)
    PROTECTED       reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)
    FUNCTION        reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)
    ISSET           reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)
    GET_CLASS       reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)
    NFUNCTION       reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)
    ID              reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)
    CONST           reduce using rule 62 (listametodos -> listametodos scopes STATIC sentfunc .)


state 397

    (50) cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS . arg RPARENTHESIS SEMICOLON cuerpo_interface
    (51) cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS . arg RPARENTHESIS SEMICOLON
    (159) arg -> . var_declaration_gen
    (160) arg -> . type
    (161) arg -> . type COMMA arg
    (162) arg -> . STRING
    (163) arg -> . var_declaration_gen COMMA arg
    (164) arg -> . STRING COMMA arg
    (165) arg -> .
    (153) var_declaration_gen -> . ID
    (154) var_declaration_gen -> . ID PLUS PLUS
    (155) var_declaration_gen -> . ID MINUS MINUS
    (156) var_declaration_gen -> . MINUS MINUS ID
    (157) var_declaration_gen -> . PLUS PLUS ID
    (158) var_declaration_gen -> . typevar
    (151) type -> . typevar
    (152) type -> . var_declaration_gen
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT

    STRING          shift and go to state 128
    RPARENTHESIS    reduce using rule 165 (arg -> .)
    ID              shift and go to state 124
    MINUS           shift and go to state 78
    PLUS            shift and go to state 77
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131

    arg                            shift and go to state 412
    var_declaration_gen            shift and go to state 126
    type                           shift and go to state 127
    typevar                        shift and go to state 129

state 398

    (87) cuerpo_array -> typevar EQUALG typevar COMMA . cuerpo_array
    (86) cuerpo_array -> . typevar COMMA cuerpo_array
    (87) cuerpo_array -> . typevar EQUALG typevar COMMA cuerpo_array
    (88) cuerpo_array -> . typevar
    (89) cuerpo_array -> . typevar EQUALG typevar
    (90) cuerpo_array -> . empty
    (135) typevar -> . STRING
    (136) typevar -> . INTEGER
    (137) typevar -> . TRUE
    (138) typevar -> . FALSE
    (139) typevar -> . FLOAT
    (189) empty -> .

    STRING          shift and go to state 62
    INTEGER         shift and go to state 130
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    FLOAT           shift and go to state 131
    RPARENTHESIS    reduce using rule 189 (empty -> .)

    typevar                        shift and go to state 295
    cuerpo_array                   shift and go to state 413
    empty                          shift and go to state 296

state 399

    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 414


state 400

    (169) sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .
    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .

  ! reduce/reduce conflict for ID resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for NFUNCTION resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for IF resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for ECHO resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for RETURN resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for FOR resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for WHILE resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for DO resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for FOREACH resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for SWITCH resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for DEFINE resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for CLASS resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for ISSET resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for GET_CLASS resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for CONST resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for REFERENCE resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for ELABEL resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for RKEY resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for BREAK resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ID              reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PUBLIC          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PRIVATE         reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PROTECTED       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)

  ! ID              [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! NFUNCTION       [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! IF              [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! ECHO            [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! FUNCTION        [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! RETURN          [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! FOR             [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! WHILE           [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! DO              [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! FOREACH         [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! SWITCH          [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! DEFINE          [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! CLASS           [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! ISSET           [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! GET_CLASS       [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! CONST           [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! REFERENCE       [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! INTERFACE       [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! ELABEL          [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! RKEY            [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! BREAK           [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! PUBLIC          [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! PRIVATE         [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]
  ! PROTECTED       [ reduce using rule 169 (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .) ]


state 401

    (78) met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PUBLIC          reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PRIVATE         reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PROTECTED       reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RPARENTHESIS    reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    AS              reduce using rule 78 (met_clases -> FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 402

    (79) met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PUBLIC          reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PRIVATE         reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PROTECTED       reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RPARENTHESIS    reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    AS              reduce using rule 79 (met_clases -> FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 403

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON . expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON . ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON . ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (126) expsimple -> . expsimple opsuma term
    (127) expsimple -> . term
    (128) term -> . term opmult factor
    (129) term -> . factor
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . ID
    (133) factor -> . call_function
    (134) factor -> . LPARENTHESIS expsimple RPARENTHESIS
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS

    ID              shift and go to state 415
    INTEGER         shift and go to state 218
    FLOAT           shift and go to state 219
    LPARENTHESIS    shift and go to state 217
    NFUNCTION       shift and go to state 118

    expsimple                      shift and go to state 416
    term                           shift and go to state 74
    factor                         shift and go to state 76
    call_function                  shift and go to state 72

state 404

    (178) sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 417


state 405

    (179) sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 418


state 406

    (180) sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 419


state 407

    (181) sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 420


state 408

    (182) sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 421


state 409

    (184) cuerpo_switch -> CASE cuerpo_case cuerpo_switch .

    RKEY            reduce using rule 184 (cuerpo_switch -> CASE cuerpo_case cuerpo_switch .)


state 410

    (187) cuerpo_case -> INTEGER TWOPOINTS . declaracion_sentencias BREAK SEMICOLON
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BREAK           reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! BREAK           [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 422
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 411

    (186) cuerpo_switch -> DEFAULT TWOPOINTS declaracion_sentencias . BREAK SEMICOLON

    BREAK           shift and go to state 423


state 412

    (50) cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg . RPARENTHESIS SEMICOLON cuerpo_interface
    (51) cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 424


state 413

    (87) cuerpo_array -> typevar EQUALG typevar COMMA cuerpo_array .

    RPARENTHESIS    reduce using rule 87 (cuerpo_array -> typevar EQUALG typevar COMMA cuerpo_array .)


state 414

    (80) met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PUBLIC          reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PRIVATE         reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    PROTECTED       reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RPARENTHESIS    reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    AS              reduce using rule 80 (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 415

    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID . PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID . MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (132) factor -> ID .
    (173) call_function -> ID . LPARENTHESIS arg RPARENTHESIS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 425
    MINUS           shift and go to state 426
    TIMES           reduce using rule 132 (factor -> ID .)
    DIV             reduce using rule 132 (factor -> ID .)
    MODULE          reduce using rule 132 (factor -> ID .)
    EXPONENTIATION  reduce using rule 132 (factor -> ID .)
    RPARENTHESIS    reduce using rule 132 (factor -> ID .)
    LPARENTHESIS    shift and go to state 51

  ! PLUS            [ reduce using rule 132 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 132 (factor -> ID .) ]


state 416

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple . RPARENTHESIS LKEY declaracion_sentencias RKEY
    (126) expsimple -> expsimple . opsuma term
    (140) opsuma -> . PLUS
    (141) opsuma -> . MINUS

    RPARENTHESIS    shift and go to state 427
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167

    opsuma                         shift and go to state 165

state 417

    (178) sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .

    ID              reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    NFUNCTION       reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    DO              reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    DEFINE          reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    ISSET           reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    GET_CLASS       reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    REFERENCE       reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    ELABEL          reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    RKEY            reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 178 (sentdowhile -> DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON .)


state 418

    (179) sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 179 (sentforeach -> FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 419

    (180) sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 428
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 420

    (181) sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 181 (sentforeach -> FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 421

    (182) sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    met_clases                     shift and go to state 20
    declaracion_sentencias         shift and go to state 429
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 422

    (187) cuerpo_case -> INTEGER TWOPOINTS declaracion_sentencias . BREAK SEMICOLON

    BREAK           shift and go to state 430


state 423

    (186) cuerpo_switch -> DEFAULT TWOPOINTS declaracion_sentencias BREAK . SEMICOLON

    SEMICOLON       shift and go to state 431


state 424

    (50) cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS . SEMICOLON cuerpo_interface
    (51) cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 432


state 425

    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS . PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY

    PLUS            shift and go to state 433


state 426

    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS . MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY

    MINUS           shift and go to state 434


state 427

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 435


state 428

    (180) sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 436


state 429

    (182) sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 437


state 430

    (187) cuerpo_case -> INTEGER TWOPOINTS declaracion_sentencias BREAK . SEMICOLON

    SEMICOLON       shift and go to state 438


state 431

    (186) cuerpo_switch -> DEFAULT TWOPOINTS declaracion_sentencias BREAK SEMICOLON .

    RKEY            reduce using rule 186 (cuerpo_switch -> DEFAULT TWOPOINTS declaracion_sentencias BREAK SEMICOLON .)


state 432

    (50) cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON . cuerpo_interface
    (51) cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON .
    (50) cuerpo_interface -> . scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON cuerpo_interface
    (51) cuerpo_interface -> . scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON
    (64) scopes -> . PUBLIC
    (65) scopes -> . PRIVATE
    (66) scopes -> . PROTECTED

    RKEY            reduce using rule 51 (cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON .)
    PUBLIC          shift and go to state 275
    PRIVATE         shift and go to state 276
    PROTECTED       shift and go to state 277

    scopes                         shift and go to state 285
    cuerpo_interface               shift and go to state 439

state 433

    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 440


state 434

    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS . RPARENTHESIS LKEY declaracion_sentencias RKEY

    RPARENTHESIS    shift and go to state 441


state 435

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 442
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 436

    (180) sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 180 (sentforeach -> FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 437

    (182) sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 182 (sentforeach -> FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 438

    (187) cuerpo_case -> INTEGER TWOPOINTS declaracion_sentencias BREAK SEMICOLON .

    CASE            reduce using rule 187 (cuerpo_case -> INTEGER TWOPOINTS declaracion_sentencias BREAK SEMICOLON .)
    DEFAULT         reduce using rule 187 (cuerpo_case -> INTEGER TWOPOINTS declaracion_sentencias BREAK SEMICOLON .)
    RKEY            reduce using rule 187 (cuerpo_case -> INTEGER TWOPOINTS declaracion_sentencias BREAK SEMICOLON .)


state 439

    (50) cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON cuerpo_interface .

    RKEY            reduce using rule 50 (cuerpo_interface -> scopes FUNCTION NFUNCTION LPARENTHESIS arg RPARENTHESIS SEMICOLON cuerpo_interface .)


state 440

    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 443


state 441

    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS . LKEY declaracion_sentencias RKEY

    LKEY            shift and go to state 444


state 442

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 445


state 443

    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 446
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 444

    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY . declaracion_sentencias RKEY
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function SEMICOLON
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (15) sentencias -> . sentforeach
    (16) sentencias -> . sentswitch
    (17) sentencias -> . sentconst
    (18) sentencias -> . sentclass
    (19) sentencias -> . met_clases
    (20) sentencias -> . var_declaration
    (21) sentencias -> . sentinterface
    (22) sentencias -> .
    (106) sentassign -> . ID EQUAL exp SEMICOLON
    (107) sentassign -> . ID PLUS PLUS SEMICOLON
    (108) sentassign -> . ID EQUAL declaracion_array
    (109) sentassign -> . ID MINUS MINUS SEMICOLON
    (171) call_function -> . NFUNCTION
    (172) call_function -> . NFUNCTION LPARENTHESIS arg RPARENTHESIS
    (173) call_function -> . ID LPARENTHESIS arg RPARENTHESIS
    (100) sentif -> . IF genif auxsentif
    (96) sentecho -> . ECHO typevar SEMICOLON
    (97) sentecho -> . ECHO exp SEMICOLON
    (98) sentecho -> . ECHO cond SEMICOLON
    (99) sentecho -> . ECHO met_clases
    (169) sentfunc -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (170) sentfunc -> . met_clases
    (91) sentreturn -> . RETURN type SEMICOLON
    (92) sentreturn -> . RETURN cond SEMICOLON
    (93) sentreturn -> . RETURN var_declaration
    (94) sentreturn -> . RETURN expsimple SEMICOLON
    (95) sentreturn -> . RETURN SEMICOLON
    (174) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY
    (175) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (176) sentfor -> . FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY
    (177) sentwhile -> . WHILE LPARENTHESIS cond RPARENTHESIS LKEY declaracion_sentencias RKEY
    (178) sentdowhile -> . DO LKEY declaracion_sentencias RKEY WHILE LPARENTHESIS cond RPARENTHESIS SEMICOLON
    (179) sentforeach -> . FOREACH LPARENTHESIS ID AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (180) sentforeach -> . FOREACH LPARENTHESIS ID AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (181) sentforeach -> . FOREACH LPARENTHESIS declaracion_array AS ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (182) sentforeach -> . FOREACH LPARENTHESIS met_clases AS ID EQUALG ID RPARENTHESIS LKEY declaracion_sentencias RKEY
    (183) sentswitch -> . SWITCH LPARENTHESIS ID RPARENTHESIS LKEY cuerpo_switch RKEY
    (82) sentconst -> . DEFINE LPARENTHESIS STRING COMMA declaracion_array RPARENTHESIS SEMICOLON
    (83) sentconst -> . DEFINE LPARENTHESIS STRING COMMA typevar RPARENTHESIS SEMICOLON
    (46) sentclass -> . CLASS NFUNCTION cuerpoclase
    (47) sentclass -> . CLASS NFUNCTION EXTENDS NFUNCTION cuerpoclase
    (48) sentclass -> . CLASS NFUNCTION IMPLEMENTS NFUNCTION cuerpoclase
    (67) met_clases -> . ISSET LPARENTHESIS ID RPARENTHESIS
    (68) met_clases -> . GET_CLASS LPARENTHESIS ID RPARENTHESIS SEMICOLON
    (69) met_clases -> . NFUNCTION DOUBLE_COLON call_function SEMICOLON
    (70) met_clases -> . ID DOUBLE_COLON call_function SEMICOLON
    (71) met_clases -> . CONST STRING EQUAL typevar SEMICOLON
    (72) met_clases -> . ID EQUAL NEW call_function SEMICOLON
    (73) met_clases -> . ID CMETHOD call_function SEMICOLON
    (74) met_clases -> . ID CMETHOD NFUNCTION
    (75) met_clases -> . ID CMETHOD PUBLIC SEMICOLON
    (76) met_clases -> . ID CMETHOD PROTECTED SEMICOLON
    (77) met_clases -> . ID CMETHOD PRIVATE SEMICOLON
    (78) met_clases -> . FUNCTION CONSTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (79) met_clases -> . FUNCTION DESTRUCTOR LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (80) met_clases -> . FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY
    (81) met_clases -> .
    (23) var_declaration -> . ID SEMICOLON var_declaration
    (24) var_declaration -> . ID SEMICOLON
    (25) var_declaration -> . ID EQUAL INTEGER SEMICOLON var_declaration
    (26) var_declaration -> . ID EQUAL INTEGER SEMICOLON
    (27) var_declaration -> . ID EQUAL FLOAT SEMICOLON var_declaration
    (28) var_declaration -> . ID EQUAL FLOAT SEMICOLON
    (29) var_declaration -> . ID EQUAL STRING SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL STRING SEMICOLON
    (31) var_declaration -> . ID EQUAL bool SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL bool SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . ID EQUAL exp SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL exp SEMICOLON
    (37) var_declaration -> . ID EQUAL NEW call_function SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL NEW call_function SEMICOLON
    (39) var_declaration -> . ID EQUAL declaracion_array var_declaration
    (40) var_declaration -> . ID EQUAL declaracion_array
    (41) var_declaration -> . REFERENCE ID SEMICOLON var_declaration
    (42) var_declaration -> . REFERENCE ID SEMICOLON
    (43) var_declaration -> . ID EQUAL call_function SEMICOLON var_declaration
    (44) var_declaration -> . ID EQUAL call_function SEMICOLON
    (45) var_declaration -> . met_clases
    (49) sentinterface -> . INTERFACE NFUNCTION LKEY cuerpo_interface RKEY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NFUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ISSET resolved as shift
  ! shift/reduce conflict for GET_CLASS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for REFERENCE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 22 (sentencias -> .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (sentencias -> .)
  ! shift/reduce conflict for REFERENCE resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    RKEY            reduce using rule 22 (sentencias -> .)
    ID              shift and go to state 23
    NFUNCTION       shift and go to state 24
    IF              shift and go to state 25
    ECHO            shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    DO              shift and go to state 31
    FOREACH         shift and go to state 32
    SWITCH          shift and go to state 33
    DEFINE          shift and go to state 34
    CLASS           shift and go to state 35
    ISSET           shift and go to state 36
    GET_CLASS       shift and go to state 37
    CONST           shift and go to state 38
    REFERENCE       shift and go to state 39
    INTERFACE       shift and go to state 40

  ! ID              [ reduce using rule 22 (sentencias -> .) ]
  ! NFUNCTION       [ reduce using rule 22 (sentencias -> .) ]
  ! IF              [ reduce using rule 22 (sentencias -> .) ]
  ! ECHO            [ reduce using rule 22 (sentencias -> .) ]
  ! FUNCTION        [ reduce using rule 22 (sentencias -> .) ]
  ! RETURN          [ reduce using rule 22 (sentencias -> .) ]
  ! FOR             [ reduce using rule 22 (sentencias -> .) ]
  ! WHILE           [ reduce using rule 22 (sentencias -> .) ]
  ! DO              [ reduce using rule 22 (sentencias -> .) ]
  ! FOREACH         [ reduce using rule 22 (sentencias -> .) ]
  ! SWITCH          [ reduce using rule 22 (sentencias -> .) ]
  ! DEFINE          [ reduce using rule 22 (sentencias -> .) ]
  ! CLASS           [ reduce using rule 22 (sentencias -> .) ]
  ! ISSET           [ reduce using rule 22 (sentencias -> .) ]
  ! GET_CLASS       [ reduce using rule 22 (sentencias -> .) ]
  ! CONST           [ reduce using rule 22 (sentencias -> .) ]
  ! REFERENCE       [ reduce using rule 22 (sentencias -> .) ]
  ! INTERFACE       [ reduce using rule 22 (sentencias -> .) ]
  ! ID              [ reduce using rule 81 (met_clases -> .) ]
  ! NFUNCTION       [ reduce using rule 81 (met_clases -> .) ]
  ! IF              [ reduce using rule 81 (met_clases -> .) ]
  ! ECHO            [ reduce using rule 81 (met_clases -> .) ]
  ! FUNCTION        [ reduce using rule 81 (met_clases -> .) ]
  ! RETURN          [ reduce using rule 81 (met_clases -> .) ]
  ! FOR             [ reduce using rule 81 (met_clases -> .) ]
  ! WHILE           [ reduce using rule 81 (met_clases -> .) ]
  ! DO              [ reduce using rule 81 (met_clases -> .) ]
  ! FOREACH         [ reduce using rule 81 (met_clases -> .) ]
  ! SWITCH          [ reduce using rule 81 (met_clases -> .) ]
  ! DEFINE          [ reduce using rule 81 (met_clases -> .) ]
  ! CLASS           [ reduce using rule 81 (met_clases -> .) ]
  ! ISSET           [ reduce using rule 81 (met_clases -> .) ]
  ! GET_CLASS       [ reduce using rule 81 (met_clases -> .) ]
  ! CONST           [ reduce using rule 81 (met_clases -> .) ]
  ! REFERENCE       [ reduce using rule 81 (met_clases -> .) ]
  ! INTERFACE       [ reduce using rule 81 (met_clases -> .) ]
  ! RKEY            [ reduce using rule 81 (met_clases -> .) ]

    declaracion_sentencias         shift and go to state 447
    sentencias                     shift and go to state 6
    sentassign                     shift and go to state 7
    call_function                  shift and go to state 8
    sentif                         shift and go to state 9
    sentecho                       shift and go to state 10
    sentfunc                       shift and go to state 11
    sentreturn                     shift and go to state 12
    sentfor                        shift and go to state 13
    sentwhile                      shift and go to state 14
    sentdowhile                    shift and go to state 15
    sentforeach                    shift and go to state 16
    sentswitch                     shift and go to state 17
    sentconst                      shift and go to state 18
    sentclass                      shift and go to state 19
    met_clases                     shift and go to state 20
    var_declaration                shift and go to state 21
    sentinterface                  shift and go to state 22

state 445

    (174) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 174 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 446

    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 448


state 447

    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias . RKEY

    RKEY            shift and go to state 449


state 448

    (175) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 175 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUS PLUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)


state 449

    (176) sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .

    ID              reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    NFUNCTION       reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    IF              reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ECHO            reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FUNCTION        reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RETURN          reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOR             reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    WHILE           reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DO              reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    FOREACH         reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    SWITCH          reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    DEFINE          reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CLASS           reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ISSET           reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    GET_CLASS       reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    CONST           reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    REFERENCE       reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    INTERFACE       reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    ELABEL          reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    RKEY            reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)
    BREAK           reduce using rule 176 (sentfor -> FOR LPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUS MINUS RPARENTHESIS LKEY declaracion_sentencias RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for DO in state 2 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 2 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for DO in state 2 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 2 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 2 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 2 resolved as shift
WARNING: shift/reduce conflict for ELABEL in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 3 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for CONST in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 3 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for CONST in state 3 resolved as shift
WARNING: shift/reduce conflict for ELABEL in state 3 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 3 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 6 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 6 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 6 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 6 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 6 resolved as shift
WARNING: shift/reduce conflict for FOR in state 6 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for DO in state 6 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 6 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 6 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 6 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 6 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 6 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 6 resolved as shift
WARNING: shift/reduce conflict for CONST in state 6 resolved as shift
WARNING: shift/reduce conflict for ID in state 6 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 6 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 6 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 6 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 6 resolved as shift
WARNING: shift/reduce conflict for FOR in state 6 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for DO in state 6 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 6 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 6 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 6 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 6 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 6 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 6 resolved as shift
WARNING: shift/reduce conflict for CONST in state 6 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 6 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 6 resolved as shift
WARNING: shift/reduce conflict for ID in state 26 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 26 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 26 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 26 resolved as shift
WARNING: shift/reduce conflict for CONST in state 26 resolved as shift
WARNING: shift/reduce conflict for ID in state 28 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 28 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 28 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 28 resolved as shift
WARNING: shift/reduce conflict for CONST in state 28 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 28 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 48 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 48 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 48 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for CONST in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 48 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 48 resolved as shift
WARNING: shift/reduce conflict for CONST in state 48 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 48 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 58 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 82 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 89 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 93 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for DO in state 93 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 93 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 93 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 93 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 93 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 93 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 93 resolved as shift
WARNING: shift/reduce conflict for CONST in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 93 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for DO in state 93 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 93 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 93 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 93 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 93 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 93 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 93 resolved as shift
WARNING: shift/reduce conflict for CONST in state 93 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 93 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 93 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 107 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 107 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 107 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 107 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 107 resolved as shift
WARNING: shift/reduce conflict for CONST in state 107 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 107 resolved as shift
WARNING: shift/reduce conflict for ID in state 107 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 107 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 107 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 107 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 107 resolved as shift
WARNING: shift/reduce conflict for CONST in state 107 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 107 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 109 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 110 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 111 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 126 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 128 resolved as shift
WARNING: shift/reduce conflict for RPARENTHESIS in state 169 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 171 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 171 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 202 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 202 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 202 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 202 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 202 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 202 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 202 resolved as shift
WARNING: shift/reduce conflict for ID in state 202 resolved as shift
WARNING: shift/reduce conflict for CONST in state 202 resolved as shift
WARNING: shift/reduce conflict for ID in state 206 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 206 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 206 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 206 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 206 resolved as shift
WARNING: shift/reduce conflict for CONST in state 206 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 206 resolved as shift
WARNING: shift/reduce conflict for ID in state 206 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 206 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 206 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 206 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 206 resolved as shift
WARNING: shift/reduce conflict for CONST in state 206 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 206 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 208 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 208 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 208 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 208 resolved as shift
WARNING: shift/reduce conflict for CONST in state 208 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 208 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 208 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 208 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 208 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 208 resolved as shift
WARNING: shift/reduce conflict for CONST in state 208 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 208 resolved as shift
WARNING: shift/reduce conflict for ID in state 209 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 209 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 209 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 209 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 209 resolved as shift
WARNING: shift/reduce conflict for CONST in state 209 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 209 resolved as shift
WARNING: shift/reduce conflict for ID in state 209 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 209 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 209 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 209 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 209 resolved as shift
WARNING: shift/reduce conflict for CONST in state 209 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 209 resolved as shift
WARNING: shift/reduce conflict for ID in state 212 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 212 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 212 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 212 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 212 resolved as shift
WARNING: shift/reduce conflict for CONST in state 212 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 212 resolved as shift
WARNING: shift/reduce conflict for ID in state 212 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 212 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 212 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 212 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 212 resolved as shift
WARNING: shift/reduce conflict for CONST in state 212 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 212 resolved as shift
WARNING: shift/reduce conflict for ID in state 213 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 213 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 213 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 213 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 213 resolved as shift
WARNING: shift/reduce conflict for CONST in state 213 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 213 resolved as shift
WARNING: shift/reduce conflict for ID in state 213 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 213 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 213 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 213 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 213 resolved as shift
WARNING: shift/reduce conflict for CONST in state 213 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 213 resolved as shift
WARNING: shift/reduce conflict for ID in state 214 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 214 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 214 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 214 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 214 resolved as shift
WARNING: shift/reduce conflict for CONST in state 214 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 214 resolved as shift
WARNING: shift/reduce conflict for ID in state 214 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 214 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 214 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 214 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 214 resolved as shift
WARNING: shift/reduce conflict for CONST in state 214 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 214 resolved as shift
WARNING: shift/reduce conflict for ID in state 215 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 215 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 215 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 215 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 215 resolved as shift
WARNING: shift/reduce conflict for CONST in state 215 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 215 resolved as shift
WARNING: shift/reduce conflict for ID in state 215 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 215 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 215 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 215 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 215 resolved as shift
WARNING: shift/reduce conflict for CONST in state 215 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 215 resolved as shift
WARNING: shift/reduce conflict for ID in state 216 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 216 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 216 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 216 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 216 resolved as shift
WARNING: shift/reduce conflict for CONST in state 216 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 216 resolved as shift
WARNING: shift/reduce conflict for ID in state 216 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 216 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 216 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 216 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 216 resolved as shift
WARNING: shift/reduce conflict for CONST in state 216 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 216 resolved as shift
WARNING: shift/reduce conflict for ID in state 236 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 236 resolved as shift
WARNING: shift/reduce conflict for IF in state 236 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 236 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 236 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 236 resolved as shift
WARNING: shift/reduce conflict for FOR in state 236 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 236 resolved as shift
WARNING: shift/reduce conflict for DO in state 236 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 236 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 236 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 236 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 236 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 236 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 236 resolved as shift
WARNING: shift/reduce conflict for CONST in state 236 resolved as shift
WARNING: shift/reduce conflict for ID in state 236 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 236 resolved as shift
WARNING: shift/reduce conflict for IF in state 236 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 236 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 236 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 236 resolved as shift
WARNING: shift/reduce conflict for FOR in state 236 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 236 resolved as shift
WARNING: shift/reduce conflict for DO in state 236 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 236 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 236 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 236 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 236 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 236 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 236 resolved as shift
WARNING: shift/reduce conflict for CONST in state 236 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 236 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 236 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 239 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 239 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 239 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 239 resolved as shift
WARNING: shift/reduce conflict for GEQUAL in state 239 resolved as shift
WARNING: shift/reduce conflict for LESS in state 239 resolved as shift
WARNING: shift/reduce conflict for LEQUAL in state 239 resolved as shift
WARNING: shift/reduce conflict for AND in state 239 resolved as shift
WARNING: shift/reduce conflict for OR in state 239 resolved as shift
WARNING: shift/reduce conflict for XOR in state 239 resolved as shift
WARNING: shift/reduce conflict for NOT in state 239 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 240 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 240 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL in state 240 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 240 resolved as shift
WARNING: shift/reduce conflict for GEQUAL in state 240 resolved as shift
WARNING: shift/reduce conflict for LESS in state 240 resolved as shift
WARNING: shift/reduce conflict for LEQUAL in state 240 resolved as shift
WARNING: shift/reduce conflict for AND in state 240 resolved as shift
WARNING: shift/reduce conflict for OR in state 240 resolved as shift
WARNING: shift/reduce conflict for XOR in state 240 resolved as shift
WARNING: shift/reduce conflict for NOT in state 240 resolved as shift
WARNING: shift/reduce conflict for ID in state 260 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 260 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 260 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 260 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 260 resolved as shift
WARNING: shift/reduce conflict for CONST in state 260 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 260 resolved as shift
WARNING: shift/reduce conflict for ID in state 260 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 260 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 260 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 260 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 260 resolved as shift
WARNING: shift/reduce conflict for CONST in state 260 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 260 resolved as shift
WARNING: shift/reduce conflict for RKEY in state 271 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 271 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 271 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 271 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 271 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 271 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 271 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 271 resolved as shift
WARNING: shift/reduce conflict for ID in state 271 resolved as shift
WARNING: shift/reduce conflict for CONST in state 271 resolved as shift
WARNING: shift/reduce conflict for RKEY in state 272 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 272 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 272 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 272 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 272 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 272 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 272 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 272 resolved as shift
WARNING: shift/reduce conflict for ID in state 272 resolved as shift
WARNING: shift/reduce conflict for CONST in state 272 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 273 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 273 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 273 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 273 resolved as shift
WARNING: shift/reduce conflict for ID in state 273 resolved as shift
WARNING: shift/reduce conflict for CONST in state 273 resolved as shift
WARNING: shift/reduce conflict for ID in state 288 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 288 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 288 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 288 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 288 resolved as shift
WARNING: shift/reduce conflict for CONST in state 288 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 288 resolved as shift
WARNING: shift/reduce conflict for ID in state 288 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 288 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 288 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 288 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 288 resolved as shift
WARNING: shift/reduce conflict for CONST in state 288 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 288 resolved as shift
WARNING: shift/reduce conflict for ID in state 302 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 302 resolved as shift
WARNING: shift/reduce conflict for IF in state 302 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 302 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 302 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 302 resolved as shift
WARNING: shift/reduce conflict for FOR in state 302 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 302 resolved as shift
WARNING: shift/reduce conflict for DO in state 302 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 302 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 302 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 302 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 302 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 302 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 302 resolved as shift
WARNING: shift/reduce conflict for CONST in state 302 resolved as shift
WARNING: shift/reduce conflict for ID in state 302 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 302 resolved as shift
WARNING: shift/reduce conflict for IF in state 302 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 302 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 302 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 302 resolved as shift
WARNING: shift/reduce conflict for FOR in state 302 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 302 resolved as shift
WARNING: shift/reduce conflict for DO in state 302 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 302 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 302 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 302 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 302 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 302 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 302 resolved as shift
WARNING: shift/reduce conflict for CONST in state 302 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 302 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 302 resolved as shift
WARNING: shift/reduce conflict for ID in state 303 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 303 resolved as shift
WARNING: shift/reduce conflict for IF in state 303 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 303 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 303 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 303 resolved as shift
WARNING: shift/reduce conflict for FOR in state 303 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 303 resolved as shift
WARNING: shift/reduce conflict for DO in state 303 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 303 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 303 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 303 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 303 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 303 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 303 resolved as shift
WARNING: shift/reduce conflict for CONST in state 303 resolved as shift
WARNING: shift/reduce conflict for ID in state 303 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 303 resolved as shift
WARNING: shift/reduce conflict for IF in state 303 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 303 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 303 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 303 resolved as shift
WARNING: shift/reduce conflict for FOR in state 303 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 303 resolved as shift
WARNING: shift/reduce conflict for DO in state 303 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 303 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 303 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 303 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 303 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 303 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 303 resolved as shift
WARNING: shift/reduce conflict for CONST in state 303 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 303 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 303 resolved as shift
WARNING: shift/reduce conflict for ID in state 311 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 311 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 311 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 311 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 311 resolved as shift
WARNING: shift/reduce conflict for CONST in state 311 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 311 resolved as shift
WARNING: shift/reduce conflict for ID in state 311 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 311 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 311 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 311 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 311 resolved as shift
WARNING: shift/reduce conflict for CONST in state 311 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 311 resolved as shift
WARNING: shift/reduce conflict for ID in state 314 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 314 resolved as shift
WARNING: shift/reduce conflict for IF in state 314 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 314 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 314 resolved as shift
WARNING: shift/reduce conflict for FOR in state 314 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 314 resolved as shift
WARNING: shift/reduce conflict for DO in state 314 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 314 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 314 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 314 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 314 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 314 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 314 resolved as shift
WARNING: shift/reduce conflict for CONST in state 314 resolved as shift
WARNING: shift/reduce conflict for ID in state 314 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 314 resolved as shift
WARNING: shift/reduce conflict for IF in state 314 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 314 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 314 resolved as shift
WARNING: shift/reduce conflict for FOR in state 314 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 314 resolved as shift
WARNING: shift/reduce conflict for DO in state 314 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 314 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 314 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 314 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 314 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 314 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 314 resolved as shift
WARNING: shift/reduce conflict for CONST in state 314 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 314 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 314 resolved as shift
WARNING: shift/reduce conflict for RKEY in state 324 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 324 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 324 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 324 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 324 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 324 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 324 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 324 resolved as shift
WARNING: shift/reduce conflict for ID in state 324 resolved as shift
WARNING: shift/reduce conflict for CONST in state 324 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 326 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 326 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 326 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 326 resolved as shift
WARNING: shift/reduce conflict for ID in state 326 resolved as shift
WARNING: shift/reduce conflict for CONST in state 326 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 328 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 328 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 328 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 328 resolved as shift
WARNING: shift/reduce conflict for ID in state 328 resolved as shift
WARNING: shift/reduce conflict for CONST in state 328 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 331 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 331 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 331 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 331 resolved as shift
WARNING: shift/reduce conflict for ID in state 331 resolved as shift
WARNING: shift/reduce conflict for CONST in state 331 resolved as shift
WARNING: shift/reduce conflict for ID in state 349 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 349 resolved as shift
WARNING: shift/reduce conflict for IF in state 349 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 349 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 349 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 349 resolved as shift
WARNING: shift/reduce conflict for FOR in state 349 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 349 resolved as shift
WARNING: shift/reduce conflict for DO in state 349 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 349 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 349 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 349 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 349 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 349 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 349 resolved as shift
WARNING: shift/reduce conflict for CONST in state 349 resolved as shift
WARNING: shift/reduce conflict for ID in state 349 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 349 resolved as shift
WARNING: shift/reduce conflict for IF in state 349 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 349 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 349 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 349 resolved as shift
WARNING: shift/reduce conflict for FOR in state 349 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 349 resolved as shift
WARNING: shift/reduce conflict for DO in state 349 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 349 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 349 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 349 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 349 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 349 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 349 resolved as shift
WARNING: shift/reduce conflict for CONST in state 349 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 349 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 349 resolved as shift
WARNING: shift/reduce conflict for ID in state 351 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 351 resolved as shift
WARNING: shift/reduce conflict for IF in state 351 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 351 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 351 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 351 resolved as shift
WARNING: shift/reduce conflict for FOR in state 351 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 351 resolved as shift
WARNING: shift/reduce conflict for DO in state 351 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 351 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 351 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 351 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 351 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 351 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 351 resolved as shift
WARNING: shift/reduce conflict for CONST in state 351 resolved as shift
WARNING: shift/reduce conflict for ID in state 351 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 351 resolved as shift
WARNING: shift/reduce conflict for IF in state 351 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 351 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 351 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 351 resolved as shift
WARNING: shift/reduce conflict for FOR in state 351 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 351 resolved as shift
WARNING: shift/reduce conflict for DO in state 351 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 351 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 351 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 351 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 351 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 351 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 351 resolved as shift
WARNING: shift/reduce conflict for CONST in state 351 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 351 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 351 resolved as shift
WARNING: shift/reduce conflict for ID in state 352 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 352 resolved as shift
WARNING: shift/reduce conflict for IF in state 352 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 352 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 352 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 352 resolved as shift
WARNING: shift/reduce conflict for FOR in state 352 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 352 resolved as shift
WARNING: shift/reduce conflict for DO in state 352 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 352 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 352 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 352 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 352 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 352 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 352 resolved as shift
WARNING: shift/reduce conflict for CONST in state 352 resolved as shift
WARNING: shift/reduce conflict for ID in state 352 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 352 resolved as shift
WARNING: shift/reduce conflict for IF in state 352 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 352 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 352 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 352 resolved as shift
WARNING: shift/reduce conflict for FOR in state 352 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 352 resolved as shift
WARNING: shift/reduce conflict for DO in state 352 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 352 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 352 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 352 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 352 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 352 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 352 resolved as shift
WARNING: shift/reduce conflict for CONST in state 352 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 352 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 352 resolved as shift
WARNING: shift/reduce conflict for ID in state 353 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 353 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 353 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 353 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 353 resolved as shift
WARNING: shift/reduce conflict for CONST in state 353 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 353 resolved as shift
WARNING: shift/reduce conflict for ID in state 353 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 353 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 353 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 353 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 353 resolved as shift
WARNING: shift/reduce conflict for CONST in state 353 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 353 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 368 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 368 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 368 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 368 resolved as shift
WARNING: shift/reduce conflict for ID in state 368 resolved as shift
WARNING: shift/reduce conflict for CONST in state 368 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 370 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 370 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 370 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 370 resolved as shift
WARNING: shift/reduce conflict for ID in state 370 resolved as shift
WARNING: shift/reduce conflict for CONST in state 370 resolved as shift
WARNING: shift/reduce conflict for ID in state 379 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 379 resolved as shift
WARNING: shift/reduce conflict for IF in state 379 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 379 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 379 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 379 resolved as shift
WARNING: shift/reduce conflict for FOR in state 379 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 379 resolved as shift
WARNING: shift/reduce conflict for DO in state 379 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 379 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 379 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 379 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 379 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 379 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 379 resolved as shift
WARNING: shift/reduce conflict for CONST in state 379 resolved as shift
WARNING: shift/reduce conflict for ID in state 379 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 379 resolved as shift
WARNING: shift/reduce conflict for IF in state 379 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 379 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 379 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 379 resolved as shift
WARNING: shift/reduce conflict for FOR in state 379 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 379 resolved as shift
WARNING: shift/reduce conflict for DO in state 379 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 379 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 379 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 379 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 379 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 379 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 379 resolved as shift
WARNING: shift/reduce conflict for CONST in state 379 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 379 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 379 resolved as shift
WARNING: shift/reduce conflict for ID in state 386 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 386 resolved as shift
WARNING: shift/reduce conflict for IF in state 386 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 386 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 386 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 386 resolved as shift
WARNING: shift/reduce conflict for FOR in state 386 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 386 resolved as shift
WARNING: shift/reduce conflict for DO in state 386 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 386 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 386 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 386 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 386 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 386 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 386 resolved as shift
WARNING: shift/reduce conflict for CONST in state 386 resolved as shift
WARNING: shift/reduce conflict for ID in state 386 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 386 resolved as shift
WARNING: shift/reduce conflict for IF in state 386 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 386 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 386 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 386 resolved as shift
WARNING: shift/reduce conflict for FOR in state 386 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 386 resolved as shift
WARNING: shift/reduce conflict for DO in state 386 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 386 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 386 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 386 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 386 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 386 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 386 resolved as shift
WARNING: shift/reduce conflict for CONST in state 386 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 386 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 386 resolved as shift
WARNING: shift/reduce conflict for ID in state 388 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 388 resolved as shift
WARNING: shift/reduce conflict for IF in state 388 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 388 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 388 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 388 resolved as shift
WARNING: shift/reduce conflict for FOR in state 388 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 388 resolved as shift
WARNING: shift/reduce conflict for DO in state 388 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 388 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 388 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 388 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 388 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 388 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 388 resolved as shift
WARNING: shift/reduce conflict for CONST in state 388 resolved as shift
WARNING: shift/reduce conflict for ID in state 388 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 388 resolved as shift
WARNING: shift/reduce conflict for IF in state 388 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 388 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 388 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 388 resolved as shift
WARNING: shift/reduce conflict for FOR in state 388 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 388 resolved as shift
WARNING: shift/reduce conflict for DO in state 388 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 388 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 388 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 388 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 388 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 388 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 388 resolved as shift
WARNING: shift/reduce conflict for CONST in state 388 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 388 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 388 resolved as shift
WARNING: shift/reduce conflict for ID in state 393 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 393 resolved as shift
WARNING: shift/reduce conflict for IF in state 393 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 393 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 393 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 393 resolved as shift
WARNING: shift/reduce conflict for FOR in state 393 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 393 resolved as shift
WARNING: shift/reduce conflict for DO in state 393 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 393 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 393 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 393 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 393 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 393 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 393 resolved as shift
WARNING: shift/reduce conflict for CONST in state 393 resolved as shift
WARNING: shift/reduce conflict for ID in state 393 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 393 resolved as shift
WARNING: shift/reduce conflict for IF in state 393 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 393 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 393 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 393 resolved as shift
WARNING: shift/reduce conflict for FOR in state 393 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 393 resolved as shift
WARNING: shift/reduce conflict for DO in state 393 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 393 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 393 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 393 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 393 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 393 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 393 resolved as shift
WARNING: shift/reduce conflict for CONST in state 393 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 393 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 393 resolved as shift
WARNING: shift/reduce conflict for ID in state 410 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 410 resolved as shift
WARNING: shift/reduce conflict for IF in state 410 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 410 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 410 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 410 resolved as shift
WARNING: shift/reduce conflict for FOR in state 410 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 410 resolved as shift
WARNING: shift/reduce conflict for DO in state 410 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 410 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 410 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 410 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 410 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 410 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 410 resolved as shift
WARNING: shift/reduce conflict for CONST in state 410 resolved as shift
WARNING: shift/reduce conflict for ID in state 410 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 410 resolved as shift
WARNING: shift/reduce conflict for IF in state 410 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 410 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 410 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 410 resolved as shift
WARNING: shift/reduce conflict for FOR in state 410 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 410 resolved as shift
WARNING: shift/reduce conflict for DO in state 410 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 410 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 410 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 410 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 410 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 410 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 410 resolved as shift
WARNING: shift/reduce conflict for CONST in state 410 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 410 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 410 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 415 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 415 resolved as shift
WARNING: shift/reduce conflict for ID in state 419 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 419 resolved as shift
WARNING: shift/reduce conflict for IF in state 419 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 419 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 419 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 419 resolved as shift
WARNING: shift/reduce conflict for FOR in state 419 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 419 resolved as shift
WARNING: shift/reduce conflict for DO in state 419 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 419 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 419 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 419 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 419 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 419 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 419 resolved as shift
WARNING: shift/reduce conflict for CONST in state 419 resolved as shift
WARNING: shift/reduce conflict for ID in state 419 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 419 resolved as shift
WARNING: shift/reduce conflict for IF in state 419 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 419 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 419 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 419 resolved as shift
WARNING: shift/reduce conflict for FOR in state 419 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 419 resolved as shift
WARNING: shift/reduce conflict for DO in state 419 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 419 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 419 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 419 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 419 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 419 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 419 resolved as shift
WARNING: shift/reduce conflict for CONST in state 419 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 419 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 419 resolved as shift
WARNING: shift/reduce conflict for ID in state 421 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 421 resolved as shift
WARNING: shift/reduce conflict for IF in state 421 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 421 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 421 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 421 resolved as shift
WARNING: shift/reduce conflict for FOR in state 421 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 421 resolved as shift
WARNING: shift/reduce conflict for DO in state 421 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 421 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 421 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 421 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 421 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 421 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 421 resolved as shift
WARNING: shift/reduce conflict for CONST in state 421 resolved as shift
WARNING: shift/reduce conflict for ID in state 421 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 421 resolved as shift
WARNING: shift/reduce conflict for IF in state 421 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 421 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 421 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 421 resolved as shift
WARNING: shift/reduce conflict for FOR in state 421 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 421 resolved as shift
WARNING: shift/reduce conflict for DO in state 421 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 421 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 421 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 421 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 421 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 421 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 421 resolved as shift
WARNING: shift/reduce conflict for CONST in state 421 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 421 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 421 resolved as shift
WARNING: shift/reduce conflict for ID in state 435 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 435 resolved as shift
WARNING: shift/reduce conflict for IF in state 435 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 435 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 435 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 435 resolved as shift
WARNING: shift/reduce conflict for FOR in state 435 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 435 resolved as shift
WARNING: shift/reduce conflict for DO in state 435 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 435 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 435 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 435 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 435 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 435 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 435 resolved as shift
WARNING: shift/reduce conflict for CONST in state 435 resolved as shift
WARNING: shift/reduce conflict for ID in state 435 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 435 resolved as shift
WARNING: shift/reduce conflict for IF in state 435 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 435 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 435 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 435 resolved as shift
WARNING: shift/reduce conflict for FOR in state 435 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 435 resolved as shift
WARNING: shift/reduce conflict for DO in state 435 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 435 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 435 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 435 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 435 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 435 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 435 resolved as shift
WARNING: shift/reduce conflict for CONST in state 435 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 435 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 435 resolved as shift
WARNING: shift/reduce conflict for ID in state 443 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 443 resolved as shift
WARNING: shift/reduce conflict for IF in state 443 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 443 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 443 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 443 resolved as shift
WARNING: shift/reduce conflict for FOR in state 443 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 443 resolved as shift
WARNING: shift/reduce conflict for DO in state 443 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 443 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 443 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 443 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 443 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 443 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 443 resolved as shift
WARNING: shift/reduce conflict for CONST in state 443 resolved as shift
WARNING: shift/reduce conflict for ID in state 443 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 443 resolved as shift
WARNING: shift/reduce conflict for IF in state 443 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 443 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 443 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 443 resolved as shift
WARNING: shift/reduce conflict for FOR in state 443 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 443 resolved as shift
WARNING: shift/reduce conflict for DO in state 443 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 443 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 443 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 443 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 443 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 443 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 443 resolved as shift
WARNING: shift/reduce conflict for CONST in state 443 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 443 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 443 resolved as shift
WARNING: shift/reduce conflict for ID in state 444 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 444 resolved as shift
WARNING: shift/reduce conflict for IF in state 444 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 444 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 444 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 444 resolved as shift
WARNING: shift/reduce conflict for FOR in state 444 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 444 resolved as shift
WARNING: shift/reduce conflict for DO in state 444 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 444 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 444 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 444 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 444 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 444 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 444 resolved as shift
WARNING: shift/reduce conflict for CONST in state 444 resolved as shift
WARNING: shift/reduce conflict for ID in state 444 resolved as shift
WARNING: shift/reduce conflict for NFUNCTION in state 444 resolved as shift
WARNING: shift/reduce conflict for IF in state 444 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 444 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 444 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 444 resolved as shift
WARNING: shift/reduce conflict for FOR in state 444 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 444 resolved as shift
WARNING: shift/reduce conflict for DO in state 444 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 444 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 444 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 444 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 444 resolved as shift
WARNING: shift/reduce conflict for ISSET in state 444 resolved as shift
WARNING: shift/reduce conflict for GET_CLASS in state 444 resolved as shift
WARNING: shift/reduce conflict for CONST in state 444 resolved as shift
WARNING: shift/reduce conflict for REFERENCE in state 444 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 444 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 3 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 6 resolved using rule (declaracion_sentencias -> sentencias)
WARNING: rejected rule (sentencias -> <empty>) in state 6
WARNING: reduce/reduce conflict in state 6 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 6
WARNING: reduce/reduce conflict in state 6 resolved using rule (declaracion_sentencias -> sentencias)
WARNING: rejected rule (met_clases -> <empty>) in state 6
WARNING: reduce/reduce conflict in state 20 resolved using rule (sentencias -> met_clases)
WARNING: rejected rule (sentfunc -> met_clases) in state 20
WARNING: reduce/reduce conflict in state 20 resolved using rule (sentencias -> met_clases)
WARNING: rejected rule (var_declaration -> met_clases) in state 20
WARNING: reduce/reduce conflict in state 48 resolved using rule (var_declaration -> ID SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 58 resolved using rule (type -> typevar)
WARNING: rejected rule (var_declaration_gen -> typevar) in state 58
WARNING: reduce/reduce conflict in state 63 resolved using rule (factor -> INTEGER)
WARNING: rejected rule (typevar -> INTEGER) in state 63
WARNING: reduce/reduce conflict in state 66 resolved using rule (factor -> FLOAT)
WARNING: rejected rule (typevar -> FLOAT) in state 66
WARNING: reduce/reduce conflict in state 70 resolved using rule (factor -> ID)
WARNING: rejected rule (var_declaration_gen -> ID) in state 70
WARNING: reduce/reduce conflict in state 87 resolved using rule (type -> typevar)
WARNING: rejected rule (var_declaration_gen -> typevar) in state 87
WARNING: reduce/reduce conflict in state 93 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 93
WARNING: reduce/reduce conflict in state 107 resolved using rule (var_declaration -> ID EQUAL declaracion_array)
WARNING: rejected rule (sentassign -> ID EQUAL declaracion_array) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (var_declaration -> ID EQUAL declaracion_array)
WARNING: rejected rule (met_clases -> <empty>) in state 107
WARNING: reduce/reduce conflict in state 126 resolved using rule (type -> var_declaration_gen)
WARNING: rejected rule (arg -> var_declaration_gen) in state 126
WARNING: reduce/reduce conflict in state 128 resolved using rule (typevar -> STRING)
WARNING: rejected rule (arg -> STRING) in state 128
WARNING: reduce/reduce conflict in state 129 resolved using rule (type -> typevar)
WARNING: rejected rule (var_declaration_gen -> typevar) in state 129
WARNING: reduce/reduce conflict in state 171 resolved using rule (factor -> ID)
WARNING: rejected rule (var_declaration_gen -> ID) in state 171
WARNING: reduce/reduce conflict in state 206 resolved using rule (var_declaration -> REFERENCE ID SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 206
WARNING: reduce/reduce conflict in state 208 resolved using rule (var_declaration -> ID EQUAL ID SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 208
WARNING: reduce/reduce conflict in state 209 resolved using rule (var_declaration -> ID EQUAL exp SEMICOLON)
WARNING: rejected rule (sentassign -> ID EQUAL exp SEMICOLON) in state 209
WARNING: reduce/reduce conflict in state 209 resolved using rule (var_declaration -> ID EQUAL exp SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 209
WARNING: reduce/reduce conflict in state 212 resolved using rule (var_declaration -> ID EQUAL call_function SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 212
WARNING: reduce/reduce conflict in state 213 resolved using rule (var_declaration -> ID EQUAL INTEGER SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 213
WARNING: reduce/reduce conflict in state 214 resolved using rule (var_declaration -> ID EQUAL FLOAT SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 214
WARNING: reduce/reduce conflict in state 215 resolved using rule (var_declaration -> ID EQUAL STRING SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 215
WARNING: reduce/reduce conflict in state 216 resolved using rule (var_declaration -> ID EQUAL bool SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 216
WARNING: reduce/reduce conflict in state 236 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 236
WARNING: reduce/reduce conflict in state 260 resolved using rule (var_declaration -> ID EQUAL declaracion_array)
WARNING: rejected rule (met_clases -> <empty>) in state 260
WARNING: reduce/reduce conflict in state 288 resolved using rule (var_declaration -> ID EQUAL NEW call_function SEMICOLON)
WARNING: rejected rule (met_clases -> ID EQUAL NEW call_function SEMICOLON) in state 288
WARNING: reduce/reduce conflict in state 288 resolved using rule (var_declaration -> ID EQUAL NEW call_function SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 288
WARNING: reduce/reduce conflict in state 302 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 302
WARNING: reduce/reduce conflict in state 303 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 303
WARNING: reduce/reduce conflict in state 311 resolved using rule (var_declaration -> ID EQUAL exp SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 311
WARNING: reduce/reduce conflict in state 314 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 314
WARNING: reduce/reduce conflict in state 333 resolved using rule (var_declaration -> met_clases)
WARNING: rejected rule (sentfunc -> met_clases) in state 333
WARNING: reduce/reduce conflict in state 349 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 349
WARNING: reduce/reduce conflict in state 351 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 351
WARNING: reduce/reduce conflict in state 352 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 352
WARNING: reduce/reduce conflict in state 353 resolved using rule (var_declaration -> ID EQUAL NEW call_function SEMICOLON)
WARNING: rejected rule (met_clases -> ID EQUAL NEW call_function SEMICOLON) in state 353
WARNING: reduce/reduce conflict in state 353 resolved using rule (var_declaration -> ID EQUAL NEW call_function SEMICOLON)
WARNING: rejected rule (met_clases -> <empty>) in state 353
WARNING: reduce/reduce conflict in state 379 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 379
WARNING: reduce/reduce conflict in state 386 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 386
WARNING: reduce/reduce conflict in state 388 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 388
WARNING: reduce/reduce conflict in state 393 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 393
WARNING: reduce/reduce conflict in state 400 resolved using rule (met_clases -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY)
WARNING: rejected rule (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY) in state 400
WARNING: reduce/reduce conflict in state 410 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 410
WARNING: reduce/reduce conflict in state 419 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 419
WARNING: reduce/reduce conflict in state 421 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 421
WARNING: reduce/reduce conflict in state 435 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 435
WARNING: reduce/reduce conflict in state 443 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 443
WARNING: reduce/reduce conflict in state 444 resolved using rule (sentencias -> <empty>)
WARNING: rejected rule (met_clases -> <empty>) in state 444
WARNING: Rule (var_declaration_gen -> typevar) is never reduced
WARNING: Rule (sentassign -> ID EQUAL declaracion_array) is never reduced
WARNING: Rule (arg -> var_declaration_gen) is never reduced
WARNING: Rule (arg -> STRING) is never reduced
WARNING: Rule (sentassign -> ID EQUAL exp SEMICOLON) is never reduced
WARNING: Rule (sentfunc -> FUNCTION NFUNCTION LPARENTHESIS argfunc RPARENTHESIS LKEY declaracion_sentencias RKEY) is never reduced
